<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/5654c44c5214/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python 执行 pip 安装下载慢？这里教你怎么解决</title>
    <url>/6e9decc2d8bd/</url>
    <content><![CDATA[<p>Python 官方的 PIP 库安装需要连接的服务器在国外，所以在国内访问服务器下载第三方库时并不方便，所以需要将服务器指定到国内的服务器，已获得更加稳定的使用体验。</p>
<span id="more"></span>

<h3 id="首先在当前用户文件夹下新建一个pip文件夹，再在此文件夹下新建一个pip-ini文件"><a href="#首先在当前用户文件夹下新建一个pip文件夹，再在此文件夹下新建一个pip-ini文件" class="headerlink" title="首先在当前用户文件夹下新建一个pip文件夹，再在此文件夹下新建一个pip.ini文件"></a>首先在当前用户文件夹下新建一个 pip 文件夹，再在此文件夹下新建一个 pip.ini 文件</h3><p>此处以 Windows 为例，其他系统也是如此，在当前用户目录下新建相应的 pip 文件夹和 pip.ini</p>
<p><img src="/./assets/2DBFE009A4A68A1C75907D0CFDC71C04.png" alt="2DBFE009A4A68A1C75907D0CFDC71C04"></p>
<h3 id="编辑该文件，在该文件中写入"><a href="#编辑该文件，在该文件中写入" class="headerlink" title="编辑该文件，在该文件中写入"></a>编辑该文件，在该文件中写入</h3><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></tbody></table></figure>



<p>使用哪个源可以根据自己的实际需求进行修改，直接替换即可</p>
<ul>
<li>阿里云                       <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li>
<li> 中国科技大学           <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li>
<li> 豆瓣                          <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a> </li>
<li> 清华大学                  <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li>
<li> 中国科学技术大学  <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫登录学校的教务系统</title>
    <url>/8b5897d3fa74/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>事情是这样的，在看到舍友在做课表爬虫的项目，于是乎想着自己也写一个吧，我便立马打开了 pycharm，开始了教务系统的爬虫。<br>其实这个博客应该分为上下部分，这次更新上部分吧，主要是也只写了这么一部分<br>老规矩，正事之前美女镇楼！GoGoGo！</p>
<span id="more"></span>

<p><img src="/./assets/C0613BA9155D39BD3CDCA069D2CABAFE.jpg" alt="C0613BA9155D39BD3CDCA069D2CABAFE"></p>
<hr>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="/./assets/1D648E86E887FF73D541C16724FE66D4.png" alt="1D648E86E887FF73D541C16724FE66D4"></p>
<h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>这个项目主要是实现登录教务系统，爬取课表并非本次主要内容。</p>
<p>这里主要是使用了 easyocr 的第三方库，使用库识别本地图片进行模拟真人登录</p>
<h3 id="实际代码展示"><a href="#实际代码展示" class="headerlink" title="实际代码展示"></a>实际代码展示</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.47'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受课表页面数据进行解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsing</span>(<span class="params">text</span>):</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    <span class="comment"># print(text)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> html.xpath(<span class="string">'//*[@class="datalist"]/tr'</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i.xpath(<span class="string">'./td/text()'</span>):</span><br><span class="line">            <span class="built_in">print</span>(j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    table = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 创建一个会话</span></span><br><span class="line">        s = requests.Session()</span><br><span class="line">        <span class="comment"># 会话请求一张验证码</span></span><br><span class="line">        image = s.get(<span class="string">f'http://jw.glutnn.cn/academic/getCaptcha.do?<span class="subst">{random.random()}</span>'</span>, headers=headers)</span><br><span class="line">        <span class="comment"># 保存验证码到本地</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'getCaptcha.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(image.content)</span><br><span class="line">        <span class="comment"># 使用OCR识别验证码</span></span><br><span class="line">        reader = easyocr.Reader([<span class="string">'ch_sim'</span>, <span class="string">'en'</span>])</span><br><span class="line">        result = reader.readtext(<span class="string">'getCaptcha.png'</span>)</span><br><span class="line">        <span class="comment"># 接受验证码变量</span></span><br><span class="line">        captcha = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 读取验证码</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            word = i[<span class="number">1</span>]</span><br><span class="line">            captcha = word</span><br><span class="line">        <span class="comment"># 登录时需要提交的数据，为账号密码，以及动态地填充验证码</span></span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">'j_username'</span>: <span class="string">'**********'</span>,</span><br><span class="line">            <span class="string">'j_password'</span>: <span class="string">'**********'</span>,</span><br><span class="line">            <span class="string">'j_captcha'</span>: <span class="string">f'<span class="subst">{captcha}</span>'</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment"># 在获取验证码后的会话进行验证OCR的结果</span></span><br><span class="line">        login = s.post(<span class="string">f'http://jw.glutnn.cn/academic/checkCaptcha.do?captchaCode=<span class="subst">{captcha}</span>'</span>, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> login.text == <span class="string">'false'</span>:</span><br><span class="line">            <span class="comment"># 结果为假不进行操作</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 验证通过时执行登录操作</span></span><br><span class="line">            loging = s.post(<span class="string">'http://jw.glutnn.cn/academic/j_acegi_security_check'</span>, data=data)</span><br><span class="line">            <span class="comment"># 进入个人课表页面，没访问这个页面无法进入本周课表页面</span></span><br><span class="line">            cu = s.get(<span class="string">f'http://jw.glutnn.cn/academic/student/currcourse/currcourse.jsdo?randomString=202109171926436Qv6aK&amp;groupId=&amp;moduleId=2000'</span>, headers=headers)</span><br><span class="line">            <span class="comment"># 访问本周课表页面</span></span><br><span class="line">            kb = s.get(<span class="string">'http://jw.glutnn.cn/academic/manager/coursearrange/studentWeeklyTimetable.do?yearid=41&amp;termid=3'</span>,headers=headers,data=data)</span><br><span class="line">            parsing(kb.text)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>模拟登陆</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Python 给微信发消息？怎么做的？</title>
    <url>/aeec0178dafd/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>上周做过一个爬虫爬取课表的，本应该尽快出下半部分的内容的，但是嘛，中间放了个中秋假，就开始鸽了。<br>其实下半部分内容就是把爬到的课表进行格式化再通知自己而已。<br>其中我最先考虑的是使用 server 酱的，虽然 server 酱服务很到位，但是我想白嫖啊，因为我的 server 每天推送的次数已经全部安排得明明白白了。<br>接下来便有了用邮件提醒的想法，这个确实有得搞的，但今天先不说。<br>在我折腾我的路由后台时发现了里面的自建微信推送功能，便看到了微信开放平台的这个接口<br>那就开搞，又免费又是推送到微信又不会产生过多的邮件，你就说香不香吧</p>
<span id="more"></span>

<hr>
<h3 id="测试号申请"><a href="#测试号申请" class="headerlink" title="测试号申请"></a>测试号申请</h3><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">微信公众平台接口测试帐号申请</a><br>找到自己的 appID 和 appsecret<br><img src="/./assets/6729E6D4FC19D27C9C5E77892FC40150.png" alt="6729E6D4FC19D27C9C5E77892FC40150"><br>扫码自己的测试号二维码并且得到微信号（这个微信号不是真正的微信号，可以理解为微信的 ID）<br><img src="/./assets/C5C9757E0FF906A54100E0A45226520F.png" alt="C5C9757E0FF906A54100E0A45226520F"><br>新增一个模板<br><img src="/./assets/CD9FC0A33645D6864C4AD2CC806DAD02.png" alt="CD9FC0A33645D6864C4AD2CC806DAD02"><br>模板内容照着这个写</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">{{title.DATA}} {{content.DATA}}</span><br></pre></td></tr></tbody></table></figure>

<p>这样便可得到所需的内容</p>
<ul>
<li>appid</li>
<li>appsecret</li>
<li> 微信号</li>
<li>模板 ID</li>
</ul>
<h3 id="请求token"><a href="#请求token" class="headerlink" title="请求token"></a>请求 token</h3><p>首先看一下 [微信开放平台](<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Template_Message_Interface.html">模板消息 | 微信开放文档 (qq.com)</a>) 的文档吧</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span><br></pre></td></tr></tbody></table></figure>

<h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> grant_type</td>
<td align="left">string</td>
<td align="left"></td>
<td align="left"> 是</td>
<td align="left">填写 client_credential</td>
</tr>
<tr>
<td align="left">appid</td>
<td align="left">string</td>
<td align="left"></td>
<td align="left"> 是</td>
<td align="left">小程序唯一凭证，即 AppID，可在「<a href="https://mp.weixin.qq.com/">微信公众平台</a> - 设置 - 开发设置」页中获得。（需要已经成为开发者，且帐号没有异常状态）</td>
</tr>
<tr>
<td align="left">secret</td>
<td align="left">string</td>
<td align="left"></td>
<td align="left"> 是</td>
<td align="left">小程序唯一凭证密钥，即 AppSecret，获取方式同 appid</td>
</tr>
</tbody></table>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回的 JSON 数据包</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> access_token</td>
<td align="left">string</td>
<td align="left"> 获取到的凭证</td>
</tr>
<tr>
<td align="left"> expires_in</td>
<td align="left">number</td>
<td align="left"> 凭证有效时间，单位：秒。目前是 7200 秒之内的值。</td>
</tr>
<tr>
<td align="left">errcode</td>
<td align="left">number</td>
<td align="left"> 错误码</td>
</tr>
<tr>
<td align="left"> errmsg</td>
<td align="left">string</td>
<td align="left"> 错误信息</td>
</tr>
</tbody></table>
<p>这就是获取一个临时的一次性通行证，我们需要拿着我们的身份信息 appid 和 secret 去给微信后台，微信知道是我就给我一个通行证让我利用这个通行证来进行发出信息</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取推送token</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    result = requests.get(</span><br><span class="line">        <span class="string">f"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="subst">{app_id}</span>&amp;secret=<span class="subst">{app_secret}</span>"</span>)</span><br><span class="line">    access_token = json.loads(result.text)</span><br><span class="line">    <span class="keyword">return</span> access_token[<span class="string">"access_token"</span>]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="推送消息"><a href="#推送消息" class="headerlink" title="推送消息"></a>推送消息</h3><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">POST https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</span><br></pre></td></tr></tbody></table></figure>

<h4 id="请求参数-1"><a href="#请求参数-1" class="headerlink" title="请求参数"></a>请求参数</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> touser</td>
<td align="left"> 是</td>
<td align="left">接收者 openid</td>
</tr>
<tr>
<td align="left">template_id</td>
<td align="left"> 是</td>
<td align="left">模板 ID</td>
</tr>
<tr>
<td align="left">url</td>
<td align="left"> 否</td>
<td align="left">模板跳转链接（海外帐号没有跳转能力）</td>
</tr>
<tr>
<td align="left">miniprogram</td>
<td align="left"> 否</td>
<td align="left">跳小程序所需数据，不需跳小程序可不用传该数据</td>
</tr>
<tr>
<td align="left"> appid</td>
<td align="left"> 是</td>
<td align="left">所需跳转到的小程序 appid（该小程序 appid 必须与发模板消息的公众号是绑定关联关系，暂不支持小游戏）</td>
</tr>
<tr>
<td align="left">pagepath</td>
<td align="left"> 否</td>
<td align="left">所需跳转到小程序的具体页面路径，支持带参数，（示例 index?foo=bar），要求该小程序已发布，暂不支持小游戏</td>
</tr>
<tr>
<td align="left"> data</td>
<td align="left"> 是</td>
<td align="left">模板数据</td>
</tr>
<tr>
<td align="left"> color</td>
<td align="left"> 否</td>
<td align="left">模板内容字体颜色，不填默认为黑色</td>
</tr>
</tbody></table>
<h4 id="POST数据说明"><a href="#POST数据说明" class="headerlink" title="POST数据说明"></a>POST 数据说明</h4><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"touser"</span><span class="punctuation">:</span><span class="string">"OPENID"</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"template_id"</span><span class="punctuation">:</span><span class="string">"ngqIpbwh8bUfcSsECmogfXcV14J0tQlEpBO27izEYtY"</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">"url"</span><span class="punctuation">:</span><span class="string">"http://weixin.qq.com/download"</span><span class="punctuation">,</span>  </span><br><span class="line">     <span class="attr">"miniprogram"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">       <span class="attr">"appid"</span><span class="punctuation">:</span><span class="string">"xiaochengxuappid12345"</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">"pagepath"</span><span class="punctuation">:</span><span class="string">"index?foo=bar"</span></span><br><span class="line">     <span class="punctuation">}</span><span class="punctuation">,</span>          </span><br><span class="line">     <span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">             <span class="attr">"first"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                 <span class="attr">"value"</span><span class="punctuation">:</span><span class="string">"恭喜你购买成功！"</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">"color"</span><span class="punctuation">:</span><span class="string">"#173177"</span></span><br><span class="line">             <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">"keyword1"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">                 <span class="attr">"value"</span><span class="punctuation">:</span><span class="string">"巧克力"</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">"color"</span><span class="punctuation">:</span><span class="string">"#173177"</span></span><br><span class="line">             <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">"keyword2"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                 <span class="attr">"value"</span><span class="punctuation">:</span><span class="string">"39.8元"</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">"color"</span><span class="punctuation">:</span><span class="string">"#173177"</span></span><br><span class="line">             <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">"keyword3"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                 <span class="attr">"value"</span><span class="punctuation">:</span><span class="string">"2014年9月22日"</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">"color"</span><span class="punctuation">:</span><span class="string">"#173177"</span></span><br><span class="line">             <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">"remark"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">                 <span class="attr">"value"</span><span class="punctuation">:</span><span class="string">"欢迎再次购买！"</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">"color"</span><span class="punctuation">:</span><span class="string">"#173177"</span></span><br><span class="line">             <span class="punctuation">}</span></span><br><span class="line">     <span class="punctuation">}</span></span><br><span class="line"> <span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 推送消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_message</span>(<span class="params">access_token, title, text</span>):</span><br><span class="line">    url = <span class="string">f"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=<span class="subst">{access_token}</span>"</span></span><br><span class="line">    parameter = {<span class="string">"touser"</span>: to_user, <span class="string">"template_id"</span>: template_id,</span><br><span class="line">                 <span class="string">"data"</span>: {<span class="string">"title"</span>: {<span class="string">"value"</span>: title}, <span class="string">"content"</span>: {<span class="string">"value"</span>: text}}}</span><br><span class="line">    json_parameter = json.dumps(parameter)</span><br><span class="line">    result = requests.post(url, data=json_parameter)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br></pre></td></tr></tbody></table></figure>

<p>这里我们拿着上面请求回来的 token 和我们需要发送的标题和正文，我们便可以发送消息了</p>
<p><img src="/./assets/7E6E2F128651A0174EE16432AAC03D2E.png" alt="7E6E2F128651A0174EE16432AAC03D2E"></p>
<p><img src="/./assets/7E9088695FD3D8031F0C1C73B7A300D5.png" alt="7E9088695FD3D8031F0C1C73B7A300D5"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里填写你的APPID</span></span><br><span class="line">app_id = <span class="string">"APPID"</span></span><br><span class="line"><span class="comment"># 这里填写你的APP_SECRET</span></span><br><span class="line">app_secret = <span class="string">"APP_SECRET"</span></span><br><span class="line"><span class="comment"># 用户ID</span></span><br><span class="line">to_user = <span class="string">"用户ID"</span></span><br><span class="line"><span class="comment"># 模板ID</span></span><br><span class="line">template_id = <span class="string">"模板ID"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取推送token</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    result = requests.get(</span><br><span class="line">        <span class="string">f"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="subst">{app_id}</span>&amp;secret=<span class="subst">{app_secret}</span>"</span>)</span><br><span class="line">    access_token = json.loads(result.text)</span><br><span class="line">    <span class="keyword">return</span> access_token[<span class="string">"access_token"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送消息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_message</span>(<span class="params">access_token, title, text</span>):</span><br><span class="line">    url = <span class="string">f"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=<span class="subst">{access_token}</span>"</span></span><br><span class="line">    parameter = {<span class="string">"touser"</span>: to_user, <span class="string">"template_id"</span>: template_id,</span><br><span class="line">                 <span class="string">"data"</span>: {<span class="string">"title"</span>: {<span class="string">"value"</span>: title}, <span class="string">"content"</span>: {<span class="string">"value"</span>: text}}}</span><br><span class="line">    json_parameter = json.dumps(parameter)</span><br><span class="line">    result = requests.post(url, data=json_parameter)</span><br><span class="line">    <span class="built_in">print</span>(result.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    token = get_token()</span><br><span class="line">    post_message(token, <span class="string">"Python代码推送标题"</span>, <span class="string">"Python代码推送正文"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>微信推送</tag>
        <tag>推送</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程笔记</title>
    <url>/9e369f195d62/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><hr>
<h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><h3 id="计算机网络："><a href="#计算机网络：" class="headerlink" title="计算机网络："></a>计算机网络：</h3><p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<span id="more"></span>

<h3 id="网络编程的目的："><a href="#网络编程的目的：" class="headerlink" title="网络编程的目的："></a>网络编程的目的：</h3><p>无线电台、传播交流信息、数据交换、通信</p>
<h3 id="想打到这个效果需要什么："><a href="#想打到这个效果需要什么：" class="headerlink" title="想打到这个效果需要什么："></a>想打到这个效果需要什么：</h3><p>1、如何准确的定位网络上的一台主机？</p>
<p>IP: 端口</p>
<p>2、找到了主机如何传输？</p>
<p>javaweb：网页编程 B/S 架构</p>
<p>网络编程：TCP/IP 	C/S 架构</p>
<hr>
<h2 id="1-2、网络通信的要素"><a href="#1-2、网络通信的要素" class="headerlink" title="1.2、网络通信的要素"></a>1.2、网络通信的要素</h2><h3 id="网络编程摘有两个主要的问题"><a href="#网络编程摘有两个主要的问题" class="headerlink" title="网络编程摘有两个主要的问题"></a>网络编程摘有两个主要的问题</h3><ul>
<li><p>如何准确的定位网络上的一台或者多台主机</p>
</li>
<li><p>找到主机后如何通信</p>
</li>
</ul>
<h3 id="网络编程中的要素"><a href="#网络编程中的要素" class="headerlink" title="网络编程中的要素"></a>网络编程中的要素</h3><ul>
<li>IP 和端口</li>
<li>网络通信协议 udp、tcp</li>
</ul>
<h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><hr>
<h2 id="1-3、IP"><a href="#1-3、IP" class="headerlink" title="1.3、IP"></a>1.3、IP</h2><p>IP 地址： InetAddress</p>
<p>java.net.InetAddress 包</p>
<ul>
<li><p>唯一定位一台网络上的计算机</p>
</li>
<li><p>IP 地址的分类</p>
<ul>
<li>[IPv4](<a href="https://baike.baidu.com/item/IPv4/422599">IPv4_百度百科 (baidu.com)</a>)</li>
<li>[IPV6](<a href="https://baike.baidu.com/item/IPv6">IPv6_百度百科 (baidu.com)</a>)</li>
</ul>
</li>
<li><p> 公网和局域网</p>
<ul>
<li>ABCD 类地址</li>
<li> 192.168.*.* 局域网</li>
</ul>
</li>
<li><p>域名：记忆 IP 问题</p>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试IP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException {</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddressLocalhostByName</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">            System.out.println(inetAddressLocalhostByName);</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddressLocalhost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddressLocalhost);</span><br><span class="line">            <span class="comment">//查询百度地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">"baidu.com"</span>);</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line">            <span class="comment">//常用方法</span></span><br><span class="line">            System.out.println(inetAddress2.getHostAddress());<span class="comment">//IP</span></span><br><span class="line">            System.out.println(inetAddress2.getHostName());<span class="comment">//域名</span></span><br><span class="line">        }<span class="keyword">catch</span> (UnknownHostException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/127.0.0.1</span><br><span class="line">localhost/127.0.0.1</span><br><span class="line">Haibara/192.168.64.1</span><br><span class="line">baidu.com/220.181.38.251</span><br><span class="line">220.181.38.251</span><br><span class="line">baidu.com</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="1-4、端口"><a href="#1-4、端口" class="headerlink" title="1.4、端口"></a>1.4、端口</h2><ul>
<li>范围：0-65535</li>
<li>TCP、UDP：单协议下端口不可冲突</li>
<li>端口分类<ul>
<li>公有端口：0-1023</li>
<li> 程序注册端口：1024-49151</li>
<li> 动态、私有：49152-65535</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">netstat -ano #查看所有的端口</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetSocketAddress</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">inetSocketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">"192.168.123.1"</span>, Integer.parseInt(<span class="string">"80"</span>));</span><br><span class="line">        System.out.println(inetSocketAddress.getAddress());</span><br><span class="line">        System.out.println(inetSocketAddress.getHostName());</span><br><span class="line">        System.out.println(inetSocketAddress.getPort());</span><br><span class="line">        System.out.println(inetSocketAddress.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/192.168.123.1</span><br><span class="line">MI-3.lan</span><br><span class="line">80</span><br><span class="line">MI-3.lan/192.168.123.1:80</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="1-5通信协议"><a href="#1-5通信协议" class="headerlink" title="1.5通信协议"></a>1.5 通信协议</h2><p>简单来说就是约定好说什么话</p>
<h3 id="TCP-x2F-IP-协议"><a href="#TCP-x2F-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h3><p>TCP：相当于打电话</p>
<p>UDP：相当于发短信</p>
<hr>
<h2 id="1-6、TCP"><a href="#1-6、TCP" class="headerlink" title="1.6、TCP"></a>1.6、TCP</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1、连接服务器 Socket</p>
<p>2、发送消息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServerDemo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//创建一个地址</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">12233</span>);</span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//读取客户端信息</span></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len=inputStream.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">                byteArrayOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(byteArrayOutputStream.toString());</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (byteArrayOutputStream != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    byteArrayOutputStream.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>1、建立服务的端口 ServerSocket</p>
<p>2、等待用户的链接 Accept</p>
<p>3、接受用的消息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClientDemo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//得到一个地址</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">12233</span>;</span><br><span class="line">            <span class="comment">//连接地址</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">"Hello World"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        } <span class="keyword">catch</span> (UnknownHostException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }<span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span>(outputStream != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="1-7、文件上传"><a href="#1-7、文件上传" class="headerlink" title="1.7、文件上传"></a>1.7、文件上传</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpServerDemo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//创建服务</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">12233</span>);</span><br><span class="line">        <span class="comment">//监听客户端连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//文件输出</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"new_car.jpeg"</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//通知客户接受完成</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"finish"</span>.getBytes());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpClientDemo02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">//创建socket连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">12233</span>);</span><br><span class="line">        <span class="comment">//创建一个输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"car.jpeg"</span>));</span><br><span class="line">        <span class="comment">//写出文件</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//通知服务器发送结束</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//确定服务器接受完成才断开</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2=is.read(buffer2))!=-<span class="number">1</span>){</span><br><span class="line">            baos.write(buffer2,<span class="number">0</span>,len2);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        baos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里的流程就是先创建一个服务，就下了对服务进行监听，等待客户端的回应</p>
<p>客户端就连接到服务端，在创建一个输出流已向服务端发送流，在流创建好后开始读取文件，将文件转成文件输出流，接着就通知服务器发送结束了</p>
<p>服务器监听到客户端发送来的流开始读取流，客户端发送到输出流到了服务端就是输入流，将输入流写入到文件流，这就完成了文件的保存，在接收完成后通知客户端我已接收完成</p>
<p>在得到服务端回应已经接收完毕后双方开始断开连接</p>
<hr>
<h2 id="1-8、Tomcat"><a href="#1-8、Tomcat" class="headerlink" title="1.8、Tomcat"></a>1.8、Tomcat</h2><h3 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK 配置</h3><p>在 Tomcat 配置前需要把 Jdk 配置好，此处是 centos7 环境下的配置方法</p>
<p>其实 jdk 的配置有比较简单的方法，那就是使用 yum 命令安装</p>
<p>在 [Oracle 官网](<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Java Archive Downloads - Java SE 8 (oracle.com)</a>) 或者第三方网站上下载好 Jdk 的 RPM 包，再把 RPM 包传到 Linux 服务器上，或者直接在服务器上下载也可以</p>
<p>在下载好 jdk 的安装包后使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yum -y localinstall jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></tbody></table></figure>

<p>查询 jdk 是否安装完成</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></tbody></table></figure>

<p>在命令行有显示 jdk 版本即可</p>
<h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat 配置</h3><p>接下来是配置 Tomcat 的环节</p>
<p>首先需要将 Tomcat 的文件放到服务器上，将文件解压出来（基础命令不做展示了）</p>
<p>接下来便是防火墙的设置</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent </span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 防火墙放行8080端口，重启防火墙，重新加载防火墙规则</span><br></pre></td></tr></tbody></table></figure>

<p>设置 Tomcat 为服务</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/tomcat9.service</span><br></pre></td></tr></tbody></table></figure>

<p>在文件中写入内容</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Tomcat8</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=/usr/tomcat/bin/startup.sh</span><br><span class="line">ExecStop=/usr/tomcat/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p>服务已经写好，开启服务并启动 Tomcat</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl enable tomcat9</span><br><span class="line">systemctl start tomcat9</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/22BA35A538AAAE290FDD799445D717F0.png" alt="22BA35A538AAAE290FDD799445D717F0"></p>
<p>通过 IP 即可访问到 Tomcat 的默认页面</p>
<hr>
<h2 id="1-10、UDP循环发送和循环接收"><a href="#1-10、UDP循环发送和循环接收" class="headerlink" title="1.10、UDP循环发送和循环接收"></a>1.10、UDP 循环发送和循环接收</h2><h3 id="发送方——sender"><a href="#发送方——sender" class="headerlink" title="发送方——sender"></a>发送方 ——sender</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: UdpSender</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Udp聊天发送方（角色1）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpSender</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//准备数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">"Bye"</span>)){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">byte</span>[] bytes = data.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,<span class="number">0</span>,bytes.length,<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">"localhost"</span>,<span class="number">6666</span>));</span><br><span class="line">            socket.send(packet);</span><br><span class="line">        }</span><br><span class="line">        socket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="接收方——receiver"><a href="#接收方——receiver" class="headerlink" title="接收方——receiver"></a>接收方 ——receiver</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: UdpReceive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Udp聊天接收方（角色2）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpReceive</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data,<span class="number">0</span>,data.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="comment">//判断断开连接</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = packet.getData();</span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line">            <span class="keyword">if</span>(receiveData.equals(<span class="string">"Bye"</span>)){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        socket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这主要是把发送消息和接收消息做好，接下来就会做互相发送消息的部分</p>
<hr>
<h2 id="1-11、多线程实现在线聊天"><a href="#1-11、多线程实现在线聊天" class="headerlink" title="1.11、多线程实现在线聊天"></a>1.11、多线程实现在线聊天</h2><h3 id="发送类"><a href="#发送类" class="headerlink" title="发送类"></a>发送类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: study</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: TalkSend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 负责发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkSend</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkSend</span><span class="params">(<span class="type">int</span> fromPort, String toIP, <span class="type">int</span> toPort)</span> {</span><br><span class="line">        <span class="built_in">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(fromPort);</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//准备数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">                <span class="type">byte</span>[] bytes = data.getBytes();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,<span class="number">0</span>,bytes.length,<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP,<span class="built_in">this</span>.toPort));</span><br><span class="line">                socket.send(packet);</span><br><span class="line">                <span class="keyword">if</span>(data.equals(<span class="string">"Bye"</span>)){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        socket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="接收类"><a href="#接收类" class="headerlink" title="接收类"></a>接收类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: study</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: TalkReceive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 负责接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkReceive</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String fromMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TalkReceive</span><span class="params">(<span class="type">int</span> port, String fromMsg)</span>{</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        <span class="built_in">this</span>.fromMsg = fromMsg;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">        } <span class="keyword">catch</span> (SocketException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data,<span class="number">0</span>,data.length);</span><br><span class="line">                    socket.receive(packet);</span><br><span class="line">                    <span class="comment">//判断断开连接</span></span><br><span class="line">                    <span class="type">byte</span>[] bytes = packet.getData();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">receiveData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">                    System.out.println(fromMsg+<span class="string">":"</span>+receiveData);</span><br><span class="line">                    <span class="keyword">if</span>(receiveData.equals(<span class="string">"Bye"</span>)){</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        socket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: study</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: TalkStudent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 白嫖怪和Up主的互动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkStudent</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">7777</span>,<span class="string">"localhost"</span>,<span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">8888</span>,<span class="string">"白嫖怪"</span>)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.chat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: study</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.chat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: TalkTeacher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 白嫖怪和Up主的互动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkTeacher</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkSend</span>(<span class="number">5555</span>,<span class="string">"localhost"</span>,<span class="number">8888</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TalkReceive</span>(<span class="number">9999</span>,<span class="string">"UP主"</span>)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/26890DC655E21EC1D241A2AFE697896D.png" alt="26890DC655E21EC1D241A2AFE697896D"></p>
<p><img src="/./assets/FC48C1C0951408B970E6AE73C4E6AB34.png" alt="FC48C1C0951408B970E6AE73C4E6AB34"></p>
<hr>
<h2 id="1-12、URL"><a href="#1-12、URL" class="headerlink" title="1.12、URL"></a>1.12、URL</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haibara.lesson04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span>: study</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.haibara.lesson04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: UrlDownload</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Haibara</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 访问互联网上的资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlDownload</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">        <span class="comment">//设置地址</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">"https://m10.music.126.net/20211020154612/6e9398a4e832aeb692fd5a6a38d66c2a/ymusic/025c/0652/025c/56b3c6564118d2dbed38565d97627fd7.mp3"</span>);</span><br><span class="line">        <span class="comment">//访问</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"从别后.mp3"</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=inputStream.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        <span class="comment">//断开连接</span></span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>访问互联网的内容保存到本地</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Net</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】Jetbrains 系列软件的破解补丁</title>
    <url>/23ec1e546bbd/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Jetbrains 系列的的软件是真的好用，但是也是真的贵，对于一个学生党来说确实是支持不起这个费用啊。当然，官方也有基础的免费版本，可是专业版的对于学习来说太方便了，所以上个 “学习版” 是有必要的。当然，有财力的还是建议支持正版，毕竟只有收费才可以让开发的公司有动力持续地更新产品，我们才能用到更好的产品。废话不多说，妹子图开局。</p>
<span id="more"></span>

<p><img src="/./assets/0BB1BBABDDB1C8C667F37DC594ED546C.png" alt="0BB1BBABDDB1C8C667F37DC594ED546C"></p>
<h3 id="IDE-Eval-Reset插件（已停更）"><a href="#IDE-Eval-Reset插件（已停更）" class="headerlink" title="IDE Eval Reset插件（已停更）"></a><code>IDE Eval Reset</code> 插件（已停更）</h3><p>这是一款用起来比较简单的插件，可以通过重置 30 天试用来实现破解，但这个只可以在 2021.3 之前的版本可用，但比较稳定，相对于一些用老版本或者激活码我更倾向于使用这个插件。</p>
<h3 id="如何下载2021-3之前的版本？"><a href="#如何下载2021-3之前的版本？" class="headerlink" title="如何下载2021.3之前的版本？"></a>如何下载 2021.3 之前的版本？</h3><p>此处我已 PyCharm 为例，我们访问官方的下载页面，选择其他版本，就可以挑选老版本了</p>
<p><img src="/./assets/25ECA199BF1CA2BB90AEF4776763BB63.png" alt="25ECA199BF1CA2BB90AEF4776763BB63"></p>
<p><img src="/./assets/1A0731BAD84132CFAF5E8EE6BE34F7F8.png" alt="1A0731BAD84132CFAF5E8EE6BE34F7F8"></p>
<p>当然，可能过段时间官方会下线这些版本，所以我就给我备份了 PyCharm 和 IDEA 以及 WebStorm 的 2021.2 的安装包，说不定什么时候需要到呢？大概率是用不上得啦。</p>
<p>软件链接：<a href="https://pan.baidu.com/s/1S7lrn9mQ5aXU-Hcpi_eaWg">https://pan.baidu.com/s/1S7lrn9mQ5aXU-Hcpi_eaWg</a> 提取码: qxja </p>
<p>补丁链接：<a href="https://pan.baidu.com/s/1UQpHQKAmcgeE-dO-xBummg">https://pan.baidu.com/s/1UQpHQKAmcgeE-dO-xBummg</a> 提取码: 6ngd </p>
<p>补丁链接：<a href="https://asuna773.lanzoul.com/ita1t0cjp80f">https://asuna773.lanzoul.com/ita1t0cjp80f</a></p>
<p>补丁作者的博客：<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html">Jetbrains 系列产品重置试用方法 | 知了 (zhile.io)</a></p>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>其实很简单，保证自己可以打开相关的软件，如果进入需要激活的情况建议使用下面说到的激活码激活一次后再进行安装插件。</p>
<p>如果是第一次安装，那就点击使用 30 天（2021.3 后需要登录，貌似这个插件也不支持后面的版本激活）即可进入软件。</p>
<p>在打开软件后随便创建一个项目，然后把补丁直接拖动到这里</p>
<p><img src="/./assets/15255434748BE4E530F6AB504CE07476.png" alt="15255434748BE4E530F6AB504CE07476"></p>
<p>点击 Help，然后选择这个</p>
<p><img src="/./assets/2ECF7A514C3D7A4161AEE87AED4EEDED.png" alt="2ECF7A514C3D7A4161AEE87AED4EEDED"></p>
<p>这般设置一下便可</p>
<p><img src="/./assets/559ABAA9880DB204DBA6499FCD599532.png" alt="559ABAA9880DB204DBA6499FCD599532"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>破解</tag>
        <tag>idea</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 的免费测试版本备份</title>
    <url>/1447fd963a25/</url>
    <content><![CDATA[<h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><h1 id="此版本已失效，有需求的可以在另一篇文章中找到学习版"><a href="#此版本已失效，有需求的可以在另一篇文章中找到学习版" class="headerlink" title="此版本已失效，有需求的可以在另一篇文章中找到学习版"></a>此版本已失效，有需求的可以在另一篇文章中找到学习版</h1><p>Typora，一个我个人一直在用的 Markdown 编辑器，它的界面简洁，没有过于复杂的操作界面，左边是分级文件查看和大纲查看，多个文档的切换和大纲展示对于写长篇文章很有帮助，这一点能给用户相当舒适的使用体验。其次是它功能完善，可以配合 PicGo+GitHub+jsdelivr 实现完美的上传图片体验，只需要简单的设置，便可以插图图片即上传到图床，这样做的好处是不管我写的笔记文章是放在博客也好，本地也罢，换另一台设备也行，都可以打开 Markdown 就能读取到云端的图片（没有网除外），节省了磁盘空间是次要，最重要的是可以让我们的文章可以跨设备阅读时不需要考虑图片的问题。而且 Typora 是所见即所得的编辑体验，不需要想 jupyter notebook 那样需要运行才可渲染，或者 vscode 那样分栏展示，毕竟 Typora 是专攻这方面的，所以在 Markdown 编写上比其他软件专业也是正常。</p>
<span id="more"></span>

<h3 id="收费"><a href="#收费" class="headerlink" title="收费"></a>收费</h3><p>其实 Markdown 编辑器不止 Typora 一个，但是我还是习惯了这个软件。最近 Typora 迎来了 1.0 正式版，正式版开始收费了</p>
<p><img src="/./assets/8B0BA5573A11ACE7B303EF93E777ECAD.png" alt="8B0BA5573A11ACE7B303EF93E777ECAD"></p>
<p>虽然 89 元的价格不算贵，但是嘛，据说正式版相对于之前的测试版并没有什么大的区别，由于之前的版本免费，所以我肯定选择免费啊，更何况……</p>
<p><img src="/./assets/92d8c4f45f2de41b75b1b4cc8b8aa4ec.jpg"></p>
<p>算了算了。还是白嫖算了，我的财力暂时无法支撑我入正啊</p>
<h3 id="备份链接"><a href="#备份链接" class="headerlink" title="备份链接"></a>备份链接</h3><p>官方并没有把之前的测试版下架，还是提供了下载链接的，不清楚接下来的版本是否还有免费的测试版本，所以现在还是把文件备份一下把，说不定某一天用得上呢</p>
<p><a href="https://www.kzwr.com/kzwrfs?fid=573eedf9ef1211mwao.exe">直接下载 —— 酷族网软</a></p>
<p><a href="https://pan.bilnn.cn/api/v3/file/sourcejump/vkAggysq/x9gzI8D5Y_ZElTwKljauaQAbUJhZownDqLbWe9RjmXI*">直接下载 —— 比邻云盘</a></p>
<p>百度云： <a href="https://pan.baidu.com/s/1Bud-659H4Xg3W2hFZ7TIRg">https://pan.baidu.com/s/1Bud-659H4Xg3W2hFZ7TIRg</a> 提取码: skx5 </p>
<p>坚果云：<a href="https://www.jianguoyun.com/p/DWsz9ocQ35ngCRjy8Z4E">https://www.jianguoyun.com/p/DWsz9ocQ35ngCRjy8Z4E</a></p>
<p>蓝奏云：<a href="https://asuna773.lanzouo.com/izr9nx86j0b">https://asuna773.lanzouo.com/izr9nx86j0b</a>			<a href="https://asuna773.lanzoui.com/izr9nx86j0b">https://asuna773.lanzoui.com/izr9nx86j0b</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>Windows</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title>AdGuard 的破解</title>
    <url>/da1ae99c95ab/</url>
    <content><![CDATA[<h2 id="什么是AdGuard？"><a href="#什么是AdGuard？" class="headerlink" title="什么是AdGuard？"></a>什么是 AdGuard？</h2><p>AdGuard 是一款强大的广告拦截工具，主打广告拦截、上网安全和隐私保护等功能，对于我们而已，最主要的就是它的广告拦截功能。AdGuard 有多个版本，支持多平台，分别为浏览器扩展版，桌面版，和移动版，桌面版支持 Windows 和 Mac 系统，移动版则是支持 Android 和 iOS。AdGuard 可以去除绝大部分的网页的烦人广告，给我们一个良好舒适的上网冲浪环境。</p>
<span id="more"></span>

<h2 id="使用AdGuard的前后对比"><a href="#使用AdGuard的前后对比" class="headerlink" title="使用AdGuard的前后对比"></a>使用 AdGuard 的前后对比</h2><h3 id="使用前"><a href="#使用前" class="headerlink" title="使用前"></a>使用前</h3><p><img src="/./assets/6C060C82AC0D2CEF2311C7BB5DB146DE.png" alt="6C060C82AC0D2CEF2311C7BB5DB146DE"></p>
<h3 id="使用后"><a href="#使用后" class="headerlink" title="使用后"></a>使用后</h3><p><img src="/./assets/5D55B65DD94A9428C3758933CFAF6D55.png" alt="5D55B65DD94A9428C3758933CFAF6D55"></p>
<p>可以通过使用的前后对比图发现，头部广告和页脚广告都被轻松的清理掉了（对不起了扩展迷！）</p>
<h2 id="浏览器扩展不是免费嘛？为什么要安装应用？"><a href="#浏览器扩展不是免费嘛？为什么要安装应用？" class="headerlink" title="浏览器扩展不是免费嘛？为什么要安装应用？"></a>浏览器扩展不是免费嘛？为什么要安装应用？</h2><p>萝卜青菜各有所爱，安装一个应用，其他的应用和浏览器都可以实现广告拦截，所以还是安装个应用更香啦</p>
<h2 id="怎么破解？"><a href="#怎么破解？" class="headerlink" title="怎么破解？"></a>怎么破解？</h2><p>首先，安装官方的应用，官方应用有试用期的，试用期可以享受全部的功能，到了试用期结束就需要付费了。</p>
<p><img src="/./assets/36E0C4113A2E76FC68BF54AA152A45DE.png" alt="36E0C4113A2E76FC68BF54AA152A45DE"></p>
<p>此时，我们可以看到试用期是到 4 月 1 日就到期了的，而我们可以通过时间大法来实现破解</p>
<p><img src="/./assets/FB42A5DDBCFCDEF4A3A11DACF2573CB4.png" alt="FB42A5DDBCFCDEF4A3A11DACF2573CB4"></p>
<p><img src="/./assets/80DA7A793B385DCB671C972E87C3DD82.png" alt="80DA7A793B385DCB671C972E87C3DD82"></p>
<p>此时再输入一个邮箱即可实现延期 180 天的操作，如果 180 天都试用过了，就需要使用本次的工具了</p>
<p><img src="/./assets/F4EA46CF22AAD9D65F6445482FB58883.png" alt="F4EA46CF22AAD9D65F6445482FB58883"></p>
<p>它可以让 AdGuard 恢复到最开始的状态，已实现在此试用 180 天的效果</p>
<p>链接：</p>
<p><a href="https://asuna773.lanzoul.com/iZsmG028ei9c">https://asuna773.lanzoul.com/iZsmG028ei9c</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java Web 之 Servlet</title>
    <url>/c124d9d44bc6/</url>
    <content><![CDATA[<h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是 Servlet</h3><ol>
<li><p>Servlet 是 JavaEE 规范之一。规范就是接口</p>
</li>
<li><p>Servlet 就是 Java Web 三大组件之一</p>
<p>三大组件：</p>
<ul>
<li>Servlet 程序</li>
<li> Fulter 过滤器</li>
<li> Listener 监听器</li>
</ul>
</li>
<li><p> Servlet 是运行在服务器上的一个 Java 小程序，可以接收客户端发送过来的请求，并且响应数据</p>
</li>
</ol>
<span id="more"></span>

<h4 id="第一个Servlet程序"><a href="#第一个Servlet程序" class="headerlink" title="第一个Servlet程序"></a>第一个 Servlet 程序</h4><p>1、因为 Servlet 是一个接口，所以首先需要编写一个类去实现 Servlet 接口</p>
<p>2、在类中实现 service 方法，处理请求并响应数据</p>
<p>3、到 web.xml 中配置 Servlet 程序的访问地址</p>
<p>新建一个类实现 Servlet 接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        System.out.println(<span class="string">"Hello Servlet"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在实现 Servlet 接口后，需要在 web.xml 中配置地址</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet标签给Tomcat配置Servlet程序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet -name标签Servlet程序起-一个别名(-般是类名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-class是Servlet程序的全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.haibara.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet -mapping标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给哪个Servlet 程序使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--urL-pattern标签配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>当项目运行起来时，在浏览器访问 <a href="http://localhost:8080/servlet/hello%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%88%B0HelloServlet%EF%BC%8C%E5%9C%A8%E5%90%8E%E5%8F%B0%E4%BE%BF%E4%BC%9A%E8%BE%93%E5%87%BA%E4%B8%80%E5%8F%A5%E2%80%9CHello">http://localhost:8080/servlet/hello 即可访问到 HelloServlet，在后台便会输出一句 “Hello</a> Servlet”</p>
<h4 id="URL如何定位Servlet程序"><a href="#URL如何定位Servlet程序" class="headerlink" title="URL如何定位Servlet程序"></a>URL 如何定位 Servlet 程序</h4><p>以这个 URL 为例 <a href="http://localhost:8080/servlet/hello">http://localhost:8080/servlet/hello</a></p>
<ol>
<li> 通过 IP 定位服务器 ———————-&gt; 通过 localhost 定位本机</li>
<li>通过端口定位软件 ———————-&gt; 通过 8080 端口定位 Tomcat</li>
<li> 定位工程路径 —————————-&gt; 通过 /servlet 定位工程</li>
<li>定位资源 ———————————–&gt; 通过 /hello 定位资源</li>
<li>通过 ServletName 定位类 ————-&gt;/hello 对应的是 HelloServlet 类</li>
<li>在 HelloServlet 中执行 service 方法</li>
</ol>
<h4 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet 生命周期</h4><ol>
<li>执行 Servlet 构造器方法</li>
<li>执行 init 初始化方法</li>
<li>执行 service 方法</li>
<li>执行 destroy 销毁方法 </li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloServlet</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"1、构造器方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException {</span><br><span class="line">        System.out.println(<span class="string">"2、init初始化方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        System.out.println(<span class="string">"3、service方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"4、销毁方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1、构造器方法</span><br><span class="line">2、init初始化方法</span><br><span class="line">3、service方法</span><br><span class="line">信息 [Catalina-utility-1] org.apache.catalina.startup.HostConfig.deployDirectory 把web 应用程序部署到目录 </span><br><span class="line">信息 [Catalina-utility-1] org.apache.catalina.startup.HostConfig.deployDirectory Web应用程序目录</span><br><span class="line">3、service方法</span><br><span class="line">3、service方法</span><br><span class="line">3、service方法</span><br><span class="line">信息 [main] org.apache.catalina.core.StandardServer.await 通过关闭端口接收到有效的关闭命令。正在停止服务器实例。</span><br><span class="line">信息 [main] org.apache.coyote.AbstractProtocol.pause 暂停ProtocolHandler["http-nio-8080"]</span><br><span class="line">信息 [main] org.apache.catalina.core.StandardService.stopInternal 正在停止服务[Catalina]</span><br><span class="line">4、销毁方法</span><br></pre></td></tr></tbody></table></figure>

<p>不难看出，首先是执行了 Servlet 的构造器方法，第二是执行 init 初始化方法，在此之后，访问 /hello 是执行了 service 方法，在创建好之后，多少次访问 hello 都无需在此调用构造器方法和初始化方法，都是调用的 service 方法，在关闭服务器时，会调用 destroy 方法进行销毁。</p>
<h4 id="Servlet的请求的分发处理"><a href="#Servlet的请求的分发处理" class="headerlink" title="Servlet的请求的分发处理"></a>Servlet 的请求的分发处理</h4><p>众所周知，请求分为通常有 GET/POST 两种形式（常用的），那么对于 GET 请求和 POST 请求后端需要进行区分，对不同的请求方式做不同的处理，那么 Servlet 如何实现的呢？</p>
<p>在 service 方法中，有一个 ServletRequest 类型的参数，可以通过它的子类去获取到请求的方式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    <span class="comment">//        通过ServletRequest的子类获取请求方式</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"GET"</span>.equals(method)){</span><br><span class="line">        doGet();</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"POST"</span>.equals(method)){</span><br><span class="line">        doPost();</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        System.out.println(<span class="string">"反正不是GET请求和POST请求"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="继承HttpServlet类实现Servlet程序"><a href="#继承HttpServlet类实现Servlet程序" class="headerlink" title="继承HttpServlet类实现Servlet程序"></a>继承 HttpServlet 类实现 Servlet 程序</h4><p>在实际应用中，只需要创建一个类并实现其中的 doGet 或 doPost 方法即可实现一个 Servlet 程序，可以在源码中看到，在 HttpServlet 类中的 service 方法已经做好了请求分发的工作。</p>
<p><img src="/./assets/3585CC8186B0F0066CC424039E526D48.png" alt="3585CC8186B0F0066CC424039E526D48"></p>
<p>实现的过程分为三步：</p>
<p>1、继承 HttpServlet 类</p>
<p>2、重写 doGet/doPost 方法</p>
<p>3、在 web.xml 中配置 Servlet 程序访问地址</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        System.out.println(<span class="string">"doGet被调用"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        System.out.println(<span class="string">"doPost被调用"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Servlet整个类的继承体系"><a href="#Servlet整个类的继承体系" class="headerlink" title="Servlet整个类的继承体系"></a>Servlet 整个类的继承体系</h4><p><img src="/./assets/E346050D0CB0056A75B53E849B1B5A34.png" alt="E346050D0CB0056A75B53E849B1B5A34"></p>
<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>ServletConfig 的三个主要作用</p>
<p>1、获取 Servlet 程序别名</p>
<p>2、获取初始化参数</p>
<p>3、获取 ServletContext 对象</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    <span class="comment">//        获取Servlet程序别名</span></span><br><span class="line">    System.out.println(getServletConfig().getServletName());</span><br><span class="line">    <span class="comment">//        获取初始化参数</span></span><br><span class="line">    System.out.println(getServletConfig().getInitParameter(<span class="string">"username"</span>));</span><br><span class="line">    <span class="comment">//        获取ServletContext对象</span></span><br><span class="line">    System.out.println(getServletConfig().getServletContext());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><h4 id="什么是ServletContext"><a href="#什么是ServletContext" class="headerlink" title="什么是ServletContext"></a>什么是 ServletContext</h4><p>1、ServletContext 是一 - 个接口， 它表示 Servlet 上下文对象</p>
<p>2、一个 web 工程，只有一个 ServletContext 对象实例。</p>
<p>3、ServletContext 对象是一个域对象。范围是整个工程</p>
<h4 id="ServletContext的作用"><a href="#ServletContext的作用" class="headerlink" title="ServletContext的作用"></a>ServletContext 的作用</h4><p>1、获取 web.xml 中配置的上下文参数上下文 - param<br>2、获取当前的工程路径，格式:/ 工程路径<br>3、获取工程部署后在服务器硬盘上的绝对路径<br>4、像 Map- - 样存取数据</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    <span class="comment">//        1、获取web.xml中配置的上下文参数上下文-param</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">jdbc</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">"jdbc"</span>);</span><br><span class="line">    System.out.println(jdbc);</span><br><span class="line">    <span class="comment">//        2、获取当前的工程路径，格式:/工程路径</span></span><br><span class="line">    System.out.println(servletContext.getContextPath());</span><br><span class="line">    <span class="comment">//        3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">    System.out.println(servletContext.getRealPath(<span class="string">"/"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/databases</span><br><span class="line">/servlet</span><br><span class="line">C:\AppHome\apache-tomcat-9.0.64\webapps\servlet\</span><br></pre></td></tr></tbody></table></figure>

<h4 id="操作域"><a href="#操作域" class="headerlink" title="操作域"></a>操作域</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    System.out.println(<span class="string">"操作context域之前"</span>+servletContext.getAttribute(<span class="string">"key"</span>));</span><br><span class="line">    servletContext.setAttribute(<span class="string">"key"</span>,<span class="string">"www.baidu.com"</span>);</span><br><span class="line">    System.out.println(<span class="string">"操作后的"</span>+servletContext.getAttribute(<span class="string">"key"</span>));</span><br><span class="line">    servletContext.removeAttribute(<span class="string">"key"</span>);</span><br><span class="line">    System.out.println(<span class="string">"移除之后的"</span>+servletContext.getAttribute(<span class="string">"key"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">操作context域之前null</span><br><span class="line">操作后的www.baidu.com</span><br><span class="line">移除之后的null</span><br></pre></td></tr></tbody></table></figure>

<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><h4 id="HTTPServletRequest的作用"><a href="#HTTPServletRequest的作用" class="headerlink" title="HTTPServletRequest的作用"></a>HTTPServletRequest 的作用</h4><p>Tomcat 在接收到 HTTP 请求后会将信息解析到 Request 对象中，并且传递到 service 方法中做分发处理，所以可以通过 HttpServletRequest 获取到请求的信息。</p>
<h4 id="HTTPServletRequest的常用方法"><a href="#HTTPServletRequest的常用方法" class="headerlink" title="HTTPServletRequest的常用方法"></a>HTTPServletRequest 的常用方法</h4><ul>
<li>getRequestURI () 	获取请求的资源路径 </li>
<li>getRequestURL () 获取请求的统一资源定位符（绝对路径）</li>
<li>getRemoteHost () 获取客户端的 ip 地址</li>
<li> getHeader () 获取请求头</li>
<li> getParameter () 获取请求的参数</li>
<li> getParameterValues () 获取请求的参数（多个值的时候使用）</li>
<li>getMethod () 获取请求的方式 GET 或 POST </li>
<li>setAttribute (key, value); 设置域数据</li>
<li> getAttribute (key); 获取域数据 </li>
<li>getRequestDispatcher () 获取请求转发对象 </li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">    <span class="comment">// 解决中文乱码</span></span><br><span class="line">    request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    System.out.println(request.getRequestURI());</span><br><span class="line">    System.out.println(request.getRequestURL());</span><br><span class="line">    System.out.println(request.getRemoteHost());</span><br><span class="line">    System.out.println(request.getHeader(<span class="string">"User-Agent"</span>));</span><br><span class="line">    System.out.println(request.getMethod());</span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"username"</span>));</span><br><span class="line">    System.out.println(Arrays.toString(request.getParameterValues(<span class="string">"hobby"</span>)));</span><br><span class="line">    System.out.println(<span class="string">"域设置前"</span>+request.getAttribute(<span class="string">"key"</span>));</span><br><span class="line">    request.setAttribute(<span class="string">"key"</span>,<span class="string">"这是在设置域"</span>);</span><br><span class="line">    System.out.println(<span class="string">"域设置后"</span>+request.getAttribute(<span class="string">"key"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/servlet/RequestTest</span><br><span class="line">http://localhost:8080/servlet/RequestTest</span><br><span class="line">0:0:0:0:0:0:0:1</span><br><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</span><br><span class="line">POST</span><br><span class="line">我是用户名</span><br><span class="line">[cpp, java, python, js, c]</span><br><span class="line">域设置前null</span><br><span class="line">域设置后这是在设置域</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java 多线程的实现方式 —— 持续更新中</title>
    <url>/0a000c9557e8/</url>
    <content><![CDATA[<h1 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承 Thread 类</h1><p>基础 Thread 类的方法需要从四部去执行</p>
<ol>
<li>基础 Thread 类</li>
<li>重写 Thread 类的 run 方法</li>
<li>创建 Thread 类的子类对象</li>
<li>通过子类对象执行 start 方法 </li>
</ol>
<span id="more"></span>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLearn_Ex_Thread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"我多线程看书的第"</span>+i+<span class="string">"分钟"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ThreadLearn_Ex_Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLearn_Ex_Thread</span>();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"我主线程打游戏的第"</span>+i+<span class="string">"分钟"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread的常用方法</span></span><br><span class="line"><span class="comment"> * start()执行当前线程</span></span><br><span class="line"><span class="comment"> * run()重新Thread的run方法，在此方法中写需要线程执行的内容</span></span><br><span class="line"><span class="comment"> * currentThread()，静态方法，返回当前线程</span></span><br><span class="line"><span class="comment"> * getName()获取线程名称</span></span><br><span class="line"><span class="comment"> * setName()设置线程名称</span></span><br><span class="line"><span class="comment"> * yield释放当前CPU执行权</span></span><br><span class="line"><span class="comment"> * join()线程进入阻塞状态，需要等其他线程执行完才继续执行</span></span><br><span class="line"><span class="comment"> * sleep()线程休眠，单位毫秒</span></span><br><span class="line"><span class="comment"> * isAlive()判断线程是否存活</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethodTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                sleep(<span class="number">50</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+currentThread().getName()+<span class="string">"第"</span>+i+<span class="string">"次调用"</span>);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">80</span>){</span><br><span class="line">                Thread.<span class="keyword">yield</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ThreadMethodTest</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadMethodTest</span>();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="type">ThreadMethodTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadMethodTest</span>();</span><br><span class="line">        test.start();</span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        System.out.println(test.isAlive());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+currentThread().getName()+<span class="string">"第"</span>+i+<span class="string">"次调用"</span>);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">50</span>){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    thread.join();</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(test.isAlive());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Thread 的常用方法</li>
<li> start () 执行当前线程</li>
<li> run () 重新 Thread 的 run 方法，在此方法中写需要线程执行的内容</li>
<li> currentThread ()，静态方法，返回当前线程</li>
<li> getName () 获取线程名称</li>
<li> setName () 设置线程名称</li>
<li> yield 释放当前 CPU 执行权</li>
<li> join () 线程进入阻塞状态，需要等其他线程执行完才继续执行</li>
<li> sleep () 线程休眠，单位毫秒</li>
<li> isAlive () 判断线程是否存活</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>不能在主线程调用 run 方法启动，必须调用 start 方法，否则无法实现多线程</li>
<li>不能在已 start 的线程再次 start</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【已和谐】QDM—— 一款强大的音乐下载软件</title>
    <url>/9767c6330c86/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>QMD 是一款简洁、实用的<strong>音乐下载</strong> APP。</p>
<p>支持系统版本：Android 5.0 及以上</p>
<span id="more"></span>

<h2 id="此软件已停止服务"><a href="#此软件已停止服务" class="headerlink" title="此软件已停止服务"></a>此软件已停止服务</h2><p>其实这件事是一个微博大 V 在微博把一些上不得台面的听歌方式搞上了热搜，接连下来很多相关的听歌下歌方式被顶了上去，包括此款软件。其实这也能理解吧，毕竟这些事不占法理，所以为了作者的利益，停止服务或许是最好的选择。</p>
<img src="./assets/749608053C904F52E6F1E84AB1FFA8FC.jpg" alt="749608053C904F52E6F1E84AB1FFA8FC" style="zoom:50%;">

<img src="./assets/6FE263ECE2D16D30EFA3313D4DD1EB39.jpg" alt="6FE263ECE2D16D30EFA3313D4DD1EB39" style="zoom: 33%;">

<img src="./assets/B915C6D30C1E9A0D8D21270596B9A509.jpg" alt="B915C6D30C1E9A0D8D21270596B9A509" style="zoom: 33%;">

<p><img src="/./assets/639539CD6F4069C431EB76EB66B7F342.png" alt="639539CD6F4069C431EB76EB66B7F342"></p>
<h2 id="QMD停止服务通知"><a href="#QMD停止服务通知" class="headerlink" title="QMD停止服务通知"></a>QMD 停止服务通知</h2><p>众所周知，QMD 是一款违规应用，随着 QMD 的影响力逐渐扩大，开发者可能会面临一些危机。在危机到来之前，开发者决定无期限关停 QMD 的服务。</p>
<p>QMD 停止服务后，<strong>播放、下载歌曲以及获取歌单功能不可用；</strong>搜索、下载专辑图片和歌词功能仍然可用。</p>
<p>享乐乎将继续为大家提供优质的资源和文章，希望大家能捧个场。</p>
<p>最后，感谢大家陪伴。</p>
<p>JZen</p>
<p>2022.9.15</p>
<h2 id="QMD-1-7-2-更新内容："><a href="#QMD-1-7-2-更新内容：" class="headerlink" title="QMD 1.7.2 更新内容："></a>QMD 1.7.2 更新内容：</h2><p><strong>1. 修复搜索空白</strong></p>
<p>昨天 QMD 出现了搜索空白的问题，但昨天我家里刚好停电，没有及时修复。</p>
<p>QMD 已经很久没有更新了，出于个人原因，这阵子没时间写代码，这次修复也只是遵守我对 QMD 维护的底线 —— 能用就行。</p>
<h2 id="QMD-1-7-1-更新内容："><a href="#QMD-1-7-1-更新内容：" class="headerlink" title="QMD 1.7.1 更新内容："></a>QMD 1.7.1 更新内容：</h2><p><strong>1. 修复部分闪退和已知问题</strong></p>
<p>数都数不清，修也修不完。</p>
<p><strong>2. 重构歌单数据库</strong></p>
<p>所有歌单会被清空，但其他数据不影响。最近已经把所有数据库都重构了一遍，以后不会再出现收藏歌曲或者歌单被清空的情况了。</p>
<p><strong>3. 添加歌曲页面为空时的缺省页</strong></p>
<img src="./assets/65C242BA28E61D0357B92C2FBCCD2D8B.png" alt="65C242BA28E61D0357B92C2FBCCD2D8B" style="zoom:50%;">



<p><strong>4. 修复收藏页面多选取消收藏的卡顿 bug</strong></p>
<p><strong>！！！特别事项！！！</strong></p>
<p>此版为重构版，数据无法与旧版 QMD（1.6.0 及以前的版本）兼容，如果你之前已经安装过 QMD，安装完这个版本之后你的手机会出现两个 QMD。</p>
<hr>
<p><strong>其他事项：</strong></p>
<ol>
<li><p>网络问题可能会导致资源获取失败。</p>
</li>
<li><p>播放不了可以尝试切换网络，或者降低试听音质。</p>
</li>
<li><p>QQ 音乐无版权的歌和数字专辑无法下载和试听！</p>
</li>
<li><p>1.5.4 及以下的版本由于服务器到期已经全部失效，不再维护。</p>
</li>
</ol>
<p>\5. 下载链接在后面。</p>
<p>\7. 也许根本不会有人看这段话。</p>
<ol start="6">
<li>也不会有多少人仔细看更新内容。</li>
</ol>
<p>\8. 更不会有人注意序号错了。</p>
<ol start="9">
<li>竟然被你发现了 Σ(っ °Д °;) っ</li>
</ol>
<p><strong>QMD 常见问题</strong></p>
<p><strong>1. 找不到音乐文件。</strong><br>音乐文件默认在手机目录下 Music 文件夹。可以直接用音乐 app 扫描。在 QMD 已下载页面长按歌曲，点击歌曲信息也能查看歌曲位置。</p>
<p><strong>2. 添加歌单里面提示 QQ 没有音乐。</strong><br>打开 QQ 音乐 APP，打开个人主页设置，在访问设置里面确保个人主页和歌单的访问权限已开启。</p>
<p>如果你添加的是歌单码，请确保”qmd:/“这串文字也要添加进去。</p>
<p><strong>3. 获取资源失败。</strong><br>获取资源失败请尝试下载安装最新版。数字专辑（付费歌曲）以及 QQ 音乐无版权的歌无法下载和试听！<br>一般的歌曲不能下载，那就是接口失效了，耐心等待修复。</p>
<p><strong>4. 如何导入网易云或者其他音乐平台的歌单。</strong><br>在 QQ 音乐里面有导入外部歌单功能，可以将其他音乐平台的歌单转换到 QQ 音乐，再从 QMD 导入歌单。</p>
<p><strong>5. 提示内部错误。</strong><br>打开设置页面，重置下载器。或者请尝试卸载重装或者清除数据。</p>
<p><strong>6. 字体空白。</strong></p>
<p>通常 MIUI 上使用第三方主题会出现这个问题，换个手机主题就能解决。</p>
<p><strong>7. QMD 有没有 IOS 或者 PC 版？</strong></p>
<p><strong>不会有 IOS 版。</strong>但 PC 版的话之前有过想法，但是暂时没有计划开发。</p>
<hr>
<p><strong>下载地址：</strong></p>
<p><a href="https://www.kzwr.com/kzwrfs?fid=5f1ed494dc52n5eum5.apk">直接下载</a>				<a href="**https://c.ddot.top/api/v3/file/get/15/QMD%201.7.1.apk?sign=kJuU0zF7zoiJAaPU8jboGKHU1f9yWz7PnCaAFWRK0aY=:0**">直接下载</a>				<a href="https://jzen.lanzoum.com/iAaNe018qw4h">蓝奏云</a>					<a href="https://pan.baidu.com/s/1z2xDSlQ9zn9DElXf34i54g">百度网盘 提取码: <strong>uqwj</strong></a>				<pangu> </pangu><a href="https://share.weiyun.com/ZFAqXo8T">微云</a>				<pangu> </pangu><a href="https://github.com/OJZen/QMD_Android/releases/download/1.7.1/QMD.1.7.1.apk">GitHub</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】int 数组的排序和倒叙以及 toString</title>
    <url>/0d8c457dc1f6/</url>
    <content><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>顺序排序使用的是冒泡排序来实现的，而倒叙排序则是在排序前通过顺序排序将数组的顺序排好，在此基础上对数组进行元素调换来实现倒叙。</p>
<span id="more"></span>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySort</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正序使用冒泡排序完成</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr){</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) {</span><br><span class="line">                <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]){</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒叙排序直接将元素交换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arr){</span><br><span class="line">        arr = sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>,e=arr.length-<span class="number">1</span>; s &lt; e; s++,e--){</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[s];</span><br><span class="line">            arr[s] = arr[e];</span><br><span class="line">            arr[e] = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] arr)</span>{</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        buffer.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) {</span><br><span class="line">            buffer.append(arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (i==iMax){</span><br><span class="line">                <span class="keyword">return</span> buffer.append(<span class="string">']'</span>).toString();</span><br><span class="line">            }</span><br><span class="line">            buffer.append(<span class="string">","</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC 学习笔记</title>
    <url>/d172d6957164/</url>
    <content><![CDATA[<p>JDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。</p>
<p>执行流程：</p>
<ul>
<li>连接数据源，如：数据库。</li>
<li>为数据库传递查询和更新指令。</li>
<li>处理数据库响应并返回的结果。</li>
</ul>
<span id="more"></span>

<h2 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC 快速入门</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//注册JDBC驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/mydb"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//创建数据库链接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into person (id,name,sex,age) value(1,'xiaoming',1,18)"</span>;</span><br><span class="line"><span class="comment">//获取SQL执行对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="comment">//执行SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure>

<p>在 MySQL5 后注册 JDBC 驱动可以省略</p>
<h2 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h2><p>DriverManagerd 的作用：</p>
<ol>
<li>注册驱动</li>
<li>获取数据库连接</li>
</ol>
<p>在 <code>jdbc:mysql://localhost:3306/mydb</code> 中，如果连接的数据库是本地数据库，端口为 3306 时，可以缩写为 <code>jdbc:mysql:///mydb</code></p>
<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>Connection (数据库连接对象) 作用：</p>
<ol>
<li>获取执行 SQL 的对象</li>
<li>管理事务</li>
</ol>
<h3 id="获取执行SQL的对象"><a href="#获取执行SQL的对象" class="headerlink" title="获取执行SQL的对象"></a>获取执行 SQL 的对象</h3><table>
<thead>
<tr>
<th>方法</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td> createStatement</td>
<td> 获取普通执行 SQL 对象</td>
</tr>
<tr>
<td> prepareStatement</td>
<td> 获取预编译 SQL 的 SQL 执行对象，防止 SQL 注入</td>
</tr>
<tr>
<td> prepareCall</td>
<td> 获取存储过程对象</td>
</tr>
</tbody></table>
<h3 id="管理事务"><a href="#管理事务" class="headerlink" title="管理事务"></a>管理事务</h3><p>Mysql 事务管理过程</p>
<ol>
<li>开启事务	BEGIN/START TRANSACTION</li>
<li> 提交事务    COMMIT</li>
<li> 回滚事务    ROLLBACK</li>
</ol>
<p>JDBC 事务管理</p>
<ol>
<li>开启事务    setAutoCommit (boolean autoCommint)</li>
<li> 提交事务    commit ()</li>
<li> 回滚事务    rollback ()</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql:///mydb"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//创建数据库链接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"insert into person (id,name,sex,age) value(1,'小红',0,18)"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">"insert into person (id,name,sex,age) value(1,'小名',1,18)"</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    System.out.println(statement.executeUpdate(sql));</span><br><span class="line">    System.out.println(statement.executeUpdate(sql2));</span><br><span class="line">    connection.commit();</span><br><span class="line">}<span class="keyword">catch</span> (Exception e){</span><br><span class="line">    connection.rollback();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}<span class="keyword">finally</span> {</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在代码中，插入的两个数据 ID 都为 1，因为在数据库中对 ID 做了唯一设置，所以当第二个数据插入时，会产生异常，但为了确保事务的正常，所以在同一个事务中的第一个 SQL 语句也应该回滚，所以在这个事务中，第一个 SQL 并没有能够提交，而是随着事务做了回滚操作。</p>
<h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p>Statement 的作用就是执行 SQL</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td> executeUpdate</td>
<td>int</td>
<td> 执行 DML、DDL 语句，返回 DML 影响的行数，DDL 语句执行成功也可能返回 0</td>
</tr>
<tr>
<td>executeQuery</td>
<td>ResultSet</td>
<td> 执行 DQL 语句，返回 ResultSet 对象</td>
</tr>
</tbody></table>
<h2 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h2><p>ResultSet 是结果集对象，封装了 DQL 语句的查询结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql:///mydb"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//创建数据库链接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from person"</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()){</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"sex"</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"age"</span>);</span><br><span class="line">    System.out.println(id+<span class="string">"\t"</span>+name+<span class="string">"\t"</span>+sex+<span class="string">"\t"</span>+age);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>小测试，将查询结果封装到对象，并且添加到集合中</p>
<p>创建 Person 实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">代码过于简单重复已忽略</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql:///mydb"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//创建数据库链接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select * from person"</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">ArrayList&lt;Person&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()){</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"sex"</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"age"</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(id,name,sex,age);</span><br><span class="line">    people.add(person);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在原有代码的基础上进行修改，将查询到的结果封装到 Person 对象中，并且添加到 ArrayList 中</p>
<h2 id="prepareStatement"><a href="#prepareStatement" class="headerlink" title="prepareStatement"></a>prepareStatement</h2><p>预编译 SQL 语句，可以防止 SQL 注入</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql:///mydb"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="comment">//创建数据库链接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"select id from user where username = ? and password = ?"</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>,<span class="string">"小明"</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>,<span class="string">"123456"</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()){</span><br><span class="line">    System.out.println(<span class="string">"登陆成功"</span>);</span><br><span class="line">}</span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></tbody></table></figure>

<p>在 SQL 的参数设置时会对参数进行转义，并不会看出 SQL 语句的一部分</p>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul>
<li>数据库连接池是个容器，负责分配、管理数据库连接</li>
<li>它允许应用程序重复使用一个现有的数据库连接池，而不是重新建立一个</li>
<li>释放空间时间超过最大空袭时间的数据库连接来避免没有释放数据库连接池而因其的数据库连接遗漏</li>
<li>好吃<ul>
<li>资源重用</li>
<li>提升系统响应时间</li>
<li>避免数据库连接遗漏 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"./Base/src/durid.properties"</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">source</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line">System.out.println(connection);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///mydb</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 初始化连接池数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java 常用类</title>
    <url>/8d1dd4d8ee8b/</url>
    <content><![CDATA[<p>Java 的常用类是 Java SE 的重要部分，这里是学习的笔记，课程选取的是 B 站 UP 主三更草堂，简单的描述了一些常用类的具体使用以及一些注意事项。</p>
<span id="more"></span>

<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="Object类的介绍"><a href="#Object类的介绍" class="headerlink" title="Object类的介绍"></a>Object 类的介绍</h3><p>Object 类是所有的类的父类，所有的 Java 类都继承了 Object</p>
<h4 id="隐式继承"><a href="#隐式继承" class="headerlink" title="隐式继承"></a>隐式继承</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="显式继承"><a href="#显式继承" class="headerlink" title="显式继承"></a>显式继承</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> <span class="keyword">extends</span> <span class="title class_">Object</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><table>
<thead>
<tr>
<th>序号</th>
<th align="left">构造方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td> 1</td>
<td align="left">Object()</td>
<td> 构造一个新的对象</td>
</tr>
</tbody></table>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td> 01</td>
<td>hashCode()</td>
<td> 获取对象的 hash 值</td>
</tr>
<tr>
<td> 02</td>
<td>getClass()</td>
<td> 获取对象的运行时对象的类</td>
</tr>
<tr>
<td> 03</td>
<td>toString()</td>
<td> 返回对象的字符串表示形式</td>
</tr>
<tr>
<td> 04</td>
<td>equals()</td>
<td> 比较两个对象是否相等 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">System.out.println(s.hashCode());</span><br><span class="line">System.out.println(s.getClass());</span><br><span class="line">System.out.println(s.toString());</span><br><span class="line">System.out.println(s.equals(s));</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">1078694789</span><br><span class="line">class java.lang.Object</span><br><span class="line">java.lang.Object@404b9385</span><br><span class="line">true</span><br></pre></td></tr></tbody></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在 Object 的 equals 方法中的源码如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> {</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>可以看出在方法中比较的是对象的地址，所以无意义，通常会对方法进行重写</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String的介绍"><a href="#String的介绍" class="headerlink" title="String的介绍"></a>String 的介绍</h3><p>在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串</p>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"abc"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"abc"</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td> 01</td>
<td>equals()</td>
<td> 将此字符串与指定的对象比较</td>
</tr>
<tr>
<td> 02</td>
<td>equalsIgnoreCase()</td>
<td> 用于将字符串与指定的对象比较，不考虑大小写</td>
</tr>
<tr>
<td> 03</td>
<td>indexOf()</td>
<td> 返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1</td>
</tr>
<tr>
<td>04</td>
<td>lastIndexOf()</td>
<td> 返回指定子字符串在此字符串中最右边出现处的索引，如果此字符串中没有这样的字符，则返回 -1</td>
</tr>
<tr>
<td>05</td>
<td>length()</td>
<td> 用于返回字符串的长度，空字符串的长度返回 0</td>
</tr>
<tr>
<td>06</td>
<td>replace()</td>
<td> 通过用 newChar 字符替换字符串中出现的所有 searchChar 字符，并返回替换后的新字符串</td>
</tr>
<tr>
<td> 07</td>
<td>split()</td>
<td> 根据匹配给定的正则表达式来拆分字符串</td>
</tr>
<tr>
<td> 08</td>
<td>substring()</td>
<td> 返回字符串的子字符串</td>
</tr>
<tr>
<td> 09</td>
<td>startsWith()</td>
<td> 检测字符串是否以指定的前缀开始</td>
</tr>
<tr>
<td> 10</td>
<td>trim()</td>
<td> 返回字符串的副本，忽略前导空白和尾部空白</td>
</tr>
<tr>
<td> 11</td>
<td>isEmpty()</td>
<td> 判断字符串是否为空 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">"abcabc"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">"ABCABC"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">"      abc      "</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">System.out.println(s1.equals(s2));  <span class="comment">//false</span></span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s2));    <span class="comment">//true</span></span><br><span class="line">System.out.println(s1.indexOf(<span class="string">'b'</span>));    <span class="comment">//1</span></span><br><span class="line">System.out.println(s1.lastIndexOf(<span class="string">'b'</span>));    <span class="comment">//4</span></span><br><span class="line">System.out.println(s1.length());    <span class="comment">//6</span></span><br><span class="line">System.out.println(s1.replace(<span class="string">'a'</span>,<span class="string">'A'</span>));    <span class="comment">//AbcAbc</span></span><br><span class="line">System.out.println(s1.substring(<span class="number">2</span>));    <span class="comment">//cabc</span></span><br><span class="line">System.out.println(s1.substring(<span class="number">2</span>,<span class="number">3</span>));  <span class="comment">//c</span></span><br><span class="line">System.out.println(s3.trim());  <span class="comment">//abc</span></span><br><span class="line">System.out.println(s4.isEmpty());   <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="包装类的介绍"><a href="#包装类的介绍" class="headerlink" title="包装类的介绍"></a>包装类的介绍</h3><p>Java 为每一个基本数据类型提供相对应的包装类，提供常用的方法</p>
<table>
<thead>
<tr>
<th align="left">原始数据类型</th>
<th align="left">包装类</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">Character</td>
</tr>
</tbody></table>
<h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><h5 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>

<h5 id="构造方法创建"><a href="#构造方法创建" class="headerlink" title="构造方法创建"></a>构造方法创建</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="使用静态方法valueOf-创建"><a href="#使用静态方法valueOf-创建" class="headerlink" title="使用静态方法valueOf()创建"></a>使用静态方法 valueOf () 创建</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">30</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> byteValue()</td>
<td>byte</td>
<td> 以 byte 类型返回该 Integer 的值</td>
</tr>
<tr>
<td> compareTo(Integer anotherInteger)</td>
<td>int</td>
<td> 在数字上比较两个 Integer 对象。如果相同返回 0；调用对象的数值小于 anotherInteger 返回负值，反之，返回正值。</td>
</tr>
<tr>
<td>equals(Object IntegerObj)</td>
<td>boolean</td>
<td> 比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td> intValue()</td>
<td>int</td>
<td> 以 int 型返回此 Integer 对象</td>
</tr>
<tr>
<td> shortValue()</td>
<td>short</td>
<td> 以 short 型返回此 Integer 对象</td>
</tr>
<tr>
<td> toString()</td>
<td>String</td>
<td> 返回一个表示该 Integer 值的 String 对象</td>
</tr>
<tr>
<td> valueOf(String str)</td>
<td>Integer</td>
<td> 返回指定 Sting 值的 Integer 对象</td>
</tr>
<tr>
<td> parseInt(String str)</td>
<td>int</td>
<td> 返回包含在由 str 指定的字符串中的数字的等价整数值 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//以byte类型返回该Integer的值</span></span><br><span class="line">System.out.println(i.byteValue());  <span class="comment">//-24</span></span><br><span class="line"><span class="comment">//在数字上比较两个Integer对象。如果相同返回0；调用对象的数值小于anotherInteger返回负值，反之，返回正值。</span></span><br><span class="line">System.out.println(i2.compareTo(i));    <span class="comment">//-1</span></span><br><span class="line"><span class="comment">//比较此对象与指定对象是否相等</span></span><br><span class="line">System.out.println(i.equals(i2));<span class="comment">// false</span></span><br><span class="line"><span class="comment">//以int型返回此Integer对象</span></span><br><span class="line">System.out.println(i.intValue());   <span class="comment">//1000</span></span><br><span class="line"><span class="comment">//以short型返回此Integer对象   </span></span><br><span class="line">System.out.println(i.shortValue()); <span class="comment">//1000</span></span><br><span class="line"><span class="comment">//返回一个表示该Integer值的String对象</span></span><br><span class="line">System.out.println(Integer.toString(i));    <span class="comment">//1000</span></span><br><span class="line"><span class="comment">//返回指定Sting值的Integer对象</span></span><br><span class="line">System.out.println(Integer.valueOf(<span class="string">"20"</span>));  <span class="comment">//20</span></span><br><span class="line"><span class="comment">//返回包含在由str指定的字符串中的数字的等价整数值</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"123"</span>));    <span class="comment">//123</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用常量"><a href="#常用常量" class="headerlink" title="常用常量"></a>常用常量</h4><table>
<thead>
<tr>
<th>序号</th>
<th>常量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td> 1</td>
<td>MAX_VALUE</td>
<td> 表示 int 型可取的最大值</td>
</tr>
<tr>
<td> 2</td>
<td>MIN_VALUE</td>
<td> 表示 int 型可取的最小值</td>
</tr>
<tr>
<td> 3</td>
<td>SIZE</td>
<td> 表示以 2 进制补码形式表示 int 值的位数 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//表示int型可取的最大值</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE);  <span class="comment">//2147483647</span></span><br><span class="line"><span class="comment">//表示int型可取的最小值</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE);  <span class="comment">//-2147483648</span></span><br><span class="line"><span class="comment">//表示以2进制补码形式表示int值的位数</span></span><br><span class="line">System.out.println(Integer.SIZE);   <span class="comment">//32</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><h4 id="对象创建-1"><a href="#对象创建-1" class="headerlink" title="对象创建"></a>对象创建</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> Boolean.TRUE;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">"true"</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">"TRUE"</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> booleanValue()</td>
<td>boolean</td>
<td> 将 Boolean 对象的值以对应的 boolean 值返回</td>
</tr>
<tr>
<td> equals(Object obj)</td>
<td>boolean</td>
<td> 判断调用该方法的对象与 obj 是否相等，当且仅当参数不是 null，而且与调用该方法的对象一样都表示同一个 boolean 值的 Boolean 对象时才返回 true</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td> 返回一个表示该 boolean 值的 String 对象</td>
</tr>
<tr>
<td> valueOf(String str)</td>
<td>boolean</td>
<td> 返回一个用指定的字符串表示值的 boolean 值</td>
</tr>
<tr>
<td> parseBoolean(String str)</td>
<td>boolean</td>
<td> 将字符串参数解析为 boolean 值</td>
</tr>
</tbody></table>
<h4 id="常用常量-1"><a href="#常用常量-1" class="headerlink" title="常用常量"></a>常用常量</h4><table>
<thead>
<tr>
<th>序号</th>
<th>常量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td> 1</td>
<td>TRUE</td>
<td> 对应基值 true 的 Boolean 对象</td>
</tr>
<tr>
<td> 2</td>
<td>FALSE</td>
<td> 对应基值 false 的 Boolean 对象</td>
</tr>
</tbody></table>
<h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><h4 id="对象创建-2"><a href="#对象创建-2" class="headerlink" title="对象创建"></a>对象创建</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line"><span class="type">Byte</span> <span class="variable">b2</span> <span class="operator">=</span> b;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> byteValue()</td>
<td>byte</td>
<td> 以一个 byte 值返回 Byte 对象</td>
</tr>
<tr>
<td> compareTo(Byte anotherByte)</td>
<td>int</td>
<td> 在数字上比较两个 Byte 对象 (两数相减)</td>
</tr>
<tr>
<td>doubleValue()</td>
<td>double</td>
<td> 以一个 double 值返回 Byte 对象</td>
</tr>
<tr>
<td> equals(Object obj)</td>
<td>boolean</td>
<td> 比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td> intValue()</td>
<td>int</td>
<td> 以 int 值返回此 Byte 的值</td>
</tr>
<tr>
<td> toString()</td>
<td>String</td>
<td> 返回一个 Byte 值的 String 对象</td>
</tr>
<tr>
<td> valueOf(String str)</td>
<td>byte</td>
<td> 返回指定 Sting 值的 Byte 对象</td>
</tr>
<tr>
<td> parseByte(String str)</td>
<td>byte</td>
<td> 返回包含在由 str 指定的字符串中的数字的等价 byte</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">45</span>;</span><br><span class="line"><span class="type">Byte</span> <span class="variable">b2</span> <span class="operator">=</span> b;</span><br><span class="line">System.out.println(b2.byteValue()); <span class="comment">//45</span></span><br><span class="line">System.out.println(b2.compareTo((<span class="type">byte</span>) <span class="number">100</span>));   <span class="comment">//-55</span></span><br><span class="line">System.out.println(b2.doubleValue());   <span class="comment">//45.0</span></span><br><span class="line">System.out.println(b2.equals(b));   <span class="comment">//true</span></span><br><span class="line">System.out.println(b2.intValue());  <span class="comment">//45</span></span><br><span class="line">System.out.println(b2.toString());  <span class="comment">//45</span></span><br><span class="line">System.out.println(Byte.valueOf(<span class="string">"40"</span>)); <span class="comment">//40</span></span><br><span class="line">System.out.println(Byte.parseByte(<span class="string">"50"</span>));   <span class="comment">//50</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用常量-2"><a href="#常用常量-2" class="headerlink" title="常用常量"></a>常用常量</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println(Byte.MAX_VALUE);	<span class="comment">//127</span></span><br><span class="line">System.out.println(Byte.MIN_VALUE);	<span class="comment">//-128</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Character</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">'1'</span>;</span><br><span class="line"><span class="type">Character</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">'2'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> charValue()</td>
<td>char</td>
<td> 返回此 Character 对象的值</td>
</tr>
<tr>
<td> compareTo(Character anotherCharacter)</td>
<td>int</td>
<td> 在数字上比较两个 Character 对象。</td>
</tr>
<tr>
<td>equals(Object obj)</td>
<td>boolean</td>
<td> 比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td> toString()</td>
<td>String</td>
<td> 返回一个表示该 char 值的 String 对象</td>
</tr>
<tr>
<td> toUpperCase(char ch)</td>
<td>char</td>
<td> 将字符参数转为大写</td>
</tr>
<tr>
<td> toLowerCase(char ch)</td>
<td>char</td>
<td> 将字符参数转为小写</td>
</tr>
<tr>
<td> isUpperCase(char ch)</td>
<td>boolean</td>
<td> 判定指定字符参数是否为大写</td>
</tr>
<tr>
<td> isLowerCase(char ch)</td>
<td>boolean</td>
<td> 判定指定字符参数是否为小写 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Character</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">'1'</span>;</span><br><span class="line"><span class="type">Character</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">'2'</span>);</span><br><span class="line">System.out.println(c.charValue());      <span class="comment">//1</span></span><br><span class="line">System.out.println(c.compareTo(<span class="string">'1'</span>));       <span class="comment">//0</span></span><br><span class="line">System.out.println(c.equals(c1));       <span class="comment">//false</span></span><br><span class="line">System.out.println(c.toString());       <span class="comment">//1</span></span><br><span class="line">System.out.println(Character.toUpperCase(<span class="string">'a'</span>));     <span class="comment">//A</span></span><br><span class="line">System.out.println(Character.toLowerCase(<span class="string">'A'</span>));     <span class="comment">//a</span></span><br><span class="line">System.out.println(Character.isUpperCase(<span class="string">'a'</span>));     <span class="comment">//false</span></span><br><span class="line">System.out.println(Character.isLowerCase(<span class="string">'a'</span>));     <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h3><h4 id="对象创建-3"><a href="#对象创建-3" class="headerlink" title="对象创建"></a>对象创建</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-6"><a href="#常用方法-6" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> byteValue()</td>
<td>byte</td>
<td> 以 byte 类型返回该 Double 对象的值（通过强制转换）</td>
</tr>
<tr>
<td>compareTo(Double d)</td>
<td>int</td>
<td> 在数字上比较两个 Double 对象。如果相同返回 0；调用对象的数值小于 d 返回负值，反之，返回正值。</td>
</tr>
<tr>
<td>equals(Object obj)</td>
<td>boolean</td>
<td> 比较此对象与指定对象是否相等</td>
</tr>
<tr>
<td> intValue()</td>
<td>int</td>
<td> 以 int 型返回此 Double 对象</td>
</tr>
<tr>
<td> isNaN()</td>
<td>boolean</td>
<td> 如果此 double 是非数字，则返回 true</td>
</tr>
<tr>
<td>toString()</td>
<td>String</td>
<td> 返回此 Double 对象值的 String 对象</td>
</tr>
<tr>
<td> valueOf(String str)</td>
<td>double</td>
<td> 返回指定 Sting 值的 Double 对象</td>
</tr>
<tr>
<td> doubleValue()</td>
<td>double</td>
<td> 以 double 形式返回此 Double 对象</td>
</tr>
<tr>
<td> longValue()</td>
<td>long</td>
<td> 以 long 形式返回此 Double 对象（通过强制转换）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">10</span>);</span><br><span class="line">System.out.println(d.byteValue());      <span class="comment">//10</span></span><br><span class="line">System.out.println(d.compareTo(d1));        <span class="comment">//0</span></span><br><span class="line">System.out.println(d.equals(d1));       <span class="comment">//true</span></span><br><span class="line">System.out.println(d.intValue());       <span class="comment">//10</span></span><br><span class="line">System.out.println(d.isNaN());      <span class="comment">//false</span></span><br><span class="line">System.out.println(Double.valueOf(<span class="string">"100"</span>));      <span class="comment">//100.0</span></span><br><span class="line">System.out.println(d.doubleValue());        <span class="comment">//10.0</span></span><br><span class="line">System.out.println(d.longValue());      <span class="comment">//10</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h4 id="常用方法-7"><a href="#常用方法-7" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> byteValue()</td>
<td>byte</td>
<td> 以 byte 类型返回指定的数值</td>
</tr>
<tr>
<td> intValue()</td>
<td>int</td>
<td> 以 int 类型返回指定的数值</td>
</tr>
<tr>
<td> floatValue()</td>
<td>float</td>
<td> 以 float 类型返回指定的数值</td>
</tr>
<tr>
<td> shortValue()</td>
<td>short</td>
<td> 以 short 类型返回指定的数值</td>
</tr>
<tr>
<td> longValue()</td>
<td>long</td>
<td> 以 long 类型返回指定的数值</td>
</tr>
<tr>
<td> doubleValue()</td>
<td>double</td>
<td> 以 double 类型返回指定的数值 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Number</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">System.out.println(n.byteValue());      <span class="comment">//-24</span></span><br><span class="line">System.out.println(n.intValue());       <span class="comment">//1000</span></span><br><span class="line">System.out.println(n.floatValue());     <span class="comment">//1000.0</span></span><br><span class="line">System.out.println(n.shortValue());     <span class="comment">//1000</span></span><br><span class="line">System.out.println(n.longValue());      <span class="comment">//1000</span></span><br><span class="line">System.out.println(n.doubleValue());        <span class="comment">//1000.0</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><h4 id="占时跳过，实现valueOf-方法，具体看源码"><a href="#占时跳过，实现valueOf-方法，具体看源码" class="headerlink" title="占时跳过，实现valueOf()方法，具体看源码"></a>占时跳过，实现 valueOf () 方法，具体看源码</h4><h2 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer 和 StringBuilder</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>String 是不可变的字符串，每对 String 进行次变更操作都会创建一个新的对象。</p>
<p>StringBuilder 是可变字符序列，线程不安全，但效率高。</p>
<p>StringBuffer 是可变字符序列，具有线程安全的特性，相对于 StringBuilder 来说效率较低。</p>
<h3 id="对象创建-4"><a href="#对象创建-4" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="String对字符串的操作"><a href="#String对字符串的操作" class="headerlink" title="String对字符串的操作"></a>String 对字符串的操作</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) {</span><br><span class="line">    s = s+<span class="string">"a"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line">System.out.println(<span class="string">"程序运行时间："</span> + (endTime - startTime) + <span class="string">"ms"</span>);<span class="comment">//程序运行时间：3754ms</span></span><br></pre></td></tr></tbody></table></figure>

<p>String 对字符串的操作确实效率太低了，只是做了十万次的拼接，就耗费了 3.75s 的时间</p>
<h3 id="StringBuilder对字符串的操作"><a href="#StringBuilder对字符串的操作" class="headerlink" title="StringBuilder对字符串的操作"></a>StringBuilder 对字符串的操作</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) {</span><br><span class="line">    builder.append(<span class="string">'a'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line">System.out.println(<span class="string">"程序运行时间："</span> + (endTime - startTime) + <span class="string">"ms"</span>);<span class="comment">//程序运行时间：469ms</span></span><br></pre></td></tr></tbody></table></figure>

<p>可以看出，StringBuilder 的性能有多优异，做了一亿次的字符串拼接，只花费了 0.469s 的时间，可以这么讲，相对于 String 的性能来说根本不是一个维度的。</p>
<h3 id="StringBuffer对字符串的操作"><a href="#StringBuffer对字符串的操作" class="headerlink" title="StringBuffer对字符串的操作"></a>StringBuffer 对字符串的操作</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) {</span><br><span class="line">    s.append(<span class="string">'a'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis(); </span><br><span class="line">System.out.println(<span class="string">"程序运行时间："</span> + (endTime - startTime) + <span class="string">"ms"</span>);<span class="comment">//程序运行时间：1680ms</span></span><br></pre></td></tr></tbody></table></figure>

<p>在前面说到 StringBuffer 的线程是安全的，但性能相对于 StringBuilder 来说是有所下降的，在一亿次的字符拼接拼接中，StringBuffer 花费了 1.68s，确实是有很大的差距。</p>
<h3 id="常用方法-8"><a href="#常用方法-8" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td> append()</td>
<td>StringBuilder</td>
<td> 将指定的字符串追加到此字符序列。</td>
</tr>
<tr>
<td>insert()</td>
<td>StringBuilder</td>
<td> 将字符串插入此字符序列.</td>
</tr>
<tr>
<td>reverse()</td>
<td>StringBuilder</td>
<td> 导致此字符序列被序列的反向替换</td>
</tr>
<tr>
<td> setCharAt(int index, char ch)</td>
<td>void</td>
<td> 指定索引处的字符设置为 ch</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">System.out.println(buffer);     <span class="comment">//Hello World</span></span><br><span class="line">buffer.append(<span class="string">"Hello Java"</span>);</span><br><span class="line">System.out.println(buffer);     <span class="comment">//Hello WorldHello Java</span></span><br><span class="line">buffer.insert(<span class="number">10</span>,<span class="string">","</span>);</span><br><span class="line">System.out.println(buffer);     <span class="comment">//Hello World,Hello Java</span></span><br><span class="line">buffer.setCharAt(<span class="number">10</span>,<span class="string">'!'</span>);</span><br><span class="line">System.out.println(buffer);     <span class="comment">//Hello Worl!dHello Java</span></span><br><span class="line">buffer.reverse();</span><br><span class="line">System.out.println(buffer);     <span class="comment">//avaJ olleHd!lroW olleH</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><h3 id="常用list集合"><a href="#常用list集合" class="headerlink" title="常用list集合"></a>常用 list 集合</h3><p>List 接口下的集合特点：</p>
<ul>
<li>有索引</li>
<li>可以存储重复元素</li>
<li>元素的顺序和实际存储的顺序相同</li>
</ul>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;String&gt; stringArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-9"><a href="#常用方法-9" class="headerlink" title="常用方法"></a>常用方法</h4><h5 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h5><p>ArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 add () 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">System.out.println(games);  <span class="comment">//[Counter-Strike: Global Offensive, Dota 2, PUBG: BATTLEGROUNDS, Apex Legends, Grand Theft Auto V]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h5><p>访问 ArrayList 中的元素可以使用 get () 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">System.out.println(games.get(<span class="number">4</span>));   <span class="comment">//Grand Theft Auto V</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h5><p>如果要修改 ArrayList 中的元素可以使用 set () 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">games.set(<span class="number">0</span>,<span class="string">"CS:GO"</span>);<span class="comment">//修改下标为0的游戏名称为CS:GO</span></span><br><span class="line">System.out.println(games);  <span class="comment">//[CS:GO, Dota 2, PUBG: BATTLEGROUNDS, Apex Legends, Grand Theft Auto V]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><p>如果要删除 ArrayList 中的元素可以使用 remove () 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">games.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(games);  <span class="comment">//[Counter-Strike: Global Offensive, Dota 2, Apex Legends, Grand Theft Auto V]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h5><p>如果要计算 ArrayList 中的元素数量可以使用 size () 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">System.out.println(games.size());   <span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="ArrayList遍历"><a href="#ArrayList遍历" class="headerlink" title="ArrayList遍历"></a>ArrayList 遍历</h4><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; games.size(); i++) {</span><br><span class="line">    System.out.println(games.get(i));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line"><span class="keyword">for</span> (String game : games) {</span><br><span class="line">    System.out.println(game);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator()"></a>迭代器 iterator ()</h5><p>hasNext ()，如果迭代有更多元素，则返回 true</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = games.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在遍历过程中遇到PUBG时将其从ArrayList中移除</span></span><br><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = games.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"PUBG: BATTLEGROUNDS"</span>.equals(next)){</span><br><span class="line">        games.remove(next);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(next);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>以上代码看似可以从 ArrayList 中移除指定的元素，但实际运行时会产生一个并发修改异常的错误，所以需要对相应的代码进行修改</p>
<h5 id="为什么会产生并发修改异常"><a href="#为什么会产生并发修改异常" class="headerlink" title="为什么会产生并发修改异常"></a>为什么会产生并发修改异常</h5><p>首先查看一下错误的信息</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">Counter-Strike: Global Offensive</span><br><span class="line">Dota 2</span><br><span class="line">PUBG: BATTLEGROUNDS</span><br><span class="line">Exception in thread "main" java.util.ConcurrentModificationException</span><br><span class="line">	at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)</span><br><span class="line">	at java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)</span><br><span class="line">	at com.sangeng.commonClass._03.ArrayListDemo04.main(ArrayListDemo04.java:19)</span><br></pre></td></tr></tbody></table></figure>

<p>根据错误信息，可以发现错误发生在 ArrayList.java 的第 1013 行，所以去查看一下源代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到，在 modCount 和 expectedModCount 不相等时会抛出一个异常</p>
<p>那么，导致这两个不相等的情况，就很可能是在对 ArrayList 进行修改时发生的，查看 remove () 的源码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> {</span><br><span class="line">    <span class="keyword">final</span> Object[] es = elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    found: {</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (es[i] == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span> found;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(es[i]))</span><br><span class="line">                    <span class="keyword">break</span> found;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    fastRemove(es, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>通过查看源码，发现这里并没有对这两个的值进行修改啊，那么是不是调用的方法对这两个值进行修改了呢？</p>
<p>在查看 fastRemove () 时，发现这个方法果然对数据进行了修改</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(Object[] es, <span class="type">int</span> i)</span> {</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> newSize;</span><br><span class="line">    <span class="keyword">if</span> ((newSize = size - <span class="number">1</span>) &gt; i)</span><br><span class="line">        System.arraycopy(es, i + <span class="number">1</span>, es, i, newSize - i);</span><br><span class="line">    es[size = newSize] = <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>于是乎，我们来查看一下这个 modCount 到底是什么？</p>
<p>在查看源代码后，大致意思是它表示的是列表结构被修改的次数</p>
<p>在查看 Iterator 接口的实现类时发现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br></pre></td></tr></tbody></table></figure>

<p>这里看到在对 expectedModCount 进行初始化是用的是 modCount 的值，当接下来 modCount 发生改变后再与 expectedModCount 进行比较就是不相等的，这时便会发生异常</p>
<h5 id="解决思路一"><a href="#解决思路一" class="headerlink" title="解决思路一"></a>解决思路一</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在遍历过程中遇到PUBG时将其从ArrayList中移除</span></span><br><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;String&gt; remove = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> games.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"PUBG: BATTLEGROUNDS"</span>.equals(games.get(i))){</span><br><span class="line">        games.remove(i);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">System.out.println(games);	<span class="comment">//[Counter-Strike: Global Offensive, Dota 2, Apex Legends, Grand Theft Auto V]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="解决思路二"><a href="#解决思路二" class="headerlink" title="解决思路二"></a>解决思路二</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在遍历过程中遇到PUBG时将其从ArrayList中移除</span></span><br><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;String&gt; remove = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">Iterator&lt;String&gt; iterator = games.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"PUBG: BATTLEGROUNDS"</span>.equals(next)){</span><br><span class="line">        remove.add(next);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">games.removeAll(remove);</span><br><span class="line">System.out.println(games);	<span class="comment">//[Counter-Strike: Global Offensive, Dota 2, Apex Legends, Grand Theft Auto V]</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="foreach产生并发修改的思考"><a href="#foreach产生并发修改的思考" class="headerlink" title="foreach产生并发修改的思考"></a>foreach 产生并发修改的思考</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String game: games){</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"PUBG: BATTLEGROUNDS"</span>.equals(game)){</span><br><span class="line">        games.remove(game);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在使用 foreach 时发现这段代码居然也会产生并发修改异常，而且错误信息和之前完全一样，所以大胆的猜测使用 foreach 遍历 ArrayList 时，使用的依旧是 iterator 来实现的，通过 Debug 发现，果然是调用的 iterator，在 Iterator 接口的实现类的 next () 方法执行时，调用了 checkForComodification ()，而由于上一次已经对 games 进行了修改，所以在 checkForComodification () 里进行判断时，modCount 不等于 expectedModCount 条件成立。</p>
<h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h4><p>以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">games.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">games.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">games.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">games.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">games.add(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">Object[] array = games.toArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">    System.out.println(array[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="LinkedList（链表）"><a href="#LinkedList（链表）" class="headerlink" title="LinkedList（链表）"></a>LinkedList（链表）</h3><h4 id="创建对象-2"><a href="#创建对象-2" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">LinkedList&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-10"><a href="#常用方法-10" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">返回类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> add(E e)</td>
<td align="left">Boolean</td>
<td> 链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td>
</tr>
<tr>
<td align="left">add(int index, E element)</td>
<td align="left">void</td>
<td> 向指定位置插入元素。</td>
</tr>
<tr>
<td align="left">addFirst(E e)</td>
<td align="left">void</td>
<td> 元素添加到头部。</td>
</tr>
<tr>
<td align="left">addLast(E e)</td>
<td align="left">void</td>
<td> 元素添加到尾部。</td>
</tr>
<tr>
<td align="left">get(int index)</td>
<td align="left">E</td>
<td> 返回指定位置的元素。</td>
</tr>
<tr>
<td align="left">getFirst()</td>
<td align="left">E</td>
<td> 返回第一个元素。</td>
</tr>
<tr>
<td align="left">getLast()</td>
<td align="left">E</td>
<td> 返回最后一个元素。</td>
</tr>
<tr>
<td align="left">set(int index, E element)</td>
<td align="left">E</td>
<td> 设置指定位置的元素。</td>
</tr>
<tr>
<td align="left">removeFirst()</td>
<td align="left">E</td>
<td> 删除并返回第一个元素。</td>
</tr>
<tr>
<td align="left">removeLast()</td>
<td align="left">E</td>
<td> 删除并返回最后一个元素。</td>
</tr>
<tr>
<td align="left">remove(int index)</td>
<td align="left">E</td>
<td> 删除指定位置的元素。</td>
</tr>
<tr>
<td align="left">clear()</td>
<td align="left">void</td>
<td> 清空链表。</td>
</tr>
<tr>
<td align="left">contains(Object o)</td>
<td align="left">boolean</td>
<td> 判断是否含有某一元素。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">linkedList.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">linkedList.add(<span class="number">1</span>,<span class="string">"Dota 2"</span>);</span><br><span class="line">linkedList.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">linkedList.addFirst(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">System.out.println(linkedList);		<span class="comment">//[Grand Theft Auto V, Counter-Strike: Global Offensive, Dota 2, Apex Legends]</span></span><br><span class="line">System.out.println(linkedList.get(<span class="number">0</span>));      <span class="comment">//Grand Theft Auto V</span></span><br><span class="line">System.out.println(linkedList.getFirst());      <span class="comment">//Grand Theft Auto V</span></span><br><span class="line">System.out.println(linkedList.getLast());       <span class="comment">//Apex Legends</span></span><br><span class="line">linkedList.set(<span class="number">1</span>,<span class="string">"CSGO"</span>);</span><br><span class="line">System.out.println(linkedList);     <span class="comment">//[Grand Theft Auto V, CSGO, Dota 2, Apex Legends]</span></span><br><span class="line">linkedList.removeFirst();</span><br><span class="line">System.out.println(linkedList);     <span class="comment">//[CSGO, Dota 2, Apex Legends]</span></span><br><span class="line">linkedList.removeLast();</span><br><span class="line">System.out.println(linkedList);     <span class="comment">//[CSGO, Dota 2]</span></span><br><span class="line">linkedList.remove(<span class="string">"CSGO"</span>);</span><br><span class="line">System.out.println(linkedList);     <span class="comment">//[Dota 2]</span></span><br><span class="line">linkedList.clear();</span><br><span class="line">System.out.println(linkedList);     <span class="comment">//[]</span></span><br><span class="line">System.out.println(linkedList.contains(<span class="string">"CSGO"</span>));        <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="遍历的三种方法"><a href="#遍历的三种方法" class="headerlink" title="遍历的三种方法"></a>遍历的三种方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">linkedList.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">linkedList.add(<span class="number">1</span>,<span class="string">"Dota 2"</span>);</span><br><span class="line">linkedList.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">linkedList.addFirst(<span class="string">"Grand Theft Auto V"</span>);</span><br><span class="line">System.out.println(<span class="string">"--------------方法一------------------------"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; linkedList.size(); i++) {</span><br><span class="line">    System.out.println(linkedList.get(i));</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"--------------方法二------------------------"</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> linkedList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"--------------方法三------------------------"</span>);</span><br><span class="line"><span class="keyword">for</span> (Object o : linkedList) {</span><br><span class="line">    System.out.println(o);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList 和 LinkedList 的区别</h3><p>都是实现了 List 接口，但底层存储数据的数据结构不同，ArrayList 底层是用数组来存储的，而 Linked 用的则是链表，所以各自的特点跟各自的数据结构特点一样。</p>
<p><strong>ArrayList：查找快，增删慢</strong></p>
<p><strong>LinkedList：增删快，查找慢</strong></p>
<h2 id="常用set集合"><a href="#常用set集合" class="headerlink" title="常用set集合"></a>常用 set 集合</h2><h3 id="set集合的特点"><a href="#set集合的特点" class="headerlink" title="set集合的特点"></a>set 集合的特点</h3><ul>
<li><p>不能存储重复数据</p>
</li>
<li><p>没有索引</p>
</li>
</ul>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet 的特点</p>
<ul>
<li>底层数据结构是哈希表</li>
<li>存储元素的顺序和遍历的顺序可能是不一样的</li>
<li>没有索引</li>
<li>集合不能存储重复元素</li>
<li>基于 HashMap 来实现</li>
<li>允许 null 值</li>
<li>线程是不安全的，多线程操作可能结果有问题</li>
<li>实现了 Set 接口</li>
</ul>
<h4 id="创建对象-3"><a href="#创建对象-3" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">HashSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure>

<h4 id="常用方法-11"><a href="#常用方法-11" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">返回类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> add(E e)</td>
<td align="left">boolean</td>
<td> 添加元素，返回是否成功，成功为 true，失败为 false。</td>
</tr>
<tr>
<td align="left">contains(E e)</td>
<td align="left">boolean</td>
<td> 判断元素是否存在于集合当中</td>
</tr>
<tr>
<td align="left"> remove(E e)</td>
<td align="left">boolean</td>
<td> 删除集合中的元素 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">strings.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">strings.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">strings.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">strings.add(<span class="string">"Lost Ark"</span>);</span><br><span class="line">strings.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">System.out.println(strings);</span><br><span class="line">strings.remove(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">System.out.println(strings);</span><br><span class="line"><span class="keyword">if</span> (!strings.contains(<span class="string">"PUBG"</span>)){</span><br><span class="line">    strings.add(<span class="string">"PUBG"</span>);</span><br><span class="line">}</span><br><span class="line">System.out.println(strings);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>与 list 集合类似，由于没有索引，索引不能通过索引来查询，但都是有迭代器 iterator 的</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">strings.add(<span class="string">"Counter-Strike: Global Offensive"</span>);</span><br><span class="line">strings.add(<span class="string">"Dota 2"</span>);</span><br><span class="line">strings.add(<span class="string">"PUBG: BATTLEGROUNDS"</span>);</span><br><span class="line">strings.add(<span class="string">"Lost Ark"</span>);</span><br><span class="line">strings.add(<span class="string">"Apex Legends"</span>);</span><br><span class="line">System.out.println(<span class="string">"------方法一-------"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s: strings){</span><br><span class="line">    System.out.println(s);</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"------方法二-------"</span>);</span><br><span class="line">Iterator&lt;String&gt; stringIterator = strings.iterator();</span><br><span class="line"><span class="keyword">while</span> (stringIterator.hasNext()){</span><br><span class="line">    System.out.println(stringIterator.next());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>虽然看着是两种方法，其实都是通过 iterator 迭代器来实现的。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型类和泛型接口"><a href="#泛型类和泛型接口" class="headerlink" title="泛型类和泛型接口"></a>泛型类和泛型接口</h3><ul>
<li><p>泛型类和泛型接口都一样</p>
</li>
<li><p>泛型类就是泛型定义在类上，在使用该类时，才会把类型定义下来</p>
</li>
</ul>
<h3 id="泛型的定义"><a href="#泛型的定义" class="headerlink" title="泛型的定义"></a>泛型的定义</h3><p>在类名猴子加 &lt;&gt;，在 &lt;&gt; 中的内容相当于泛型的名字</p>
<p><strong>java 中泛型标记符：</strong></p>
<ul>
<li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li>
<li><strong>T</strong> - Type（Java 类）</li>
<li><strong>K</strong> - Key（键）</li>
<li><strong>V</strong> - Value（值）</li>
<li><strong>N</strong> - Number（数值类型）</li>
<li><strong>？</strong> - 表示不确定的 java 类型 </li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&lt;T&gt;{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;E&gt; {</span><br><span class="line">    <span class="keyword">private</span> E e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>{</span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在类中定义了泛型类，此时类型是没有确定的，只有在使用时才能确定</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Box&lt;String&gt; stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">stringBox.add(<span class="string">"Java"</span>);</span><br><span class="line">Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">integerBox.add(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>泛型的确定并不是只有在使用时才确定，还有定义子类时可以确定</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleBox</span> <span class="keyword">extends</span> <span class="title class_">Box</span>&lt;Double&gt;{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>Double 类继承了 Box 类，并且指定了类型为 Double</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">DoubleBox</span> <span class="variable">doubleBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleBox</span>();</span><br><span class="line">doubleBox.add(<span class="number">10.0</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>首先定义一个泛型接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test</span>&lt;T&gt; {</span><br><span class="line">    T <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>第二步是在接口实现类确定具体的类型</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestImpl</span> <span class="keyword">implements</span> <span class="title class_">Test</span>&lt;String&gt;{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Test&lt;String&gt; stringTest = <span class="keyword">new</span> <span class="title class_">TestImpl</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">java</span> <span class="operator">=</span> stringTest.test(<span class="string">"Java"</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>每次调用方法的时候确定类型</p>
<h4 id="泛型方法的定义"><a href="#泛型方法的定义" class="headerlink" title="泛型方法的定义"></a>泛型方法的定义</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">test</span><span class="params">(T t)</span>{</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(T t)</span>{</span><br><span class="line">    System.out.println(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="泛型方法的使用"><a href="#泛型方法的使用" class="headerlink" title="泛型方法的使用"></a>泛型方法的使用</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    System.out.println(test(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Java"</span>)));</span><br><span class="line">    test2(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Java"</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">test</span><span class="params">(T t)</span>{</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(T t)</span>{</span><br><span class="line">    System.out.println(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="泛型上限与泛型下限"><a href="#泛型上限与泛型下限" class="headerlink" title="泛型上限与泛型下限"></a>泛型上限与泛型下限</h3><p>在特特定的情况下，需要对泛型做一定的限制，所以有了泛型的上限和泛型下限</p>
<p>格式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;? extends 具体的类型&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>首先创建一个类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再创建一个类继承 Person 类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    ArrayList&lt;Person&gt; people = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    people.add(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line">    students.add(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line">    test(people);</span><br><span class="line">    test(students);</span><br><span class="line">    test2(people);</span><br><span class="line">    test2(students);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;? extends Person&gt; list)</span>{</span><br><span class="line">    System.out.println(list.toString());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(List&lt;? <span class="built_in">super</span> Student&gt; list)</span>{</span><br><span class="line">    System.out.println(list.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在测试方法 test 中，对 List 的泛型做了限制，test 的参数类型 List 的元素只能是 Person 或者继承 Person 的对象，所以在 list.add (1) 出会发生错误，因为不符合 test () 的泛型，而 people 和 students 都符合，所以这里的代码不会出现异常，这就是泛型上限。</p>
<p>在 test2 () 中，对泛型做了限制，List 的元素只能是 Student 或者 Student 的父类，people 和 students 分别是 Person 对象和 Student 对象，所以符合 test2 () 的条件，这就是泛型下限。</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="Map集合的概述"><a href="#Map集合的概述" class="headerlink" title="Map集合的概述"></a>Map 集合的概述</h3><p>Map 接口是双列集合的顶层接口</p>
<p>Map 接口的定义如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>Map 的特征有如下</p>
<ul>
<li>存储数据必须包含 key 和 value</li>
<li>key 和 value 在 Map 集合中一一对应</li>
<li> key 在 Map 中不会重复</li>
</ul>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 的特征如下</p>
<ul>
<li>底层数据结构是哈希表</li>
<li>存储元素的顺序和遍历取出来的顺序不一定一样</li>
<li> key 不可重复</li>
</ul>
<h3 id="HashMap的创建"><a href="#HashMap的创建" class="headerlink" title="HashMap的创建"></a>HashMap 的创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; stringMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="HashMap的常用方法"><a href="#HashMap的常用方法" class="headerlink" title="HashMap的常用方法"></a>HashMap 的常用方法</h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">返回类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> put(key,value)</td>
<td align="left">value</td>
<td> 添加键值对 (key-value)，如果 key 不存在则添加，如果 key 存在，则更新，添加时返回 null，更新时返回修改的值</td>
</tr>
<tr>
<td align="left"> get(key)</td>
<td align="left">value</td>
<td> 通过 key 获取 value</td>
</tr>
<tr>
<td align="left">remove(key)</td>
<td align="left">value</td>
<td> 删除 Map 中的元素，返回被删除的内容</td>
</tr>
<tr>
<td align="left"> containsKey(key)</td>
<td align="left">boolean</td>
<td> 判断 key 是否存在</td>
</tr>
<tr>
<td align="left"> size()</td>
<td align="left">int</td>
<td> 返回 Map 中的键和值的对数</td>
</tr>
<tr>
<td align="left"> clear()</td>
<td align="left">void</td>
<td> 清空 Map 中的元素 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; stringMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">System.out.println(stringMap.put(<span class="string">"a"</span>, <span class="string">"A"</span>));        <span class="comment">//null</span></span><br><span class="line">System.out.println(stringMap.put(<span class="string">"a"</span>, <span class="string">"Apple"</span>));    <span class="comment">//A</span></span><br><span class="line">System.out.println(stringMap.get(<span class="string">"a"</span>));     <span class="comment">//Apple</span></span><br><span class="line">System.out.println(stringMap.remove(<span class="string">"a"</span>));      <span class="comment">//Apple</span></span><br><span class="line">System.out.println(stringMap.containsKey(<span class="string">"a"</span>));     <span class="comment">//false</span></span><br><span class="line">stringMap.put(<span class="string">"b"</span>,<span class="string">"B"</span>);</span><br><span class="line">System.out.println(stringMap.size());       <span class="comment">//1</span></span><br><span class="line">System.out.println(stringMap.toString());       <span class="comment">//{b=B}</span></span><br><span class="line">stringMap.clear();</span><br><span class="line">System.out.println(stringMap.toString());       <span class="comment">//{}</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="HashMap的遍历"><a href="#HashMap的遍历" class="headerlink" title="HashMap的遍历"></a>HashMap 的遍历</h3><p>第一种方法是通过 entrySet 方法获取一个 Set 集合，集合中存放这 Entry 对象，通过对象可以获取到里面的键值对。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; gameMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">gameMap.put(<span class="number">1</span>,<span class="string">"CSGO"</span>);</span><br><span class="line">gameMap.put(<span class="number">2</span>,<span class="string">"Dota 2"</span>);</span><br><span class="line">gameMap.put(<span class="number">3</span>,<span class="string">"PUBG"</span>);</span><br><span class="line">gameMap.put(<span class="number">4</span>,<span class="string">"Apex"</span>);</span><br><span class="line">gameMap.put(<span class="number">5</span>,<span class="string">"Lost Ark"</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = gameMap.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : entries) {</span><br><span class="line">    System.out.println(entry.getKey()+<span class="string">":"</span>+entry.getValue());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>第二中方法是 keySet 方法，返回一个 Set 集合，返回的是 Map 中 key 的值。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; gameMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">gameMap.put(<span class="number">1</span>,<span class="string">"CSGO"</span>);</span><br><span class="line">gameMap.put(<span class="number">2</span>,<span class="string">"Dota 2"</span>);</span><br><span class="line">gameMap.put(<span class="number">3</span>,<span class="string">"PUBG"</span>);</span><br><span class="line">gameMap.put(<span class="number">4</span>,<span class="string">"Apex"</span>);</span><br><span class="line">gameMap.put(<span class="number">5</span>,<span class="string">"Lost Ark"</span>);</span><br><span class="line">Set&lt;Integer&gt; integers = gameMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer key : integers) {</span><br><span class="line">    System.out.println(key+<span class="string">":"</span>+gameMap.get(key));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>Java 文件类以抽象的方式代表文件名和目录路径名。该类主要用于文件和目录的创建、文件的查找和文件的删除等。</p>
<p>File 对象代表磁盘中实际存在的文件和目录。通过以下构造方法创建一个 File 对象。</p>
<p>通过给定的父抽象路径名和子路径名字符串创建一个新的 File 实例。</p>
<h3 id="创建对象-4"><a href="#创建对象-4" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO\\file.txt"</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO"</span>, <span class="string">"file.txt"</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO"</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2, <span class="string">"file.txt"</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>通过全路径和父子路径来创建 File 对象</p>
<h3 id="常用方法-12"><a href="#常用方法-12" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">返回类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> createNewFile()</td>
<td align="left">boolean</td>
<td> 创建文件，成功返回 TRUE，创建失败返回 false</td>
</tr>
<tr>
<td align="left">mkdir()</td>
<td align="left">boolean</td>
<td> 创建文件夹，只能创建一级目录</td>
</tr>
<tr>
<td align="left"> mkdirs()</td>
<td align="left">boolean</td>
<td> 创建多级文件夹</td>
</tr>
<tr>
<td align="left"> exists()</td>
<td align="left">boolean</td>
<td> 判断是否存在</td>
</tr>
<tr>
<td align="left"> isFile()</td>
<td align="left">boolean</td>
<td> 判断是否是文件</td>
</tr>
<tr>
<td align="left"> isDirectory()</td>
<td align="left">boolean</td>
<td> 判断是否是文件夹</td>
</tr>
<tr>
<td align="left"> delete()</td>
<td align="left">boolean</td>
<td> 删除文件或者文件夹，删除文件夹是文件夹必须为空</td>
</tr>
<tr>
<td align="left"> length()</td>
<td align="left">long</td>
<td> 返回文件的大小，对于文件夹无意义</td>
</tr>
<tr>
<td align="left"> getName()</td>
<td align="left">String</td>
<td> 获取文件名</td>
</tr>
<tr>
<td align="left"> getParentFile()</td>
<td align="left">File</td>
<td> 获取父级目录对象</td>
</tr>
<tr>
<td align="left"> getAbsoluteFile()</td>
<td align="left">File</td>
<td> 获取绝对路径 </td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO\\test.txt"</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();     <span class="comment">//创建成功返回TRUE，创建失败返回false</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO\\test"</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdir</span> <span class="operator">=</span> dir.mkdir();        <span class="comment">//创建文件夹，只能创建直系子目录或者文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dirs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO\\a\\b"</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdirs</span> <span class="operator">=</span> dirs.mkdirs();     <span class="comment">//创建多级文件夹，返回是否创建成功</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> dirs.exists();     <span class="comment">//判断文件夹或者文件是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isFile</span> <span class="operator">=</span> file.isFile();     <span class="comment">//判断是否是一个文件</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDirectory</span> <span class="operator">=</span> dir.isDirectory();        <span class="comment">//判断是否是文件夹</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">delete</span> <span class="operator">=</span> dir.delete();      <span class="comment">//删除一个空文件夹，这个文件夹必须是空文件夹</span></span><br><span class="line"><span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> file.length();        <span class="comment">//获取文件的大小，对文件夹无意义</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();       <span class="comment">//获取文件的文件名</span></span><br><span class="line"><span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> file.getParentFile();     <span class="comment">//获取父级目录的对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">absoluteFile</span> <span class="operator">=</span> file.getAbsoluteFile();     <span class="comment">//获取文件的绝对路径</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\Users\\haiba\\Desktop\\Java\\IO"</span>);</span><br><span class="line">File[] files = file.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file1 : files) {</span><br><span class="line">    System.out.println(file1);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>通过 listFiles () 方法获取当前目录下的所有文件和文件夹对象，但对于当前对象是文件时无意义，返回 null</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getExtensionName</span><span class="params">(File file)</span>{</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">    <span class="keyword">if</span> (fileName.lastIndexOf(<span class="string">'.'</span>) != -<span class="number">1</span> &amp;&amp; fileName.lastIndexOf(<span class="string">'.'</span>)!=<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="获取当前目录的大小"><a href="#获取当前目录的大小" class="headerlink" title="获取当前目录的大小"></a>获取当前目录的大小</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getSize</span><span class="params">(File file)</span>{</span><br><span class="line">    <span class="keyword">if</span> (file.isFile()){</span><br><span class="line">        <span class="keyword">return</span> file.length();</span><br><span class="line">    }</span><br><span class="line">    File[] children = file.listFiles();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (children!=<span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">for</span> (File child : children) {</span><br><span class="line">            size += getSize(child);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>递归计算文件夹下所有文件的大小</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>序调用自身的编程技巧称为递归（recursion），它做为一种算法在程序设计语言中广泛应用。</p>
<h3 id="递归练习——阶乘"><a href="#递归练习——阶乘" class="headerlink" title="递归练习——阶乘"></a>递归练习 —— 阶乘</h3><blockquote>
<p>  阶乘是基斯顿・卡曼于 1808 年发明的运算符号，是数学术语。</p>
<p>  一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，并且 0 的阶乘为 1。自然数 n 的阶乘写作 n!。1808 年，基斯顿・卡曼引进这个表示法。</p>
<p>  亦即 n!=1×2×3×…×(n-1)×n。阶乘亦可以递归方式定义：0!=1，n!=(n-1)!×n。</p>
</blockquote>
<p>既然已经知道了条件，那么用 Java 代码要怎么去表现呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    System.out.println(getFactorial(<span class="number">5</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getFactorial</span><span class="params">(<span class="type">int</span> f)</span>{</span><br><span class="line">    <span class="keyword">if</span> (f==<span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f * getFactorial(f-<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="递归练习——斐波那契数列"><a href="#递归练习——斐波那契数列" class="headerlink" title="递归练习——斐波那契数列"></a>递归练习 —— 斐波那契数列</h3><h4 id="什么是斐波那契数列？"><a href="#什么是斐波那契数列？" class="headerlink" title="什么是斐波那契数列？"></a>什么是斐波那契数列？</h4><blockquote>
<p>  斐波那契数列（Fibonacci sequence），又称<a href="https://baike.baidu.com/item/%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2/115896">黄金分割</a>数列，因数学家莱昂纳多・斐波那契（Leonardo Fibonacci）以兔子繁殖为例子而引入，故又称为 “兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、…… 在数学上，斐波那契数列以如下被以递推的方法定义：<em>F</em>(0)=0，<em>F</em>(1)=1, <em>F</em>(n)=<em>F</em>(n - 1)+<em>F</em>(n - 2)（<em>n</em> ≥ 2，<em>n</em> ∈ N*）在现代物理、准<a href="https://baike.baidu.com/item/%E6%99%B6%E4%BD%93%E7%BB%93%E6%9E%84/10401467">晶体结构</a>、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p>
</blockquote>
<p>既然已知递归方法定义，那么 Java 的代码实现怎么去完成呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    System.out.println(fibonacciSequence(<span class="number">20</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fibonacciSequence</span><span class="params">(<span class="type">int</span> f)</span>{</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fibonacciSequence(f - <span class="number">1</span>) + fibonacciSequence(f - <span class="number">2</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>常用类</tag>
      </tags>
  </entry>
  <entry>
    <title>【整活】KFC 疯狂星期四，V50，Java 版</title>
    <url>/eeda196fc6e3/</url>
    <content><![CDATA[<p>今天是星期四，也不是说多想吃 KFC，只是这氛围到……（嘘）</p>
<p>那就整个 KFC 疯四异常吧，来小亮给他整个活，艹，走，忽略，ጿ ኈ ቼ ዽ ጿ</p>
<span id="more"></span>

<p>自定义异常其实很简单，新建一个类，继承 Exception，再对方法进行重新</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFCException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFCException</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>疯四购买 KFC 需要有购买的人，所以创建一个 Person 类，在里面定义一个字段存储余额。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">double</span> balance)</span> {</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> {</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再创建一个 KFC 类，并且写一个 pay 的成员方法和一个购买黄金鸡块的方法，在支付订单的方法中抛出 KFC 疯四异常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFC</span> {</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFC</span><span class="params">(<span class="type">double</span> price)</span> {</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购买黄金鸡块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payGoldenChickenNuggets</span><span class="params">(<span class="type">int</span> num)</span>{</span><br><span class="line">        <span class="built_in">this</span>.price += num * <span class="number">20</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付账单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> kfc 购买的KFC订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> me  购买的人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KFCException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(KFC kfc, Person me)</span> <span class="keyword">throws</span> KFCException {</span><br><span class="line">        <span class="keyword">if</span> (me.getBalance()&lt;kfc.price){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KFCException</span>(<span class="string">"KFC Crazy Thursday,But balance is insufficient, So you need V me 50"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>准备工作都好了，买 KFC 去咯</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrazyThursday</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">me</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFC</span>();</span><br><span class="line">        kfc.payGoldenChickenNuggets(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            kfc.pay(kfc,me);</span><br><span class="line">        } <span class="keyword">catch</span> (KFCException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在这里我们创建了一个 Person 类 me，通过全参构造设置 me 的余额是 0，me 去到 KFC 买了一份黄金鸡块后去 pay (付款)，但是 me 的余额为 0，小于订单的价格，所以异常就产生了。</p>
<p><img src="/./assets/6EDDF7096A87A8721C1D32376D8ADC1D.png" alt="6EDDF7096A87A8721C1D32376D8ADC1D"></p>
<p>哭惹，我的 KFC 黄金鸡块</p>
<p>忍一时，越想越气，退一步，越想越亏，到底怎么才能让 me 买到黄金鸡块呢？</p>
<p>懂了，V 我 50！</p>
<p>所以，需要在 Person 类中加一个方法 v50 获得 50 块</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">v50</span><span class="params">(Person me)</span> {</span><br><span class="line">    me.balance += <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">this</span>.balance -= <span class="number">50</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrazyThursday</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">me</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">88888888</span>);</span><br><span class="line">        you.v50(me);</span><br><span class="line">        <span class="type">KFC</span> <span class="variable">kfc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFC</span>();</span><br><span class="line">        kfc.payGoldenChickenNuggets(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            kfc.pay(kfc,me);</span><br><span class="line">        } <span class="keyword">catch</span> (KFCException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这次在去 KFC 前 me 先找到 you，让 you V 了我 50，你慷慨解囊，从 88888888 的余额中 V 了我 50，所以我的余额就从 0 变成了 50，在余额有 50 的情况下再去 KFC 点一份黄金鸡块，就可以成功支付了。</p>
<p><img src="/./assets/8A446FAB91FE1A02F2F2773C5A5F0D10.png" alt="8A446FAB91FE1A02F2F2773C5A5F0D10"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
        <tag>整活</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 学习笔记</title>
    <url>/e426748e2974/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，免除了所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>
<span id="more"></span>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="1、Maven加载依赖"><a href="#1、Maven加载依赖" class="headerlink" title="1、Maven加载依赖"></a>1、Maven 加载依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2、使用XML构建SqlSessionFactory"><a href="#2、使用XML构建SqlSessionFactory" class="headerlink" title="2、使用XML构建SqlSessionFactory"></a>2、使用 XML 构建 SqlSessionFactory</h3><p>在 resource 目录下创建 mybatis-config.xml 文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${driver}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${url}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${username}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改相关的参数，以确保能连接上数据库</p>
<h3 id="3、新建接口"><a href="#3、新建接口" class="headerlink" title="3、新建接口"></a>3、新建接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> {</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>定义相关的接口，在 resource 目录下创建与其全类名相同的 XML 文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.haibara.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #{id};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>namespace 是接口的全路径</p>
<p>查询使用的是 select 标签</p>
<p>resultType 是结果的类型</p>
<p>id 是接口中的方法名</p>
<h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">// 读取配置文件，创建工厂对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="comment">// 通过工厂对象获取SQLSession（理解为数据库连接池）</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line"><span class="comment">// 通过工厂对象获取UserDao的实现对象</span></span><br><span class="line"><span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"><span class="comment">// 测试第一个方法</span></span><br><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span> (User user : all) {</span><br><span class="line">    System.out.println(user);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 测试第二个方法</span></span><br><span class="line"><span class="type">User</span> <span class="variable">userById</span> <span class="operator">=</span> mapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(userById);</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="idea模板"><a href="#idea模板" class="headerlink" title="idea模板"></a>idea 模板</h3><p>为了方便开发，可以在 idea 中添加 mybatis 的配置文件模板到 idea 中</p>
<p><img src="/./assets/6D89F2FA1F8BA05398798F457A52610D.png" alt="6D89F2FA1F8BA05398798F457A52610D"></p>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><h3 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h3><h4 id="1、参数为基础数据类型的情况"><a href="#1、参数为基础数据类型的情况" class="headerlink" title="1、参数为基础数据类型的情况"></a>1、参数为基础数据类型的情况</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">User <span class="title function_">findUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>根据 ID 查询只需要传入一个参数</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> #{id};</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、参数并非基础数据类型的情况"><a href="#2、参数并非基础数据类型的情况" class="headerlink" title="2、参数并非基础数据类型的情况"></a>2、参数并非基础数据类型的情况</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">User <span class="title function_">findByUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.haibara.pojo.User"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #{id} and username = #{username};</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>但由于可以自动识别参数类型，所以 parameterType 可以省略</p>
<h4 id="3、参数为Map时"><a href="#3、参数为Map时" class="headerlink" title="3、参数为Map时"></a>3、参数为 Map 时</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">User <span class="title function_">findByMap</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>当参数为 Map 时，依旧是同样的写法</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByMap"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #{id} and username = #{username}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(<span class="string">"id"</span>,<span class="number">1</span>);</span><br><span class="line">hashMap.put(<span class="string">"username"</span>,<span class="string">"小明"</span>);</span><br><span class="line">hashMap.put(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">byMap</span> <span class="operator">=</span> mapper.findByMap(hashMap);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>在多个参数时，在定义方法时需要通过注解对参数命名</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">User <span class="title function_">findByUsernameAndPassword</span><span class="params">(<span class="meta">@Param("username")</span> String username, <span class="meta">@Param("password")</span> String password)</span>;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUsernameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where username = #{username} and password = #{password}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>SqlSessionFactory 是一个 SqlSession 的工厂类，主要用来获取 SqlSession 对象</p>
<p>成员方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">SqlSession <span class="title function_">openSession</span><span class="params">()</span>;<span class="comment">//非自动提交</span></span><br><span class="line">SqlSession <span class="title function_">openSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span>;<span class="comment">//自动提交</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>SqlSession 提供了在数据库执行 SQL 命令所需要的所有方法，它提供了事务的相关操作</p>
<p>成员方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span>;<span class="comment">//获取Mapper对象</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>;<span class="comment">//提交事务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span>;<span class="comment">//回滚事务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;<span class="comment">//释放资源</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="MyBatis实现增删查改"><a href="#MyBatis实现增删查改" class="headerlink" title="MyBatis实现增删查改"></a>MyBatis 实现增删查改</h2><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>在接口中新增方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在 XML 映射文件中编写 SQL 语句</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span>&gt;</span></span><br><span class="line">    insert into user values (null, #{username},#{password})</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>在测试类中调用测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUsername(<span class="string">"萧炎"</span>);</span><br><span class="line">user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">mapper.addUser(user);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>在接口中添加方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在 XML 映射文件中添加对应的映射</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.haibara.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>调用方法测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">System.out.println(all.toString());</span><br></pre></td></tr></tbody></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在接口中添加相关的方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updatePasswordById</span><span class="params">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在 XML 映射文件添加映射</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updatePasswordById"</span>&gt;</span></span><br><span class="line">    update user set password=#{password} where id =#{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>在测试类中测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">2</span>);</span><br><span class="line">user.setPassword(<span class="string">"abcdefg"</span>);</span><br><span class="line">mapper.updatePasswordById(user);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在接口中添加相关的方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>在 XML 映射文件添加映射</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span>&gt;</span></span><br><span class="line">    delete from user where id=#{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>在测试类中测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">mapper.deleteUserById(<span class="number">8</span>);</span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>在 mybatis-config.xml 中可以通过 properties 标签读取 properties 文件内容</p>
<p>在资源文件夹中新建一个 jdbc.properties 的文件</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql:///mydb?characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure>

<p>将 jdbc 连接数据库的配置写到 properties 文件中</p>
<p>在 mybatis-comfig.xml 中的 configuration 标签下的最前边添加一个 properties 标签，并且指定 jdbc.properties 的文件路径</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>因为 jdbc 的配置已经在 jdbc.properties 文件中添加了，所以在 mybatis-config.xml 中就可以换一种方式写配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常用类之 IO</title>
    <url>/f78d26d7f1e5/</url>
    <content><![CDATA[<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</p>
<p>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</p>
<p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p>
<p>Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</p>
<p>但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。</p>
<span id="more"></span>

<h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次读取一个字节"><a href="#一次读取一个字节" class="headerlink" title="一次读取一个字节"></a>一次读取一个字节</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> stream.read();</span><br><span class="line">stream.close();</span><br><span class="line">System.out.println(read);</span><br></pre></td></tr></tbody></table></figure>

<p>当读到 - 1 时则表示读取结束了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="keyword">while</span> ((b=stream.read()) != -<span class="number">1</span>){</span><br><span class="line">    System.out.println(b);</span><br><span class="line">}</span><br><span class="line">stream.close();</span><br></pre></td></tr></tbody></table></figure>

<p>循环读取全部内容</p>
<h3 id="一次读一个字节数组"><a href="#一次读一个字节数组" class="headerlink" title="一次读一个字节数组"></a>一次读一个字节数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">stream.read(bytes);</span><br><span class="line">System.out.println(Arrays.toString(bytes));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次读完文件"><a href="#一次读完文件" class="headerlink" title="一次读完文件"></a>一次读完文件</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len=stream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">    System.out.println(len);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">}</span><br><span class="line">stream.close();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a>资源释放</h3><p>解决读取期间出现异常如何正确释放资源</p>
<h4 id="jdk7之前"><a href="#jdk7之前" class="headerlink" title="jdk7之前"></a>jdk7 之前</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象并且初始化</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">//更新stream内容</span></span><br><span class="line">    stream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=stream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">    }</span><br><span class="line">}<span class="keyword">catch</span> (IOException ioException){</span><br><span class="line">    ioException.printStackTrace();</span><br><span class="line">}<span class="keyword">finally</span> {</span><br><span class="line">    <span class="comment">//释放资源，在释放资源时仍有可能会有IO异常，继续tyr catch</span></span><br><span class="line">    <span class="comment">//当stream为空时关闭资源会导致空指针异常，所以在关闭前需要确实要释放的对象是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!Objects.isNull(stream)){</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            stream.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="jdk7版本"><a href="#jdk7版本" class="headerlink" title="jdk7版本"></a>jdk7 版本</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//在try的括号中进行初始化，如果在发生异常时会默认执行close</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>))) {</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=stream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//无需释放资源，写不写close都会释放资源</span></span><br><span class="line">    stream.close();</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>jdk7 版本是如何做到自动释放资源的呢？下面通过代码来讲解一下。</p>
<p>在代码 <code>try(FileInputStream stream = new FileInputStream(new File("C:\\JavaIO\\a.txt")))</code> 中，创建的对象 FileInputStream 是继承了 InputStream 的</p>
<p><img src="/./assets/B7417AD408CC6B084686DEDCD2A094CA.png" alt="B7417AD408CC6B084686DEDCD2A094CA"></p>
<p>而在 InputStream 中实现了了 Closeable 接口</p>
<p><img src="/./assets/03BB929FFF67FB9B91E4F4A84723C3E9.png" alt="03BB929FFF67FB9B91E4F4A84723C3E9"></p>
<p>在 Closeable 中定义了一个 close 方法，该方法继承于 AutoCloseable</p>
<p><img src="/./assets/365F812A7EB00CE607D5F5CC81BFB44D.png" alt="365F812A7EB00CE607D5F5CC81BFB44D"></p>
<p>因为 FileInputStream 继承了 InputStream，而 InputStream 实现了 Closeable 接口，所以在 FileInputStream 产生异常时就会执行它的 close 方法。</p>
<p>通过自己写代码来重现一下这个过程</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Res</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        System.out.println(<span class="string">"资源已经释放"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Res</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Res</span>()) {</span><br><span class="line"></span><br><span class="line">    }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="jdk9版本"><a href="#jdk9版本" class="headerlink" title="jdk9版本"></a>jdk9 版本</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">Res</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Res</span>();</span><br><span class="line">    <span class="keyword">try</span>(res) {</span><br><span class="line">        </span><br><span class="line">    }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在 jdk9 中在 jdk7 的基础上做了优化，定义不一定要放到 try 中，只需要讲对象放在 try () 中就可以实现自动执行 close 方法的效果</p>
<h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><h3 id="对象创建-1"><a href="#对象创建-1" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:\\JavaIO\\b.txt"</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\b.txt"</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次写一个字节"><a href="#一次写一个字节" class="headerlink" title="一次写一个字节"></a>一次写一个字节</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:\\JavaIO\\b.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>(fos) {</span><br><span class="line">    <span class="comment">// 传字符也可以是因为自动转型</span></span><br><span class="line">    fos.write(<span class="string">'a'</span>);</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次写一个字节数组"><a href="#一次写一个字节数组" class="headerlink" title="一次写一个字节数组"></a>一次写一个字节数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:\\JavaIO\\b.txt"</span>);</span><br><span class="line">    <span class="type">byte</span>[] bytes;</span><br><span class="line">    <span class="keyword">try</span>(fos) {</span><br><span class="line">        bytes = <span class="string">"abc"</span>.getBytes();</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">    }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="文件续写"><a href="#文件续写" class="headerlink" title="文件续写"></a>文件续写</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//在FileOutputStream中加true说明是续写</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:\\JavaIO\\b.txt"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">try</span>(fos) {</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="string">"defgh"</span>.getBytes();</span><br><span class="line">    fos.write(bytes);</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="文件的复制"><a href="#文件的复制" class="headerlink" title="文件的复制"></a>文件的复制</h2><p>文件的复制就是循环的循环读写</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File from, File to)</span> <span class="keyword">throws</span> IOException{</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(from);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(to);</span><br><span class="line">    <span class="keyword">try</span>(inputStream;outputStream) {</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=inputStream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>定义一个方法，循环读取旧文件的内容并且写到新文件中</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">File</span> <span class="variable">oldFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\file.mp3"</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\newFile.mp3"</span>);</span><br><span class="line">    copyFile(oldFile,newFile);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/C7EF56CC8329B8524973B05C9D0567F0.png" alt="C7EF56CC8329B8524973B05C9D0567F0"></p>
<h2 id="文件夹的复制"><a href="#文件夹的复制" class="headerlink" title="文件夹的复制"></a>文件夹的复制</h2><p>从简单到困难，先写一个不考虑子文件夹递归的复制文件操作</p>
<h3 id="不考虑递归版本"><a href="#不考虑递归版本" class="headerlink" title="不考虑递归版本"></a>不考虑递归版本</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">File</span> <span class="variable">fromDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\本地素材库\\2022-07-19"</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">toDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\本地素材库\\2022年07月19日"</span>);</span><br><span class="line">    copyFolderFile(fromDir,toDir);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//不考虑子文件夹版本</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFolderFile</span><span class="params">(File from,File to)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    File[] files = from.listFiles();</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (File file : files) {</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()){</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">        <span class="type">File</span> <span class="variable">oldFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(from, file.getName());</span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(to, file.getName());</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(oldFile);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(newFile);</span><br><span class="line">        <span class="keyword">try</span>(fis;fos) {</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/D53A23F4F4C21ADE91A3D7A1443BFEF5.png" alt="D53A23F4F4C21ADE91A3D7A1443BFEF5"></p>
<p>源文件夹共有 148 个文件，对该文件夹进行复制后，所以文件都复制到了目标文件夹</p>
<p><img src="/./assets/B8CC3BA2184A2A9C9BF5523C409F70B4.png" alt="B8CC3BA2184A2A9C9BF5523C409F70B4"></p>
<h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">File</span> <span class="variable">fromDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\本地素材库\\2022-07-19"</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">toDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\本地素材库\\2022年07月19日"</span>);</span><br><span class="line">    copyAllFile(fromDir,toDir);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑递归所以文件包括子文件夹的版本</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyAllFile</span><span class="params">(File from,File to)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="comment">//获取目录下的所以文件和目录</span></span><br><span class="line">    File[] files = from.listFiles();</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="comment">//遍历文件和目录</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) {</span><br><span class="line">        <span class="comment">//判断是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (file.isFile()){</span><br><span class="line">            <span class="comment">//创建输入流和输出流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(to, file.getName()));</span><br><span class="line">            <span class="comment">//进行自动关闭资源</span></span><br><span class="line">            <span class="keyword">try</span>(inputStream;outputStream) {</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="comment">//写文件操作</span></span><br><span class="line">                <span class="keyword">while</span> ((len=inputStream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">                    outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//递归复制子目录，创建目标目录的子文件夹</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">newDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(to, file.getName());</span><br><span class="line">            <span class="comment">//判断子文件夹是否存在，不存在则创建新的</span></span><br><span class="line">            <span class="keyword">if</span> (!newDir.exists()){</span><br><span class="line">                newDir.mkdir();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//递归复制文件，将当前目录和创建好的目标目录传递进去进行递归</span></span><br><span class="line">            copyAllFile(file,newDir);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><h3 id="对象创建-2"><a href="#对象创建-2" class="headerlink" title="对象创建"></a>对象创建</h3><p>文件的目标不可以是文件夹，否则会产生异常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\file.mp3"</span>);</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\file.mp3"</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次读取一个字节-1"><a href="#一次读取一个字节-1" class="headerlink" title="一次读取一个字节"></a>一次读取一个字节</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>(fileReader) {</span><br><span class="line">    System.out.println((<span class="type">char</span>)fileReader.read());</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>(fileReader) {</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span> ((ch=fileReader.read())!=-<span class="number">1</span>){</span><br><span class="line">        System.out.println((<span class="type">char</span>) ch);</span><br><span class="line">    }</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="一次读一个数组"><a href="#一次读一个数组" class="headerlink" title="一次读一个数组"></a>一次读一个数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>)) {</span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=fileReader.read(chars))!=-<span class="number">1</span>){</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>需要注意的是需要使用 char [] 接收内容</p>
<h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><h3 id="对象创建-3"><a href="#对象创建-3" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>(fw) {</span><br><span class="line">    <span class="comment">//写入内存缓冲区</span></span><br><span class="line">    fw.write(<span class="string">"12345678910"</span>);</span><br><span class="line">    <span class="comment">//从内容缓冲区写到文件中</span></span><br><span class="line">    fw.flush();</span><br><span class="line">}<span class="keyword">catch</span> (IOException e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在写操作中需要从缓冲区写到文件的操作，也就是需要通过 flush 写入文件。</p>
<h3 id="复制文本文件"><a href="#复制文本文件" class="headerlink" title="复制文本文件"></a>复制文本文件</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    copyText(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\斗破苍穹.txt"</span>),<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"C:\\JavaIO\\Break through the sky.txt"</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyText</span><span class="params">(File from, File to)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(from);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(to);</span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">try</span>(reader;writer) {</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=reader.read(chars))!=-<span class="number">1</span>){</span><br><span class="line">            writer.write(chars,<span class="number">0</span>,len);</span><br><span class="line">            writer.flush();</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>其实跟字节流的读写相比，其实差得并不算多。</p>
<h3 id="设置字符流编码表"><a href="#设置字符流编码表" class="headerlink" title="设置字符流编码表"></a>设置字符流编码表</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(from, StandardCharsets.UTF_8);</span><br></pre></td></tr></tbody></table></figure>

<h2 id="高速缓冲流"><a href="#高速缓冲流" class="headerlink" title="高速缓冲流"></a>高速缓冲流</h2><h3 id="对象创建-4"><a href="#对象创建-4" class="headerlink" title="对象创建"></a>对象创建</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"C:\\JavaIO\\a.txt"</span>));</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\Break through the sky.txt"</span>));</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"C:\\JavaIO\\Break through the sky.txt"</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="高速缓冲读写对比"><a href="#高速缓冲读写对比" class="headerlink" title="高速缓冲读写对比"></a>高速缓冲读写对比</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\Break through the sky.txt"</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"C:\\JavaIO\\斗破苍穹.txt"</span>);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"C:\\JavaIO\\Break through the sky.txt"</span>));</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"C:\\JavaIO\\斗破苍穹.txt"</span>));</span><br><span class="line">    copyFile(fr,fw);</span><br><span class="line">    bufferCopyFile(br,bw);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(FileReader fr,FileWriter fw)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=fr.read(chars))!=-<span class="number">1</span>){</span><br><span class="line">        fw.write(chars,<span class="number">0</span>,len);</span><br><span class="line">    }</span><br><span class="line">    fr.close();</span><br><span class="line">    fw.close();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">"普通复制运行时间："</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bufferCopyFile</span><span class="params">(BufferedReader br,BufferedWriter bw)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>){</span><br><span class="line">        bw.write(line);</span><br><span class="line">        bw.newLine();</span><br><span class="line">    }</span><br><span class="line">    br.close();</span><br><span class="line">    bw.close();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">"高速缓存运行时间："</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/C5FE2EFEE783C456EF4F03D9F0AB4DB2.png" alt="C5FE2EFEE783C456EF4F03D9F0AB4DB2"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Hexo 博客插件安装记录</title>
    <url>/e23a137265c4/</url>
    <content><![CDATA[<p>主要是做个备忘录的作用</p>
<span id="more"></span>

<h3 id="如何查看已安装的插件"><a href="#如何查看已安装的插件" class="headerlink" title="如何查看已安装的插件"></a>如何查看已安装的插件</h3><figure class="highlight cmd"><table><tbody><tr><td class="code"><pre><span class="line">Npm ls -dept <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2022-07-14"><a href="#2022-07-14" class="headerlink" title="2022-07-14"></a>2022-07-14</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td> [hexo-deployer-git](<a href="https://github.com/hexojs/hexo-deployer-git">GitHub - hexojs/hexo-deployer-git： Git deployer plugin for Hexo.</a>)</td>
<td> 推送到 git</td>
<td>3.0.0</td>
</tr>
<tr>
<td>[hexo-filter-emoji](<a href="https://github.com/next-theme/hexo-filter-emoji">GitHub - next-theme/hexo-filter-emoji: 🚀 GitHub emojis for Hexo!</a>)</td>
<td> 渲染 emoji 表情</td>
<td> 2.2.2</td>
</tr>
<tr>
<td>[hexo-filter-mathjax](<a href="https://github.com/next-theme/hexo-filter-mathjax">GitHub - next-theme/hexo-filter-mathjax: 💯 Server side MathJax renderer plugin for Hexo.</a>)</td>
<td> 数学公式的支持</td>
<td> 0.8.1</td>
</tr>
<tr>
<td>[hexo-next-exif](<a href="https://github.com/next-theme/hexo-next-exif">GitHub - next-theme/hexo-next-exif: 📷 Exif.js for NexT.</a>)</td>
<td>next 插件</td>
<td> 2.3.0</td>
</tr>
<tr>
<td>[hexo-next-fireworks](<a href="https://github.com/next-theme/hexo-next-fireworks">GitHub - next-theme/hexo-next-fireworks: 💥 Fireworks animation for NexT.</a>)</td>
<td>next 主题核心</td>
<td> 1.0.2</td>
</tr>
<tr>
<td><a href="">hexo-pangu</a></td>
<td>next 主题需要安装</td>
<td> 0.2.1</td>
</tr>
<tr>
<td>[hexo-generator-searchdb](<a href="https://github.com/next-theme/hexo-generator-searchdb">GitHub - next-theme/hexo-generator-searchdb: 🔍 Seach data generator plugin for Hexo.</a>)</td>
<td> 本地搜索，next 需要</td>
<td> 1.4.0</td>
</tr>
<tr>
<td>[hexo-word-counter](<a href="https://github.com/next-theme/hexo-word-counter">GitHub - next-theme/hexo-word-counter: ⏰ Symbols count and time to read of articles for Hexo.</a>)</td>
<td> 字数统计，next 需要</td>
<td> 0.0.3</td>
</tr>
<tr>
<td>[hexo-next-three](<a href="https://github.com/next-theme/hexo-next-three">GitHub - next-theme/hexo-next-three: JavaScript 3D library for NexT.</a>)</td>
<td>next 主题</td>
<td> 8.12.1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】微信号推送不想用？为何不试试邮箱推送呢</title>
    <url>/4973acc0e85b/</url>
    <content><![CDATA[<h3 id="邮箱推送是什么？"><a href="#邮箱推送是什么？" class="headerlink" title="邮箱推送是什么？"></a>邮箱推送是什么？</h3><p>见名知意，就是通过邮箱来推送消息到另一个邮箱。因为微信公众号推送测试号的提醒貌似以及不再提醒了（不排除是手机系统问题），所以想着回归最淳朴的邮件推送。邮件推送主要用户发送定时执行的网络爬虫产生的数据，数据展示爬虫的运行情况，例如是否成功签到等等。</p>
<span id="more"></span>

<hr>
<h3 id="有什么意义呢？"><a href="#有什么意义呢？" class="headerlink" title="有什么意义呢？"></a>有什么意义呢？</h3><p>意义嘛，看个人怎么应用罢了，我罗列一下我的应用场景吧。</p>
<ul>
<li>Python 自动签到结果反馈</li>
<li> Python 爬虫出错提醒（大量、长时间的爬取数据）</li>
<li>程序执行结果反馈（大学毕设选题使用的 Python 自动抢课题，把抢到的课题反馈到邮箱）</li>
<li>实时监控数据变化（奥运会得奖牌通知并播报）</li>
<li>…………</li>
</ul>
<p>说真的，应用场景很多很多好吧，只要是你想让程序通知你知道的情况都可以使用邮箱推送。人可能会忘了一件事没来得及通知你，但程序不会，只要条件符合，它就会触发并且通知你。</p>
<hr>
<h3 id="实现原理是什么？"><a href="#实现原理是什么？" class="headerlink" title="实现原理是什么？"></a>实现原理是什么？</h3><p>其实就是登录邮箱并且使用该邮箱给指定的邮箱发邮件，就这么简单，只是把平时人工操作的步骤交给代码来执行了罢了。</p>
<hr>
<h3 id="准备邮箱"><a href="#准备邮箱" class="headerlink" title="准备邮箱"></a>准备邮箱</h3><p>首先需要准备一个邮箱用来发送邮件，并且为邮箱开通 IMAP/SMTP 登录功能</p>
<p><img src="/./assets/6E8CD7353956135BB764EEB8578695C3.png" alt="6E8CD7353956135BB764EEB8578695C3"></p>
<p><img src="/./assets/397C2EE8D0504FD977ADBABFE0D6D3B4.png" alt="397C2EE8D0504FD977ADBABFE0D6D3B4"></p>
<hr>
<p>在开启 IMAP/SMTP 登录功能后，需要为邮箱添加一个登录授权码，相当于邮箱的密码。</p>
<p><img src="/./assets/B615A31B493011E824E45B2721E5EF8A.png" alt="B615A31B493011E824E45B2721E5EF8A"></p>
<hr>
<p>在获取到授权码后，需要查看该邮箱的 SMTP 服务器地址，例如网易的 163 邮箱为 smtp.163.com</p>
<p><img src="/./assets/21D991DDC2B5CB57495BDC99EC095B30.png" alt="21D991DDC2B5CB57495BDC99EC095B30"></p>
<hr>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python 版本</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP_SSL</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMTP服务器地址</span></span><br><span class="line">host_server = <span class="string">'你的SMTP服务器地址'</span></span><br><span class="line"><span class="comment"># 需要登录的邮箱</span></span><br><span class="line">sender = <span class="string">'用来发送邮件的邮箱'</span></span><br><span class="line"><span class="comment"># 登录邮箱的授权码</span></span><br><span class="line">pwd = <span class="string">'发送邮件的邮箱授权码'</span></span><br><span class="line"><span class="comment"># 接受邮件的地址</span></span><br><span class="line">receiver = <span class="string">'需要接收邮件的邮箱地址'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">mail_title, mail_content, mail_file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        msg[<span class="string">"Subject"</span>] = Header(mail_title, <span class="string">'utf-8'</span>)</span><br><span class="line">        msg[<span class="string">"From"</span>] = sender</span><br><span class="line">        msg[<span class="string">"To"</span>] = Header(receiver, <span class="string">'utf-8'</span>)</span><br><span class="line">        msg.attach(MIMEText(mail_content, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">for</span> filenames <span class="keyword">in</span> mail_file_path:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filenames):</span><br><span class="line">                file = MIMEApplication(<span class="built_in">open</span>(filenames, <span class="string">'rb'</span>).read())</span><br><span class="line">                filename = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">'-'</span>, <span class="string">''</span>) + os.path.splitext(filenames)[-<span class="number">1</span>]</span><br><span class="line">                file.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=filename)</span><br><span class="line">                msg.attach(file)</span><br><span class="line">        smtp = SMTP_SSL(host_server)</span><br><span class="line">        smtp.login(sender, pwd)</span><br><span class="line">        smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class="line">        smtp.quit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e, datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    file_path = [<span class="string">"C:/img/1.jpg"</span>,</span><br><span class="line">                 <span class="string">"C:/img/2.jpg"</span>,</span><br><span class="line">                 <span class="string">"C:/img/3.jpg"</span>]</span><br><span class="line">    title = <span class="string">"这是标题"</span></span><br><span class="line">    content = <span class="string">"这是正文"</span></span><br><span class="line">    run(title, content, file_path)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java 版本</h4><h5 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven 依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用SMTP协议发送电子邮件</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sendEmailUtils</span> {</span><br><span class="line">    <span class="comment">// 邮件发送协议  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PROTOCOL</span> <span class="operator">=</span> <span class="string">"smtp"</span>;</span><br><span class="line">    <span class="comment">// SMTP邮件服务器  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOST</span> <span class="operator">=</span> <span class="string">"smtp.163.com"</span>;</span><br><span class="line">    <span class="comment">// SMTP邮件服务器默认端口  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="string">"25"</span>;</span><br><span class="line">    <span class="comment">// 是否要求身份认证  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">IS_AUTH</span> <span class="operator">=</span> <span class="string">"true"</span>;</span><br><span class="line">    <span class="comment">// 是否启用调试模式（启用调试模式可打印客户端与服务器交互过程时一问一答的响应消息）  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">IS_ENABLED_DEBUG_MOD</span> <span class="operator">=</span> <span class="string">"true"</span>;</span><br><span class="line">    <span class="comment">//发件人邮箱授权码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">AUTHORIZATION_CODE</span> <span class="operator">=</span> <span class="string">"发送邮箱的授权码"</span>;</span><br><span class="line">    <span class="comment">// 发件人  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">"发送邮件的邮箱"</span>;</span><br><span class="line">    <span class="comment">// 收件人  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">"接收邮件的邮箱"</span>;</span><br><span class="line">    <span class="comment">// 初始化连接邮件服务器的会话信息  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties props;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Transport</span> <span class="variable">transport</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> {  </span><br><span class="line">        props = <span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, PROTOCOL);  </span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, HOST);  </span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.port"</span>, PORT);  </span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, IS_AUTH);  </span><br><span class="line">        props.setProperty(<span class="string">"mail.debug"</span>,IS_ENABLED_DEBUG_MOD);  </span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getInstance(props, <span class="keyword">new</span> <span class="title class_">MyAuthenticator</span>());</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">			<span class="comment">// 获得Transport实例对象 </span></span><br><span class="line">			transport = session.getTransport();</span><br><span class="line">			<span class="comment">// 打开连接  </span></span><br><span class="line">			transport.connect(from, AUTHORIZATION_CODE);</span><br><span class="line">		} <span class="keyword">catch</span> (MessagingException e) {</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		}  </span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送简单的文本邮件</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTextEmail</span><span class="params">(String to, String title, String content, List&lt;String&gt; filePathList)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 创建Session实例对象  </span></span><br><span class="line">			<span class="comment">// Session session1 = Session.getDefaultInstance(props);  </span></span><br><span class="line">        	<span class="type">Session</span> <span class="variable">session1</span> <span class="operator">=</span> Session.getInstance(props, <span class="keyword">new</span> <span class="title class_">MyAuthenticator</span>());</span><br><span class="line">            <span class="comment">// 创建MimeMessage实例对象  </span></span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session1);  </span><br><span class="line">            <span class="comment">// 设置发件人  </span></span><br><span class="line">            message.setFrom(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(from));  </span><br><span class="line">            <span class="comment">// 设置邮件主题  </span></span><br><span class="line">            message.setSubject(title);</span><br><span class="line">            <span class="comment">// 设置收件人  </span></span><br><span class="line">            message.setRecipient(RecipientType.TO, <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(to));  </span><br><span class="line">            <span class="comment">// 设置发送时间  </span></span><br><span class="line">            message.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());  </span><br><span class="line">            <span class="comment">// 设置纯文本内容为邮件正文  </span></span><br><span class="line">            message.setText(content);</span><br><span class="line">            <span class="type">MimeMultipart</span> <span class="variable">mailContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMultipart</span>(<span class="string">"mixed"</span>);</span><br><span class="line">            message.setContent(mailContent);</span><br><span class="line">            <span class="keyword">if</span>(!filePathList.isEmpty()){</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filePathList.size(); i++) {</span><br><span class="line">                    <span class="comment">// 新建附件</span></span><br><span class="line">                    <span class="type">MimeBodyPart</span> <span class="variable">mimeBodyPart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeBodyPart</span>();</span><br><span class="line">                    <span class="comment">// 将附件添加到邮件中</span></span><br><span class="line">                    mailContent.addBodyPart(mimeBodyPart);</span><br><span class="line">                    <span class="comment">// 添加内容</span></span><br><span class="line">                    <span class="type">FileDataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDataSource</span>(filePathList.get(i));</span><br><span class="line">                    <span class="type">DataHandler</span> <span class="variable">dataHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataHandler</span>(source);</span><br><span class="line">                    <span class="comment">// 生成UUID</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">                    <span class="comment">// 设置文件名</span></span><br><span class="line">                    mimeBodyPart.setFileName(uuid+ source.getName().lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">                    mimeBodyPart.setDataHandler(dataHandler);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 保存并生成最终的邮件内容</span></span><br><span class="line">            message.saveChanges();  </span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 将message对象传递给transport对象，将邮件发送出去  </span></span><br><span class="line">            transport.sendMessage(message, message.getAllRecipients());</span><br><span class="line">            <span class="comment">// 关闭连接  </span></span><br><span class="line">            transport.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向邮件服务器提交认证信息</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticator</span> <span class="keyword">extends</span> <span class="title class_">Authenticator</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyAuthenticator</span><span class="params">()</span> {</span><br><span class="line">            <span class="built_in">super</span>();  </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(from, AUTHORIZATION_CODE);</span><br><span class="line">        }  </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">"C:\\img\\1.jpg"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"C:\\img\\1.jpg"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"C:\\img\\1.jpg"</span>);</span><br><span class="line">        sendTextEmail(to,<span class="string">"1"</span>,<span class="string">"2"</span>, arrayList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/./assets/9B6025B904CC4145BFDEAD5416C8A506.png" alt="9B6025B904CC4145BFDEAD5416C8A506"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>推送</tag>
        <tag>邮件推送</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 实现文字复制</title>
    <url>/a966b4c06779/</url>
    <content><![CDATA[<p>最近在修改一些前端代码时想着实现一个复制文字到剪切板的功能，但在网络上查了很多，感觉都写得很差，自己试了一下，感觉效果不行，要么就是极其复杂，最后用一行代码实现了复制文字的功能。</p>
<span id="more"></span>

<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这个方法其实有点愚蠢，但还算凑合。</p>
<p>先上代码</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> selectdom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"d"</span>);#将内容放到<span class="variable constant_">ID</span>为d的元素下</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">selectAllChildren</span>(selectdom);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">"Copy"</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>很显然，这里是通过 getSelection () 对网页内容进行选择，在选择后调用一个非常老旧 execCommand (“Copy”) 来实现的复制</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">const</span> ninput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"input"</span>);</span><br><span class="line">    ninput.<span class="property">value</span> = <span class="string">"这是要复制的内容"</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ninput)</span><br><span class="line">    ninput.<span class="title function_">select</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">"Copy"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(ninput)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>再看这段代码，可以发现，其中的核心依旧是 execCommand (“Copy”)，通过添加 dom，再将文字放入 dom 中进行选中，在执行完复制后，再将 dom 移除。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>看完上面的代码，其实都挺繁琐的，有没有更简单的方法实现呢？有，而且超级简单，直接上代码。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> t = <span class="string">"我是要复制的内容"</span>;</span><br><span class="line">navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(t).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"复制完成"</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>不过…… 当你试着将这段代码放到浏览器的控制台执行，那结果会是怎么样呢？</p>
<p><img src="/./assets/589302BB88E3EE1A3BAECB40C48B9266.png" alt="589302BB88E3EE1A3BAECB40C48B9266"></p>
<p>啊这，这是报错了啊！</p>
<p>这是因为这个接口只能通过用户去触发，而不可以通过控制台来执行，所以这代码是可以直接放到项目中运行的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 学习笔记</title>
    <url>/dbd3b6236ad0/</url>
    <content><![CDATA[<p>MySQL 是一个免费的关系型数据库，在同类产品中的占比较高。这是一篇在学习 MySQL 时的学习笔记</p>
<span id="more"></span>

<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL 分类</h2><h3 id="DQL——数据查询语句"><a href="#DQL——数据查询语句" class="headerlink" title="DQL——数据查询语句"></a>DQL—— 数据查询语句</h3><p>数据查询语言 DQL 基本结构是由 SELECT 子句，FROM 子句，WHERE<br>        子句组成的查询块：<br>                SELECT &lt;字段名表&gt;<br>                FROM &lt;表或视图名&gt;<br>                WHERE &lt;查询条件&gt;</p>
<h3 id="DML——数据操作语言"><a href="#DML——数据操作语言" class="headerlink" title="DML——数据操作语言"></a>DML—— 数据操作语言</h3><p>数据操作语言主要三种形式：insert、update 和 delete，主要是针对数据表内容进行增删改操作</p>
<h3 id="DDL——数据定义语言"><a href="#DDL——数据定义语言" class="headerlink" title="DDL——数据定义语言"></a>DDL—— 数据定义语言</h3><p>数据定义语言主要三种形式：create、alter 和 drop，主要是针对数据表结构进行增删改操作</p>
<h3 id="TCL——事务控制语言"><a href="#TCL——事务控制语言" class="headerlink" title="TCL——事务控制语言"></a>TCL—— 事务控制语言</h3><p>事务相关的主要是提交和回滚，分别是 commit 和 rollback</p>
<h3 id="DCL——数据控制语言"><a href="#DCL——数据控制语言" class="headerlink" title="DCL——数据控制语言"></a>DCL—— 数据控制语言</h3><p>数据控制语言主要是对权限的授权与撤销，分别是 grant 和 revoke</p>
<h2 id="SQL基本操作"><a href="#SQL基本操作" class="headerlink" title="SQL基本操作"></a>SQL 基本操作</h2><p>登录 MySQL</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure>

<p>查询所有数据库</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></tbody></table></figure>

<p>使用数据库</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></tbody></table></figure>

<p>查询数据库中的表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></tbody></table></figure>

<p>查看表结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></tbody></table></figure>

<p>数据源：<a href="https://asuna773.lanzoul.com/ip8Q20ai4szg">蓝奏云</a>	<a href="https://pan.baidu.com/s/14YFsGUVB8uw18TPwmu_Xhg?pwd=yyds">百度网盘</a> 提取码：yyds</p>
<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p>首先查看所有的数据库中存在的表</p>
<p><img src="/./assets/7DD7A87D89CE4420FCE677ED0C558892.png" alt="7DD7A87D89CE4420FCE677ED0C558892"></p>
<p>dept 是部门表</p>
<p>emp 是员工表</p>
<p>salgrade 是工资等级表</p>
<h3 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h3><h4 id="查询部门表所有数据"><a href="#查询部门表所有数据" class="headerlink" title="查询部门表所有数据"></a>查询部门表所有数据</h4><p><img src="/./assets/9CB4DBCF148F3D4AA8544F1EE8B2AD3C.png" alt="9CB4DBCF148F3D4AA8544F1EE8B2AD3C"></p>
<p>deptno	部门编号</p>
<p>dname	部门名称</p>
<p>loc	部门地址</p>
<h5 id="查询员工表所有数据"><a href="#查询员工表所有数据" class="headerlink" title="查询员工表所有数据"></a>查询员工表所有数据</h5><p><img src="/./assets/22A26B6CFC958A8519704470154E655E.png" alt="22A26B6CFC958A8519704470154E655E"></p>
<p>empno 员工编号</p>
<p>ename 员工名称</p>
<p>job 工作岗位</p>
<p>mgr	上级领导编号</p>
<p>hiredate	入职日期</p>
<p>sal	工资</p>
<p>comm	补助</p>
<p>deptno	部门编号</p>
<h5 id="查询工资等级表所有数据"><a href="#查询工资等级表所有数据" class="headerlink" title="查询工资等级表所有数据"></a>查询工资等级表所有数据</h5><p><img src="/./assets/61103C2E858D38B071047AEB91A06132.png" alt="61103C2E858D38B071047AEB91A06132"></p>
<p>grade	工资等级</p>
<p>losal	最低工资</p>
<p>hisal	最高工资</p>
<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p>不看表数据只看表结构</p>
<p><img src="/./assets/AFCB04AA9CBC68462ACF4BC7B257EBF3.png" alt="AFCB04AA9CBC68462ACF4BC7B257EBF3"></p>
<h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL 常用命令</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">exit;	退出</span><br><span class="line">quit;	退出</span><br><span class="line">select version();	MySQL版本</span><br><span class="line">select database();	当前使用的数据库</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/E49C16815B397F352E9561FA71820219.png" alt="E49C16815B397F352E9561FA71820219"></p>
<h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select 字段名 from 表名;</span><br></pre></td></tr></tbody></table></figure>

<p>select 和 from 是关键字，字段名和表名都是标识符；</p>
<p><strong>强调</strong></p>
<p>SQL 语句以 “;” 结尾</p>
<p>MySQL 不区分大小写</p>
<h3 id="1查询部门名称"><a href="#1查询部门名称" class="headerlink" title="1	查询部门名称"></a>1	查询部门名称</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select dname from dept;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/164802646CE0B2838BBAF6D89CC71142.png" alt="164802646CE0B2838BBAF6D89CC71142"></p>
<h3 id="2查询两个字段怎么办"><a href="#2查询两个字段怎么办" class="headerlink" title="2	查询两个字段怎么办"></a>2	查询两个字段怎么办</h3><p>使用逗号隔开</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,dname from dept;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/289368C20C5AA1E6913C5C692F4CD155.png" alt="289368C20C5AA1E6913C5C692F4CD155"></p>
<h3 id="3查询所有字段"><a href="#3查询所有字段" class="headerlink" title="3	查询所有字段"></a>3	查询所有字段</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select * from dept;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/4A2B60D8EFBA498DE1C4C1A514092A50.png" alt="4A2B60D8EFBA498DE1C4C1A514092A50"></p>
<p>缺点：效率低、可读性差</p>
<h3 id="4给查询的列起别名"><a href="#4给查询的列起别名" class="headerlink" title="4	给查询的列起别名"></a>4	给查询的列起别名</h3><p><img src="/./assets/28313D74B36AB0B73F5017DE3293AD1D.png" alt="28313D74B36AB0B73F5017DE3293AD1D"></p>
<p>只是将显示的显示结果列明显示出来，并不会修改原表数据</p>
<p>select 永远不会修改操作</p>
<p>思考：as 关键字可以省略吗？</p>
<p>实践：</p>
<p><img src="/./assets/3B82B2D1A45E754B6F87C92A4468BA07.png" alt="3B82B2D1A45E754B6F87C92A4468BA07"></p>
<p>根据实践可得，as 关键字可以省略，当别名中需要有空格时，别名使用单引号引起来</p>
<p><strong>注意：</strong> MySQL 语句中单引号才是最符合语法的，不推荐双引号，在 Oracle 中使用双引号是非法的。</p>
<p><strong>在此强调：</strong> 单引号是正统，双引号是异端（必须铲除！）</p>
<h3 id="5计算员工的年薪"><a href="#5计算员工的年薪" class="headerlink" title="5	计算员工的年薪"></a>5	计算员工的年薪</h3><p>计算年薪则是 sal 字段乘以 12</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,sal*12 as '年薪' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/EACE0910D39F537220A0C7A1C98E8BE0.png" alt="EACE0910D39F537220A0C7A1C98E8BE0"></p>
<p><strong>注意：</strong> 1、字段名可以参与数学运算</p>
<p>​			2、别命中有中文需要用单引号引起来，</p>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="什么是条件查询"><a href="#什么是条件查询" class="headerlink" title="什么是条件查询"></a>什么是条件查询</h3><p>很显然，条件查询是查询符合条件的数据，那条件查询的语法格式如下：</p>
<p>select 字段 from 表名 where 条件</p>
<h3 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h3><p>查询薪资等于 800 的员工名字和编号</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal = 800;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/AA2A4B71DF254441CB4842893C3031B9.png" alt="AA2A4B71DF254441CB4842893C3031B9"></p>
<h3 id="大于、小于和不等于"><a href="#大于、小于和不等于" class="headerlink" title="大于、小于和不等于"></a>大于、小于和不等于</h3><p>查询不等于 800 的员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal != 800;</span><br><span class="line">select empno,ename from emp where sal &lt;&gt; 800;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/9BA22111F3515600B9B6CBC1D78C6AE4.png" alt="9BA22111F3515600B9B6CBC1D78C6AE4"></p>
<p>查询薪资低于 2000 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal &lt; 2000;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/93AB6C87B76E897D04B0D610E4F963DE.png" alt="93AB6C87B76E897D04B0D610E4F963DE"></p>
<p>查询薪资小于等于 3000 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal &lt;= 3000;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/637CF9D979A3F81D72657C24EFC3025D.png" alt="637CF9D979A3F81D72657C24EFC3025D"></p>
<p>查询薪资大于 3000 的员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal &gt; 3000;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/E45E9B2CDB400CAD5E656C97268DAADE.png" alt="E45E9B2CDB400CAD5E656C97268DAADE"></p>
<p>查询薪资大于等于 2500 的员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal &gt;= 2500;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/F274D606F7A6559924770005EA3C30D6.png" alt="F274D606F7A6559924770005EA3C30D6"></p>
<p><strong>思考：</strong> 能否查询字符串</p>
<p><strong>实践：</strong> </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename="KING";</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/CE8723F056813961E46F6D93656EE140.png" alt="CE8723F056813961E46F6D93656EE140"></p>
<h3 id="between……and"><a href="#between……and" class="headerlink" title="between……and"></a>between……and</h3><p>查询薪资在 1000 到 3000 之间的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal&gt;=1000 and sal &lt;= 3000;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/7F9DBB088B340BD4C0AAE392CEE34A19.png" alt="7F9DBB088B340BD4C0AAE392CEE34A19"></p>
<p>第二种方法实现 ——between and</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where sal between 1000 and 3000;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/897AF274660A2B843ABF0AC2FC659CA2.png" alt="897AF274660A2B843ABF0AC2FC659CA2"></p>
<p>可以看出效果是同样的</p>
<p><strong>注意：</strong> 在使用 between……and 时，必须遵循左小右大的规则</p>
<h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><p>查询补助为 null 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,comm from emp where comm is null;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/FBE80DE2B58C2D1EDFE9B060867EA8B9.png" alt="FBE80DE2B58C2D1EDFE9B060867EA8B9"></p>
<p><strong>注意：在数据库中 null 不能使用等号衡量，因为数据库中代表什么也没有，所以不能使用等号</strong></p>
<p><img src="/./assets/80AFC8FDBEEED56305C14CB401674200.png" alt="80AFC8FDBEEED56305C14CB401674200"></p>
<p>查询补助不为 null 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,comm from emp where comm is not null;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/5458C423AB3DFFEC4D084B6976A3EF31.png" alt="5458C423AB3DFFEC4D084B6976A3EF31"></p>
<p><strong>注意：0 是数值 0，不是 null</strong></p>
<h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>查询工作岗位是 manager 并且工资大于 2500 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,job,sal from emp where job='MANAGER' and sal &gt; 2500;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/3FDF807F475376C973BF6C25B1445003.png" alt="3FDF807F475376C973BF6C25B1445003"></p>
<h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>查询工作岗位是 manager 或者 salesman 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,job from emp where job='MANAGER' or job='SALESMAN';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/924B7E750804080E192749BB4460F6B5.png" alt="924B7E750804080E192749BB4460F6B5"></p>
<p><strong>思考：and 和 or 同时使用，有优先级吗？</strong></p>
<p>查询薪资大于 2500，并且部门部门编号为 10 或者 20 的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,sal,deptno from emp where sal&gt;2500 and (deptno=10 or deptno=20);</span><br></pre></td></tr></tbody></table></figure>

<p>and 和 or 同时出现，and 优先级比较高</p>
<h3 id="in和not-in"><a href="#in和not-in" class="headerlink" title="in和not in"></a>in 和 not in</h3><p>这表示的是包含和不包含</p>
<p>查询工作岗位是 manager 和 salesman 的员工</p>
<p>由上面的题可知，可以用等于和 or 来完成，但这里需要使用 in 或者 not in 来实现</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,job from emp where job in ('MANAGER','SALESMAN');</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/989AB56B012A815213A170D492CA9F00.png" alt="989AB56B012A815213A170D492CA9F00"></p>
<p>找出工资是 800 和 5000  的员工信息（注意，不是 800 到 5000）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,sal from emp where sal in ('800','5000');</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/FE0249E9A8A69C249AB6D355BBDFD3B2.png" alt="FE0249E9A8A69C249AB6D355BBDFD3B2"></p>
<h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>not 的作用是取非，主要是在 is 和 in 中使用</p>
<p>找出工资不是 800 并且不是 5000  的员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,sal from emp where sal not in ('800','5000');</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/084BF128CF11A0E1506847AA0557854A.png" alt="084BF128CF11A0E1506847AA0557854A"></p>
<h3 id="模糊查询——like"><a href="#模糊查询——like" class="headerlink" title="模糊查询——like"></a>模糊查询 ——like</h3><p>支持 % 和下划线匹配</p>
<p>% 匹配多个字符</p>
<p>下划线匹配一个字符</p>
<p>查询名字中间含有 o 的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename like '%o%';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/ACF12332D4397CD98B001138E384B5B6.png" alt="ACF12332D4397CD98B001138E384B5B6"></p>
<p>查询名字以 T 结尾的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename like '%t';</span><br></pre></td></tr></tbody></table></figure>

<p>查询名字以 K 开头的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename like 'k%';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/45D408BE47A5A4F9F4B635E9F90736A1.png" alt="45D408BE47A5A4F9F4B635E9F90736A1"></p>
<p>查询第二个字母为 A 的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename like '_a%';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/EFE0B650BEEBAF86BC00E4258BF2C790.png" alt="EFE0B650BEEBAF86BC00E4258BF2C790"></p>
<p>找出第三个字母是 R 的名字</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename from emp where ename like '__R%';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/F4CB40EDEACC8197951274B3B8956986.png" alt="F4CB40EDEACC8197951274B3B8956986"></p>
<p>临时创建一个表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">create table t_student(name varchar(255));</span><br></pre></td></tr></tbody></table></figure>

<p>表结构如下</p>
<p><img src="/./assets/48692B1DC3382B34160DF78A9606B2B1.png" alt="48692B1DC3382B34160DF78A9606B2B1"></p>
<p>在表中插入以下数据：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">insert into t_student values('zhangsan');</span><br><span class="line">insert into t_student values('wangwu');</span><br><span class="line">insert into t_student values('zhaoliu');</span><br><span class="line">insert into t_student values('jack_son');</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/C804F774BC38AFF71F8A122618D4F03E.png" alt="C804F774BC38AFF71F8A122618D4F03E"></p>
<p>在这个表中，使用模糊查询 like 查询名字带下划线的名字</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select name from t_student where name like '%\_%';</span><br></pre></td></tr></tbody></table></figure>

<p>因为下划线在 MySQL 中有特殊含有，所以需要查询下划线字符时，需要进行转义</p>
<p><img src="/./assets/CF7DA9C090CDE58B4D6CC2BB05660943.png" alt="CF7DA9C090CDE58B4D6CC2BB05660943"></p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>查询员信息按工作排序</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,sal from emp order by sal;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/FFBD0E6EC4690609F9ADB1C5709C081D.png" alt="FFBD0E6EC4690609F9ADB1C5709C081D"></p>
<p>不难看出，默认使用的是升序</p>
<p>如何实现降序呢？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select empno,ename,sal from emp order by sal desc;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/805FB2E5DA319C35AEA4C62ABD301B45.png" alt="805FB2E5DA319C35AEA4C62ABD301B45"></p>
<p><strong>思考：可以通过多个字段排序嘛？</strong></p>
<p>查询员工姓名和薪资，需要按薪资升序，如果薪资相同时按名字升序排序</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,sal from emp order by sal,ename asc;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/A3E079CEB7E7B4328729FA70D4BBFCA7.png" alt="A3E079CEB7E7B4328729FA70D4BBFCA7"></p>
<p>asc 表示升序表示</p>
<p>desc 表示降序</p>
<p><strong>注意：sal 在前起主导作用，在 sal 相等情况下再根据 ename 排序</strong></p>
<p>根据字段的位置排序</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,sal from emp order by 2;</span><br></pre></td></tr></tbody></table></figure>

<p>根据查询结果的第二个排序</p>
<p>不推荐这样写，因为列的顺序很容易发生改变，只需了解即可</p>
<p><img src="/./assets/DCCB431E31AC610663F115CFA3A701F2.png" alt="DCCB431E31AC610663F115CFA3A701F2"></p>
<p>综合案例：</p>
<p>找出工资在 1250 到 3000 之间的员工信息，要求按薪资降序排序。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,sal from emp where sal between 1250 and 3000 order by sal desc;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/0982926360EAA910C8C164D48581FC1A.png" alt="0982926360EAA910C8C164D48581FC1A"></p>
<p>关键字顺序不可变</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	……</span><br><span class="line">from</span><br><span class="line">	……</span><br><span class="line">where</span><br><span class="line">	……</span><br><span class="line">order by</span><br><span class="line">	……</span><br></pre></td></tr></tbody></table></figure>

<p>排序永远在最后执行</p>
<p>语句的执行顺序如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">from</span><br><span class="line">where</span><br><span class="line">select</span><br><span class="line">order by</span><br></pre></td></tr></tbody></table></figure>

<h2 id="数据处理函数-x2F-单行处理函数"><a href="#数据处理函数-x2F-单行处理函数" class="headerlink" title="数据处理函数/单行处理函数"></a>数据处理函数 / 单行处理函数</h2><p>数据处理函数又被成为单行处理函数，单行处理函数的特点是一个输入对应一个输出，和单行处理函数对应的是多行处理函数，接下来学习一下常用的单行处理函数</p>
<h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><p>lower 的作用是转换小写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,lower(ename) as 'lower ename' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/90FFB02FA4598EC7BB7F99C9499053BD.png" alt="90FFB02FA4598EC7BB7F99C9499053BD"></p>
<p>14 个输入对应 14 个输出</p>
<h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h3><p>upper 的作用是转换大写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select name,upper(name) as 'upper name' from t_student;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/83C5407369F226594B43B9842E6BF754.png" alt="83C5407369F226594B43B9842E6BF754"></p>
<h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><p>substr 的作用是取子串，在此尝试截取名字的首个字母，substr 的参数分别是字段、开始下标，截取长度，可以看出，MySQL 中的下标是从 1 开始的，如果下标设置为 0 时取不到数据。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select substr(ename,1,1) as ename from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/78354299BC31E8DB5E7654FA99702E71.png" alt="78354299BC31E8DB5E7654FA99702E71"></p>
<p>在前边，我们通过模糊查询实现了查询首字母为 K 的例子，那么使用取子串的 substr 函数是否可以实现呢？当然可以</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename from emp where substr(ename,1,1)='K';</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/3EDDADE7698FC05BDE99A138092AA155.png" alt="3EDDADE7698FC05BDE99A138092AA155"></p>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>怎么获取名字的长度呢？length 函数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,length(ename) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/4AC5781C1164A8955E70CBBA3A09010E.png" alt="4AC5781C1164A8955E70CBBA3A09010E"></p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>既然能获取到首个字母，那能否在 emp 表和 t_student 表实现名字首字母大写呢？</p>
<p>首先是拿到 emp 表的姓名首字母</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select substr(ename,1,1) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p>接下来就是拿到除去首字母外的字母，通过 length 来获取</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select substr(ename,2,length(ename)-1) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p>接下来就是对剩下的字母变成小写</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select lower(substr(ename,2,length(ename)-1)) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p>这就到了我们的的 concat 进行字符拼接了</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select concat(substr(ename,1,1),lower(substr(ename,2,length(ename)-1))) as name from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/F97A9421BFC16BC5D17E134CF01BB9DE.png" alt="F97A9421BFC16BC5D17E134CF01BB9DE"></p>
<p>同理的，t_student 也是同样的操作</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select concat(upper(substr(name,1,1)),substr(name,2,length(name)-1)) as name from t_student;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/EEC0CC5C2964FB435B9429575F45551A.png" alt="EEC0CC5C2964FB435B9429575F45551A"></p>
<h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>trim 的作用是去除前后的空白</p>
<p>例如我们需要查询 King 的信息，我们会使用以下的 SQL 语句进行查询</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename from emp where ename = '  KING   ';</span><br></pre></td></tr></tbody></table></figure>

<p>但由于条件查询的条件参数带有空格，并不能匹配到 KING，此时可以使用 trim 函数对参数进行处理。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename from emp where ename = trim('  KING   ');</span><br></pre></td></tr></tbody></table></figure>

<p>此时便可得到想要的结果</p>
<p><img src="/./assets/C5BA8C00B66BC39D598E67FAA59CB2A5.png" alt="C5BA8C00B66BC39D598E67FAA59CB2A5"></p>
<h3 id="date-format"><a href="#date-format" class="headerlink" title="date_format"></a>date_format</h3><p>这个函数主要将时间数据根据一定的格式进行输出</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,hiredate,date_format(hiredate,'%Y年%m月%d日') as '年月日' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/563932ACB4D95871440E149D8182EEE8.png" alt="563932ACB4D95871440E149D8182EEE8"></p>
<h3 id="str-to-date"><a href="#str-to-date" class="headerlink" title="str_to_date"></a>str_to_date</h3><p>这个函数和上面的函数恰好相反，这个函数是将特定格式的字符转成时间格式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,date_format(hiredate,'%Y年%m月%d日') as '年月日',str_to_date(date_format(hiredate,'%Y年%m月%d日'),'%Y年%m月%d日') as date from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/F5C8F55DC9275EBBC62E8DABE8587431.png" alt="F5C8F55DC9275EBBC62E8DABE8587431"></p>
<p>可以看到，兜兜转转一大圈，最后还是回到了原来的数据</p>
<h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>对数字格式化，讲数字转成货币的表现形式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,sal,format(sal,0) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/8496DFC117D2CD2C8C73A4F735FC2A8E.png" alt="8496DFC117D2CD2C8C73A4F735FC2A8E"></p>
<p>可以看到，原本普通形式的表现形式变成了三位一分号的表现形式，并且对小数点后两位进行了省略。</p>
<h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>四舍五入</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select 1234.567,round(1234.567,0),round(1234.567,1),round(1234.567,2),round(1234.567,3),round(1234.567,4);</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/DBEE7F38267177F89899598DC9AD33A0.png" alt="DBEE7F38267177F89899598DC9AD33A0"></p>
<p>可以明显的看到，当不保留小数时，因为小数第一位是 5，所以进行运算后个位进一，1234 变成了 1235，后面的都是同理，当保留的小数位数大于最大的小数位数时，可以发现并不会在小数的后面做加 0 操作。</p>
<h3 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h3><p>rand 函数的作用是生成随机数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select rand() as random from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/C58312C46315E71F982E340FFA97C143.png" alt="C58312C46315E71F982E340FFA97C143"></p>
<p>看到这个 SQL 语句是否有所疑惑，其实跟上面的语句一样，上面使用的都是字面值，而查询的结果有多少个数据，则会返回多少个与之对应的数据。</p>
<h3 id="case-……-when-……-then"><a href="#case-……-when-……-then" class="headerlink" title="case …… when …… then"></a>case …… when …… then</h3><p>这个函数有点像其实不难理解，当什么时候做什么事情。</p>
<p>使用数据库中的数据做一个例子，当岗位为 clerk 时，薪资提升 20%，当岗位为 salesman 时，工资提升 30%。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	ename,</span><br><span class="line">	job,</span><br><span class="line">	sal,</span><br><span class="line">	case </span><br><span class="line">		job </span><br><span class="line">	when </span><br><span class="line">		'CLERK' </span><br><span class="line">	then </span><br><span class="line">		sal*1.2</span><br><span class="line">    when </span><br><span class="line">    	'SALESMAN'</span><br><span class="line">    then</span><br><span class="line">    	sal*1.3</span><br><span class="line">    else</span><br><span class="line">    	sal</span><br><span class="line">    end </span><br><span class="line">    	'涨薪后的工作'</span><br><span class="line">    from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/496C96BCFB8988EE505D94E25AF9FD71.png" alt="496C96BCFB8988EE505D94E25AF9FD71"></p>
<h3 id="ifnull"><a href="#ifnull" class="headerlink" title="ifnull"></a>ifnull</h3><p>ifnull 函数需要接收两个参数，当前面的参数为不为空时，则会输出参数的内容，而当参数为空时，输出第二个参数的内容。</p>
<p>例子：在 emp 表中找出谁才是 BOSS</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,ifnull(mgr,'BOSS') as 'who is boss?' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/EFAB1CC0FB672BE601DBA7C48F7A3EB7.png" alt="EFAB1CC0FB672BE601DBA7C48F7A3EB7"></p>
<h2 id="分组函数-x2F-多行处理函数"><a href="#分组函数-x2F-多行处理函数" class="headerlink" title="分组函数/多行处理函数"></a>分组函数 / 多行处理函数</h2><p>多行处理函数的特点是多个输入对应一个输出。</p>
<p><strong>注意： 分组函数在使用的时候必须分组才能使用，如果没有分组，整张表默认为一组，分组函数会自动忽略 Null 值，无需对 null 进行处理</strong></p>
<h3 id="count计数"><a href="#count计数" class="headerlink" title="count计数"></a>count 计数</h3><p>统计公司员工人数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select count(empno) as '人数统计' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/DC32F06C3FA015AE276CF382A282CDDE.png" alt="DC32F06C3FA015AE276CF382A282CDDE"></p>
<h3 id="sum求和"><a href="#sum求和" class="headerlink" title="sum求和"></a>sum 求和</h3><p>求公司每月工资开销</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select sum(sal) as '工资开销' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/E814377E47DEC7B43868246FD615B99D.png" alt="E814377E47DEC7B43868246FD615B99D"></p>
<h3 id="avg平均值"><a href="#avg平均值" class="headerlink" title="avg平均值"></a>avg 平均值</h3><p>求公司员工的平均工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select avg(sal) as '平均工资' from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/CEFDD0C0E1B99B7D644FEC7801C77BDF.png" alt="CEFDD0C0E1B99B7D644FEC7801C77BDF"></p>
<h3 id="max求最大值"><a href="#max求最大值" class="headerlink" title="max求最大值"></a>max 求最大值</h3><p>求最高工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select max(sal) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/8701F830739571A003B5FB476991796D.png" alt="8701F830739571A003B5FB476991796D"></p>
<h3 id="min求最小值"><a href="#min求最小值" class="headerlink" title="min求最小值"></a>min 求最小值</h3><p>求最低工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select min(sal) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/8D84BEEC8CA377FBC5D826D1C0487227.png" alt="8D84BEEC8CA377FBC5D826D1C0487227"></p>
<p>思考，count (*) 和 count (具体自动) 的区别</p>
<p>count (具体自动) 代表该字段不为 null 的总和</p>
<p>count (*) 代表该表的行数总和，因为只要存在一行记录，那么这行数据则不可能所有字段都为 null，全部为 null 则代表没有这行记录</p>
<p><strong>注意：分组函数不能直接使用在 where 子语句中</strong></p>
<p>分组函数可以组合使用</p>
<h2 id="分组查询（重点）"><a href="#分组查询（重点）" class="headerlink" title="分组查询（重点）"></a>分组查询（重点）</h2><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>计算每个岗位的工资总和</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,sum(sal) from emp group by job;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/594F844A568D0FD5884418100D335D76.png" alt="594F844A568D0FD5884418100D335D76"></p>
<p>计算每个工作岗位的平均工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,avg(sal) from emp group by job;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/3303A7259F0C16F141C61A8661E8EC0D.png" alt="3303A7259F0C16F141C61A8661E8EC0D"></p>
<p>找出每个工作岗位的最高工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,max(sal) from emp group by job;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/2A508C86A3A4A844009707FBEE268820.png" alt="2A508C86A3A4A844009707FBEE268820"></p>
<p>在 SQL 语句中，select 语句含有 group by 的话，select 只能跟参加分组的字段，以及分组函数，在 MySQL 中无意义，其他 SQL 中报错。</p>
<p>求每个部门的的最高工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,max(sal) from emp group by deptno;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/CE8E0A9719D78B1ED6F49CD8D5588044.png" alt="CE8E0A9719D78B1ED6F49CD8D5588044"></p>
<p>找出每个部门不同工作岗位的最高工资？</p>
<p>group by 可以多个字段</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,job,max(sal) from emp group by deptno,job;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/7508D6E37F444B18ECE39FE43FAD9608.png" alt="7508D6E37F444B18ECE39FE43FAD9608"></p>
<h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><p>使用 having 可以对分完组后的数据进一步进行过滤</p>
<p>求每个部门不同工作岗位的最高工资，并且要求薪资大于 1500。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,job,max(sal) from emp group by deptno,job having max(sal)&gt;1500;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/19AFA995B67682869FEEDC039C96D5BA.png" alt="19AFA995B67682869FEEDC039C96D5BA"></p>
<p>通过 having 可以对结果进行二次过滤，但上面的 SQL 语句效率就相对较低了，因为要求工资是大于 1500，所以可以在分组之前对薪资进行过滤。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,job,max(sal) from emp where sal &gt; 1500 group by deptno,job;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/4E80C4E6F81AD8DDC8C0B21BAAC435D2.png" alt="4E80C4E6F81AD8DDC8C0B21BAAC435D2"></p>
<p>求每个部门的平均薪资，要求平均薪资大于 1500 的。</p>
<p>面对这个题目，使用 where 就无法处理了，那么就需要使用 having 了。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,job,avg(sal) from emp group by deptno,job having avg(sal)&gt;1500;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/1910D542CC0A6C3A0BBBF76129ECF0EE.png" alt="1910D542CC0A6C3A0BBBF76129ECF0EE"></p>
<h3 id="select语句总结"><a href="#select语句总结" class="headerlink" title="select语句总结"></a>select 语句总结</h3><p>select</p>
<p>​			……</p>
<p>from</p>
<p>​			……</p>
<p>where</p>
<p>​			……</p>
<p>group by</p>
<p>​			……</p>
<p>having</p>
<p>​			……</p>
<p>order by</p>
<p>​			……</p>
<p>执行顺序如下：</p>
<p>1、from</p>
<p>2、where</p>
<p>3、group by</p>
<p>4、having</p>
<p>5、select</p>
<p>6、order by</p>
<p>从某张表查询数据，</p>
<p>先经过 where 条件筛选出有价值的数据，</p>
<p>对这些数据进行分组</p>
<p>分组后通过 having 进行二次过滤</p>
<p>通过 select 查询</p>
<p>最后进行排序输出</p>
<p><strong>思考：为什么分组函数不能在 where 子语句中使用？</strong></p>
<p>因为分组函数需要分组后才可以使用，如果没有分组则会将整张表作为一个分组，而 where 子语句中，并没有完成分组的，当没有 where 并且没有 group by 时，可以看做 group by 已经执行了。而 where 子语句，不管怎么看都是处于 where 到 group by 时的，那么就是还没开始 group by，所以不能使用分组函数。</p>
<p>找出每个岗位的平均薪资，要求显示平均薪资大于 1000 的，除去 MANAGER 岗位之外，要求按照平均薪资的降序排列。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,avg(sal) from emp where job != 'MANAGER' group by job having avg(sal) &gt; 1000 order by avg(sal) desc;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/243141D94954E71FEC7249259AEE11A5.png" alt="243141D94954E71FEC7249259AEE11A5"></p>
<p><strong>技巧：在写 SQL 语句时，select 后可以先留空，按照这执行的顺序来写 SQL 语句</strong></p>
<p>例如此处的 SQL 语句，可以先这样写，指定好查询的表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select xxx from emp;</span><br></pre></td></tr></tbody></table></figure>

<p>下一步是 where，对排除的岗位进行筛选</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select xxx from emp where job != 'MANAGER';</span><br></pre></td></tr></tbody></table></figure>

<p>此时可以进行分组，根据工作岗位进行分组</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select xxx from emp where job != 'MANAGER' group by job;</span><br></pre></td></tr></tbody></table></figure>

<p>在分组完成后，对分组的数据进行二次筛选，将只显示平均工资大于 1000 的</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select xxx from emp where job != 'MANAGER' group by job having avg(sal) &gt; 1000;</span><br></pre></td></tr></tbody></table></figure>

<p>到了这一步就可以确定 select 后的字段内容了，因为分组后只能跟参与分组的字段和分组函数，所以是 job 和 avg (sal)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,avg(sal) from emp where job != 'MANAGER' group by job having avg(sal) &gt; 1000;</span><br></pre></td></tr></tbody></table></figure>

<p>又因为需要对平均工资进行降序排序，所以最后需要进行一次 order by，降序的话就是 order desc</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select job,avg(sal) from emp where job != 'MANAGER' group by job having avg(sal) &gt; 1000 order by avg(sal) desc;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>如何实现去重呢？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select deptno,job from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/2815087020E35BF36AF97BB17F888BD8.png" alt="2815087020E35BF36AF97BB17F888BD8"></p>
<p>像图中这种同一个部门同一个岗位的情况，需要进行去重，如何来实现呢？此处需要使用 distinct 关键字</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select distinct deptno,job from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/151EE5CF2F8318589C64FA5D6DF41187.png" alt="151EE5CF2F8318589C64FA5D6DF41187"></p>
<p>可以看到，使用 distinct 关键字后，对于部门和岗位相同的数据进行了去重。</p>
<p><strong>注意：distinct 关键字只能出现在所有的字段前面</strong></p>
<p><strong>思考：那么在 distinct 中是否可以使用函数呢？</strong></p>
<p>统计工作岗位的数量</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select count(distinct job) from emp;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/39196438FC24DE864783E6EC54A0CEBB.png" alt="39196438FC24DE864783E6EC54A0CEBB"></p>
<p>可以看到，完全是可以在函数中使用 distinct 的</p>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h3><p>内连接</p>
<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
<p>外连接</p>
<ul>
<li>左连接</li>
<li>右连接</li>
</ul>
<h3 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h3><p><strong>思考：当两张表进行连接查询时没有限制的情况会发生什么现象</strong></p>
<p>查询每个员工所在部门名称？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select ename,dname from emp,dept;</span><br></pre></td></tr></tbody></table></figure>

<p>此处是未做限制的情况对两张表进行连接查询，结果如下：</p>
<p><img src="/./assets/F785913EC8DEE4FD34526996B2CBBA7C.png" alt="image-20220928215329614"></p>
<p><img src="/./assets/C4E9041ECE956AACEF9352703E2EB221.png" alt="image-20220928215429794"></p>
<p>不难发现，这里是用的 emp 表中的 ename 跟 dept 表中的 dname 都进行了匹配，这种情况是我们不希望发生的</p>
<h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><p>那么引用 SQL92 的写法写一个简单的 SQL 来实现这道题目，但规范还是参考后续的 SQL99 语法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,d.dname from emp e,dept d where e.deptno = d.deptno;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/826E0EC2ABFF04CC596F8C614A64A1C9.png" alt="image-20220928220102211"></p>
<p>可以看出，这已经符合了预期效果了，那么再看一看 SQL99 的语法怎么写的：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,d.dname from emp e inner join dept d on e.deptno = d.deptno;</span><br></pre></td></tr></tbody></table></figure>

<p>所以连接的语法大概如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	查询的字段</span><br><span class="line">from</span><br><span class="line">	表1的名</span><br><span class="line">inner join</span><br><span class="line">	需要连接的表名</span><br><span class="line">on</span><br><span class="line">	筛选的条件</span><br></pre></td></tr></tbody></table></figure>

<p>inner join 表示为内连接，可写可不写</p>
<h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><p>找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,e.sal,s.grade from emp e inner join salgrade s on e.sal between s.losal and s.hisal;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/2C1D095871522459237270B4CC52A1A4.png" alt="image-20220928221500823"></p>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>查询员工的上级领导，要求显示员工名和对应的领导名？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select a.ename '员工名',b.ename '领导名' from emp a inner join emp b on a.mgr = b.empno;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/7B25E324F60A72F8AAB9BA590154F16F.png" alt="image-20220928231643885"></p>
<p>自连接主要是将同一张表看成两张表便可</p>
<h3 id="外连接和内连接的区别"><a href="#外连接和内连接的区别" class="headerlink" title="外连接和内连接的区别"></a>外连接和内连接的区别</h3><p>上面的连接便称为内连接，只有在条件满足的情况才会显示</p>
<p>而外连接分为左连接和右连接以及全连接，右连接指的是把 join 关键字右边的表看为主表，而左连接指的是把 join 关键字左边的表看为主表，即使主表的部分内容无法与次表的数据匹配也会进行展示。</p>
<p>查询每个员工的名字和所对应的部门名称，即使没有与之对应的部门也要查询出来</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,d.dname from emp e right join dept d on e.deptno = d.deptno;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/9248C3531C8B0B40F8D254B61BF71B02.png" alt="image-20220928233213272"></p>
<p>在参考内连接的结果，会发现使用外连接多了一条记录</p>
<p><img src="/./assets/84E70102C9B7B6AF73EAC8BFB9E2C01D.png" alt="image-20220928233511691"></p>
<p><strong>思考：外连接的查询记录数一定大于或者等于内连接的查询记录数</strong></p>
<p>对的，因为外连接会将主表未匹配的数据也查询出来</p>
<p>带有 right 的是右外连接，又叫做右连接。</p>
<p>带有 left 的是左外连接，又叫做左连接。</p>
<p>任何一个右连接都有左连接的写法。</p>
<p>任何一个左连接都有右连接的写法。</p>
<h3 id="多张表连接"><a href="#多张表连接" class="headerlink" title="多张表连接"></a>多张表连接</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	***</span><br><span class="line">from</span><br><span class="line">	a</span><br><span class="line">join</span><br><span class="line">	b</span><br><span class="line">on</span><br><span class="line">	a和b的连接条件</span><br><span class="line">left join</span><br><span class="line">	c</span><br><span class="line">on</span><br><span class="line">	a和c的连接条件</span><br><span class="line">right join</span><br><span class="line">	d</span><br><span class="line">on</span><br><span class="line">	a和d的连接条件</span><br></pre></td></tr></tbody></table></figure>

<p>一条 SQL 中内连接和外连接可以混合使用，可以同时出现</p>
<p>案例：找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,d.dname,e.sal,s.grade from emp e join dept d on e.deptno = d.deptno join salgrade s on e.sal between s.losal and s.hisal;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/././images/2022/temp/3150471CAC27F4CB1F446EB22D3D71CD.png" alt="image-20221017085349351"></p>
<p>在此基础上，对题目进行一次升级</p>
<p>案例：找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,e2.ename '领导名',d.dname,e.sal,s.grade from emp e left join emp e2 on e.mgr = e2.empno join dept d on e.deptno = d.deptno join salgrade s on e.sal between s.losal and s.hisal;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/././images/2022/temp/3DB88DA05178845FC8C025D26910E844.png" alt="image-20221017090543712"></p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="什么是子查询？"><a href="#什么是子查询？" class="headerlink" title="什么是子查询？"></a>什么是子查询？</h3><p>​	select 语句中嵌套 select 语句，被嵌套的 select 语句称为子查询。</p>
<h3 id="子查询都可以出现在哪里呢？"><a href="#子查询都可以出现在哪里呢？" class="headerlink" title="子查询都可以出现在哪里呢？"></a>子查询都可以出现在哪里呢？</h3><p>​	select<br>​		..(select).<br>​	from<br>​		..(select).<br>​	where<br>​		..(select).</p>
<h3 id="where子句中的子查询"><a href="#where子句中的子查询" class="headerlink" title="where子句中的子查询"></a>where 子句中的子查询</h3><p>案例：找出比最低工资高的员工姓名和工资？</p>
<p>错误思路：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select sal from emp where sal&gt;min(sal);</span><br></pre></td></tr></tbody></table></figure>

<p>这个语句会报错，因为不能在 where 中使用分组函数</p>
<p><img src="/././images/2022/temp/68D11DAB0972BF617234312D846A9018.png" alt="image-20221017092105977"></p>
<p>解决思路：</p>
<p>第一步：找到最低工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select min(sal) from emp;</span><br><span class="line">+----------+</span><br><span class="line">| min(sal) |</span><br><span class="line">+----------+</span><br><span class="line">|   800.00 |</span><br><span class="line">+----------+</span><br></pre></td></tr></tbody></table></figure>

<p>第二部：找到比最低工资高</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select sal from emp where sal &gt; 800;</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">| 1600.00 |</span><br><span class="line">| 1250.00 |</span><br><span class="line">| 2975.00 |</span><br><span class="line">| 1250.00 |</span><br><span class="line">| 2850.00 |</span><br><span class="line">| 2450.00 |</span><br><span class="line">| 3000.00 |</span><br><span class="line">| 5000.00 |</span><br><span class="line">| 1500.00 |</span><br><span class="line">| 1100.00 |</span><br><span class="line">|  950.00 |</span><br><span class="line">| 3000.00 |</span><br><span class="line">| 1300.00 |</span><br><span class="line">+---------+</span><br></pre></td></tr></tbody></table></figure>

<p>第三步：合并</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select sal from emp where sal &gt; (select min(sal) from emp);</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">| 1600.00 |</span><br><span class="line">| 1250.00 |</span><br><span class="line">| 2975.00 |</span><br><span class="line">| 1250.00 |</span><br><span class="line">| 2850.00 |</span><br><span class="line">| 2450.00 |</span><br><span class="line">| 3000.00 |</span><br><span class="line">| 5000.00 |</span><br><span class="line">| 1500.00 |</span><br><span class="line">| 1100.00 |</span><br><span class="line">|  950.00 |</span><br><span class="line">| 3000.00 |</span><br><span class="line">| 1300.00 |</span><br><span class="line">+---------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="from子句中的子查询"><a href="#from子句中的子查询" class="headerlink" title="from子句中的子查询"></a>from 子句中的子查询</h3><p>from 后面的子查询，可以将子查询的查询结果当做一张临时表。</p>
<p>案例：找出每个岗位的平均工资的薪资等级。</p>
<p>第一步：找到岗位平均工资</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select job,avg(sal) avgsal from emp group by job;</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| job       | avgsal      |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| ANALYST   | 3000.000000 |</span><br><span class="line">| CLERK     | 1037.500000 |</span><br><span class="line">| MANAGER   | 2758.333333 |</span><br><span class="line">| PRESIDENT | 5000.000000 |</span><br><span class="line">| SALESMAN  | 1400.000000 |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>第二步：把第一步的结果当成一张存在的表进行查询薪资等级</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select t.job,t.avgsal,s.grade from (select job,avg(sal) avgsal from emp group by job) t join salgrade s on t.avgsal between s.losal and s.hisal;</span><br><span class="line">+-----------+-------------+-------+</span><br><span class="line">| job       | avgsal      | grade |</span><br><span class="line">+-----------+-------------+-------+</span><br><span class="line">| ANALYST   | 3000.000000 |     4 |</span><br><span class="line">| CLERK     | 1037.500000 |     1 |</span><br><span class="line">| MANAGER   | 2758.333333 |     4 |</span><br><span class="line">| PRESIDENT | 5000.000000 |     5 |</span><br><span class="line">| SALESMAN  | 1400.000000 |     2 |</span><br><span class="line">+-----------+-------------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="select后面出现的子查询"><a href="#select后面出现的子查询" class="headerlink" title="select后面出现的子查询"></a>select 后面出现的子查询</h3><p>案例：找出每个员工的部门名称，要求显示员工名，部门名？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select e.ename,e.deptno,(select d.dname from dept d where e.deptno = d.deptno) as dname from emp e;</span><br></pre></td></tr></tbody></table></figure>

<p>注意：对于 select 后面的子查询来说，这个子查询只能一次返回 1 条结果</p>
<h2 id="union合并查询结果集"><a href="#union合并查询结果集" class="headerlink" title="union合并查询结果集"></a>union 合并查询结果集</h2><p>案例：查询工作岗位是 MANAGER 和 SALESMAN 的员工？</p>
<p>使用老方法的实现方式：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,job from emp where job = 'MANAGER' or job = 'SALESMAN';</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select ename,job from emp where job in ('MANAGER','SALESMAN');</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>使用 union 实现</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,job from emp where job = 'MANAGER'</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select ename,job from emp where job = 'SALESMAN';</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename  | job      |</span><br><span class="line">+--------+----------+</span><br><span class="line">| JONES  | MANAGER  |</span><br><span class="line">| BLAKE  | MANAGER  |</span><br><span class="line">| CLARK  | MANAGER  |</span><br><span class="line">| ALLEN  | SALESMAN |</span><br><span class="line">| WARD   | SALESMAN |</span><br><span class="line">| MARTIN | SALESMAN |</span><br><span class="line">| TURNER | SALESMAN |</span><br><span class="line">+--------+----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>使用 union 的效率比之前的效率更高，对于表连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的增长，但是 union 可以在减少匹配次数的情况下，还可以完成两个结果集的拼接。</p>
<p>多表连接</p>
<p>a 连接 b 连接 c<br>    a 10 条记录<br>    b 10 条记录<br>    c 10 条记录<br>    匹配次数是：1000</p>
<p>使用 union 拼接</p>
<p>​	a 连接 b 一个结果：10 * 10 –&gt; 100 次<br>​	a 连接 c 一个结果：10 * 10 –&gt; 100 次<br>​	100+100=200</p>
<p>union 在使用的时候有注意事项吗？</p>
<p>union 在进行结果集合并的时候，要求两个结果集的列数相同。<br>结果集合并时列和列的数据类型也要一致。<br>MYSQL 可以，oracle 语法严格 ，不可以</p>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><p>limit 作用：将查询结果集的一部分取出来。通常使用在分页查询当中。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">limit startIndex,lenght</span><br><span class="line">startIndex是起始下标，Lenght是长度，起始下标从0开始</span><br><span class="line">缺省用法：</span><br><span class="line">limit 5;</span><br><span class="line">这是取前5</span><br></pre></td></tr></tbody></table></figure>

<p>mysql 当中 limit 在 order by 之后执行</p>
<p>案例：按照薪资降序，取出排名在前 5 名的员工？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp order by sal desc limit 5;</span><br><span class="line">+-------+---------+</span><br><span class="line">| ename | sal     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| KING  | 5000.00 |</span><br><span class="line">| FORD  | 3000.00 |</span><br><span class="line">| SCOTT | 3000.00 |</span><br><span class="line">| JONES | 2975.00 |</span><br><span class="line">| BLAKE | 2850.00 |</span><br><span class="line">+-------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>案例：取出工资排名在 [3-5] 名的员工？</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp order by sal desc limit 2,3;</span><br><span class="line">+-------+---------+</span><br><span class="line">| ename | sal     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| SCOTT | 3000.00 |</span><br><span class="line">| JONES | 2975.00 |</span><br><span class="line">| BLAKE | 2850.00 |</span><br><span class="line">+-------+---------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>这个案例中的 2 代表从下标 2 开始，3 表示要获取的长度。</p>
<h3 id="通用分页"><a href="#通用分页" class="headerlink" title="通用分页"></a>通用分页</h3><table>
<thead>
<tr>
<th>Page No</th>
<th>Pages</th>
<th>Start Index</th>
<th>PageSize</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>[0,1,2,3,4]</td>
<td>0</td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td>[5,6,7,8,9]</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td>[10,11,12,13,14]</td>
<td>10</td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td>[15,16,17,18,19]</td>
<td>15</td>
<td>5</td>
</tr>
</tbody></table>
<p>在做分页查询时，Page Size 始终保持不变，而 Start index 和 Page No 的关系则是（Page No - 1）* Page Size</p>
<p>例如当 Page No 为 5 时，Page Size 保持不变继续为 5，Start index 则等于（5 - 1）* 5 = 20</p>
<h2 id="DQL语句大总结"><a href="#DQL语句大总结" class="headerlink" title="DQL语句大总结"></a>DQL 语句大总结</h2><p>整体结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	......</span><br><span class="line">from</span><br><span class="line">	......</span><br><span class="line">where</span><br><span class="line">	......</span><br><span class="line">group by</span><br><span class="line">	......</span><br><span class="line">having</span><br><span class="line">	......</span><br><span class="line">order by</span><br><span class="line">	......</span><br><span class="line">limit</span><br><span class="line">	......</span><br></pre></td></tr></tbody></table></figure>

<p>执行顺序</p>
<p>1、from<br>2、where<br>3、group by<br>4、having<br>5、select<br>6、order by<br>7、limit</p>
<h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><p>取得每个部门最高薪水的人员名称</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,e.sal,e.deptno from emp e join (select max(sal) sal,deptno from emp group by deptno) as t on e.sal = t.sal and e.deptno = t.deptno;</span><br><span class="line">+-------+---------+--------+</span><br><span class="line">| ename | sal     | deptno |</span><br><span class="line">+-------+---------+--------+</span><br><span class="line">| BLAKE | 2850.00 |     30 |</span><br><span class="line">| SCOTT | 3000.00 |     20 |</span><br><span class="line">| KING  | 5000.00 |     10 |</span><br><span class="line">| FORD  | 3000.00 |     20 |</span><br><span class="line">+-------+---------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>哪些人的薪水在部门的平均薪水之上</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,e.sal from emp e join (select avg(sal) sal ,deptno from emp group by deptno) t on e.deptno = t.deptno and e.sal&gt;t.sal;</span><br><span class="line">+-------+---------+</span><br><span class="line">| ename | sal     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| KING  | 5000.00 |</span><br><span class="line">| JONES | 2975.00 |</span><br><span class="line">| SCOTT | 3000.00 |</span><br><span class="line">| FORD  | 3000.00 |</span><br><span class="line">| ALLEN | 1600.00 |</span><br><span class="line">| BLAKE | 2850.00 |</span><br><span class="line">+-------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得部门中（所有人的）平均的薪水等级</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select deptno,avg(grade) from emp e join salgrade s on e.sal between s.losal and s.hisal group by deptno;</span><br><span class="line">+--------+------------+</span><br><span class="line">| deptno | avg(grade) |</span><br><span class="line">+--------+------------+</span><br><span class="line">|     10 |     3.6667 |</span><br><span class="line">|     20 |     2.8000 |</span><br><span class="line">|     30 |     2.5000 |</span><br><span class="line">+--------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>不准用组函数（Max），取得最高薪水（给出两种解决方案）<br>方法 一</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select sal from emp order by sal desc limit 0,1;</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">| 5000.00 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select sal from emp where sal&gt;=all(select sal from emp);</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">| 5000.00 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></tbody></table></figure>

<p>方法三</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">首先通过自连接查出工资不属于最高的</span><br><span class="line">mysql&gt; select distinct t.sal from emp e join emp t on e.sal &gt; t.sal;</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">|  800.00 |</span><br><span class="line">| 1600.00 |</span><br><span class="line">| 1250.00 |</span><br><span class="line">| 2975.00 |</span><br><span class="line">| 2850.00 |</span><br><span class="line">| 2450.00 |</span><br><span class="line">| 3000.00 |</span><br><span class="line">| 1500.00 |</span><br><span class="line">| 1100.00 |</span><br><span class="line">|  950.00 |</span><br><span class="line">| 1300.00 |</span><br><span class="line">+---------+</span><br><span class="line">11 rows in set (0.01 sec)</span><br><span class="line">再查询一次工资排除工资不属于最高的</span><br><span class="line">mysql&gt; select sal from emp where sal not in (select t.sal from emp e join emp t on e.sal &gt; t.sal);</span><br><span class="line">+---------+</span><br><span class="line">| sal     |</span><br><span class="line">+---------+</span><br><span class="line">| 5000.00 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select deptno from emp group by deptno order by avg(sal) desc limit 1;</span><br><span class="line">+--------+</span><br><span class="line">| deptno |</span><br><span class="line">+--------+</span><br><span class="line">|     10 |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select max(t.avgsal) from (select avg(sal) avgsal from emp group by deptno) t;</span><br><span class="line">+---------------+</span><br><span class="line">| max(t.avgsal) |</span><br><span class="line">+---------------+</span><br><span class="line">|   2916.666667 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得平均薪水最高的部门的部门名称</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select d.dname from emp e join dept d on e.deptno=d.deptno group by e.deptno order by avg(sal) desc limit 1;</span><br><span class="line">+------------+</span><br><span class="line">| dname      |</span><br><span class="line">+------------+</span><br><span class="line">| ACCOUNTING |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>求平均薪水的等级最低的部门的部门名称</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	t.*,</span><br><span class="line">	s.grade </span><br><span class="line">FROM</span><br><span class="line">	(</span><br><span class="line">	SELECT</span><br><span class="line">		d.dname,</span><br><span class="line">		avg( sal ) AS avgsal </span><br><span class="line">	FROM</span><br><span class="line">		emp e</span><br><span class="line">		JOIN dept d ON e.deptno = d.deptno </span><br><span class="line">	GROUP BY</span><br><span class="line">		d.dname </span><br><span class="line">	) t</span><br><span class="line">	JOIN salgrade s ON t.avgsal BETWEEN s.losal </span><br><span class="line">	AND s.hisal </span><br><span class="line">WHERE</span><br><span class="line">	s.grade = (</span><br><span class="line">	SELECT</span><br><span class="line">		grade </span><br><span class="line">	FROM</span><br><span class="line">		salgrade </span><br><span class="line">	WHERE</span><br><span class="line">		( SELECT avg( sal ) AS avgsal FROM emp GROUP BY deptno ORDER BY avgsal ASC LIMIT 1 ) BETWEEN losal </span><br><span class="line">	AND hisal </span><br><span class="line">	);</span><br></pre></td></tr></tbody></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">+-------+-------------+-------+</span><br><span class="line">   | dname | avgsal      | grade |</span><br><span class="line">   +-------+-------------+-------+</span><br><span class="line">   | SALES | 1566.666667 |     3 |</span><br><span class="line">   +-------+-------------+-------+</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得比普通员工 (员工代码没有在 mgr 字段上出现的) 的最高薪水还要高的 领导人姓名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp where sal &gt; (select max(sal) from emp where empno not in (select distinct mgr from emp where mgr is not null));</span><br><span class="line">+-------+---------+</span><br><span class="line">| ename | sal     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| JONES | 2975.00 |</span><br><span class="line">| BLAKE | 2850.00 |</span><br><span class="line">| CLARK | 2450.00 |</span><br><span class="line">| SCOTT | 3000.00 |</span><br><span class="line">| KING  | 5000.00 |</span><br><span class="line">| FORD  | 3000.00 |</span><br><span class="line">+-------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得薪水最高的前五名员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp order by sal desc limit 5;</span><br><span class="line">+-------+---------+</span><br><span class="line">| ename | sal     |</span><br><span class="line">+-------+---------+</span><br><span class="line">| KING  | 5000.00 |</span><br><span class="line">| FORD  | 3000.00 |</span><br><span class="line">| SCOTT | 3000.00 |</span><br><span class="line">| JONES | 2975.00 |</span><br><span class="line">| BLAKE | 2850.00 |</span><br><span class="line">+-------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得薪水最高的第六到第十名员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp order by sal desc limit 5,5;</span><br><span class="line">+--------+---------+</span><br><span class="line">| ename  | sal     |</span><br><span class="line">+--------+---------+</span><br><span class="line">| CLARK  | 2450.00 |</span><br><span class="line">| ALLEN  | 1600.00 |</span><br><span class="line">| TURNER | 1500.00 |</span><br><span class="line">| MILLER | 1300.00 |</span><br><span class="line">| WARD   | 1250.00 |</span><br><span class="line">+--------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得最后入职的 5 名员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp order by hiredate desc limit 5;</span><br><span class="line">+-------+--------+---------+------+------------+---------+------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB     | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class="line">+-------+--------+---------+------+------------+---------+------+--------+</span><br><span class="line">|  7876 | ADAMS  | CLERK   | 7788 | 1987-05-23 | 1100.00 | NULL |     20 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK   | 7782 | 1982-01-23 | 1300.00 | NULL |     10 |</span><br><span class="line">|  7900 | JAMES  | CLERK   | 7698 | 1981-12-03 |  950.00 | NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class="line">+-------+--------+---------+------+------------+---------+------+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>取得每个薪水等级有多少员工</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select grade,count(grade) num from emp e join salgrade s on e.sal between s.losal and s.hisal group by grade;</span><br><span class="line">+-------+-----+</span><br><span class="line">| grade | num |</span><br><span class="line">+-------+-----+</span><br><span class="line">|     1 |   3 |</span><br><span class="line">|     2 |   3 |</span><br><span class="line">|     3 |   2 |</span><br><span class="line">|     4 |   5 |</span><br><span class="line">|     5 |   1 |</span><br><span class="line">+-------+-----+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>题目：有 3 个表 S (学生表)，C（课程表），SC（学生选课表） S（SNO，SNAME）代表（学号，姓名）  95 / 103 C（CNO，CNAME，CTEACHER）代表（课号，课名，教师） SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩） 问题： 1，找出没选过 “黎明” 老师的所有学生姓名。 2，列出 2 门以上（含 2 门）不及格学生姓名及平均成绩。 3，即学过 1 号课程又学过 2 号课所有学生的姓名。<br>13.1：找出没选过 “黎明” 老师的所有学生姓名。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    </span><br></pre></td></tr></tbody></table></figure>

<p>13.2：列出 2 门以上（含 2 门）不及格学生姓名及平均成绩。<br>13.3：即学过 1 号课程又学过 2 号课所有学生的姓名。</p>
</li>
<li><p>列出所有员工及领导的姓名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,t.ename from emp e left join emp t on e.mgr = t.empno;</span><br><span class="line">+--------+-------+</span><br><span class="line">| ename  | ename |</span><br><span class="line">+--------+-------+</span><br><span class="line">| SMITH  | FORD  |</span><br><span class="line">| ALLEN  | BLAKE |</span><br><span class="line">| WARD   | BLAKE |</span><br><span class="line">| JONES  | KING  |</span><br><span class="line">| MARTIN | BLAKE |</span><br><span class="line">| BLAKE  | KING  |</span><br><span class="line">| CLARK  | KING  |</span><br><span class="line">| SCOTT  | JONES |</span><br><span class="line">| KING   | NULL  |</span><br><span class="line">| TURNER | BLAKE |</span><br><span class="line">| ADAMS  | SCOTT |</span><br><span class="line">| JAMES  | BLAKE |</span><br><span class="line">| FORD   | JONES |</span><br><span class="line">| MILLER | CLARK |</span><br><span class="line">+--------+-------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select a.empno,a.ename,d.dname from emp a join emp b on a.mgr = b.empno and a.hiredate &lt; b.hiredate join dept d on a.deptno = d.deptno;</span><br><span class="line">+-------+-------+------------+</span><br><span class="line">| empno | ename | dname      |</span><br><span class="line">+-------+-------+------------+</span><br><span class="line">|  7369 | SMITH | RESEARCH   |</span><br><span class="line">|  7499 | ALLEN | SALES      |</span><br><span class="line">|  7521 | WARD  | SALES      |</span><br><span class="line">|  7566 | JONES | RESEARCH   |</span><br><span class="line">|  7698 | BLAKE | SALES      |</span><br><span class="line">|  7782 | CLARK | ACCOUNTING |</span><br><span class="line">+-------+-------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select * from dept d left join emp e on d.deptno = e.deptno;</span><br><span class="line">+--------+------------+----------+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+--------+------------+----------+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|     30 | SALES      | CHICAGO  |  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |  NULL | NULL   | NULL      | NULL | NULL       |    NULL |    NULL |   NULL |</span><br><span class="line">+--------+------------+----------+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">15 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出至少有 5 个员工的所有部门</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select d.dname,count(e.deptno) num from emp e join dept d on d.deptno = e.deptno group by e.deptno having count(e.deptno) &gt;= 5;</span><br><span class="line">+----------+-----+</span><br><span class="line">| dname    | num |</span><br><span class="line">+----------+-----+</span><br><span class="line">| RESEARCH |   5 |</span><br><span class="line">| SALES    |   6 |</span><br><span class="line">+----------+-----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出薪金比”SMITH” 多的所有员工信息</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where sal &gt; (select sal from emp where ename = 'SMITH');</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出所有”CLERK”(办事员) 的姓名及其部门名称，部门的人数.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,d.dname,num from emp e join dept d on e.deptno = d.deptno join (select deptno,count(deptno) num from emp group by deptno) t on t.deptno = e.deptno where job = 'CLERK';</span><br><span class="line">+--------+------------+-----+</span><br><span class="line">| ename  | dname      | num |</span><br><span class="line">+--------+------------+-----+</span><br><span class="line">| SMITH  | RESEARCH   |   5 |</span><br><span class="line">| ADAMS  | RESEARCH   |   5 |</span><br><span class="line">| JAMES  | SALES      |   6 |</span><br><span class="line">| MILLER | ACCOUNTING |   3 |</span><br><span class="line">+--------+------------+-----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出最低薪金大于 1500 的各种工作及从事此工作的全部雇员人数.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select job,count(*) from emp group by job having min(sal)&gt;1500;</span><br><span class="line">+-----------+----------+</span><br><span class="line">| job       | count(*) |</span><br><span class="line">+-----------+----------+</span><br><span class="line">| ANALYST   |        2 |</span><br><span class="line">| MANAGER   |        3 |</span><br><span class="line">| PRESIDENT |        1 |</span><br><span class="line">+-----------+----------+</span><br><span class="line">3 rows in set (0.02 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出在部门”SALES”&lt;销售部&gt; 工作的员工的姓名，假定不知道销售部的部 门编号.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename from emp e where deptno = (select deptno from dept where dname = 'SALES');</span><br><span class="line">+--------+</span><br><span class="line">| ename  |</span><br><span class="line">+--------+</span><br><span class="line">| ALLEN  |</span><br><span class="line">| WARD   |</span><br><span class="line">| MARTIN |</span><br><span class="line">| BLAKE  |</span><br><span class="line">| TURNER |</span><br><span class="line">| JAMES  |</span><br><span class="line">+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出薪金高于公司平均薪金的所有员工，所在部门，上级领导，雇员的工资等级.</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,d.dname,a.ename '领导名',grade from emp e left join emp a on e.mgr = a.empno left join dept d on e.deptno = d.deptno left join salgrade s on e.sal between s.losal and s.hisal where e.sal &gt; (select avg(sal) from emp);</span><br><span class="line">+-------+------------+--------+-------+</span><br><span class="line">| ename | dname      | 领导名 | grade |</span><br><span class="line">+-------+------------+--------+-------+</span><br><span class="line">| CLARK | ACCOUNTING | KING   |     4 |</span><br><span class="line">| JONES | RESEARCH   | KING   |     4 |</span><br><span class="line">| SCOTT | RESEARCH   | JONES  |     4 |</span><br><span class="line">| FORD  | RESEARCH   | JONES  |     4 |</span><br><span class="line">| BLAKE | SALES      | KING   |     4 |</span><br><span class="line">| KING  | ACCOUNTING | NULL   |     5 |</span><br><span class="line">+-------+------------+--------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出与”SCOTT” 从事相同工作的所有员工及部门名称</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select e.ename,d.dname from emp e join dept d on e.deptno=d.deptno where e.job = (select job from emp where ename = 'SCOTT');</span><br><span class="line">+-------+----------+</span><br><span class="line">| ename | dname    |</span><br><span class="line">+-------+----------+</span><br><span class="line">| SCOTT | RESEARCH |</span><br><span class="line">| FORD  | RESEARCH |</span><br><span class="line">+-------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出薪金等于部门 30 中员工的薪金的其他员工的姓名和薪金</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select ename,sal from emp where sal in (select distinct sal from emp where deptno = 30) and deptno &lt;&gt; 30;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列出薪金高于在部门 30 工作的所有员工的薪金的员工姓名和薪金。部门名 称</p>
</li>
<li><p>列出在每个部门工作的员工数量，平均工资和平均服务期限</p>
</li>
<li><p>列出所有员工的姓名、部门名称和工资</p>
</li>
<li><p>列出所有部门的详细信息和人数</p>
</li>
<li><p>列出各种工作的最低工资及从事此工作的雇员姓名</p>
</li>
<li><p>列出各个部门的 MANAGER (领导) 的最低薪金</p>
</li>
<li><p>列出所有员工的年工资，按年薪从低到高排序</p>
</li>
<li><p>求出员工领导的薪水超过 3000 的员工名称与领导名称</p>
</li>
<li><p>求出部门名称中，带’S’字符的部门员工的工资合计、部门人数</p>
</li>
<li><p>给任职日期超过 30 年的员工加薪 10%.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 免费版本不能用了？那整个学习版看看？</title>
    <url>/7d52198101c1/</url>
    <content><![CDATA[<p>Typroa1.2.4 学习版，懂的都懂，附件在文章的最后链接</p>
<span id="more"></span>

<h3 id="1、安装软件"><a href="#1、安装软件" class="headerlink" title="1、安装软件"></a>1、安装软件</h3><p>安装压缩包中的 EXE 文件进行软件安装</p>
<h3 id="2、对软件打补丁"><a href="#2、对软件打补丁" class="headerlink" title="2、对软件打补丁"></a>2、对软件打补丁</h3><p>在安装软件完成后，找到软件的安装目录，如果不知道如何进入软件的安装目录，可以在桌面的快捷方式处右键单击 -&gt; 点击” 打开文件所在的位置”</p>
<p>在进入软件的安装目录时可以发现一个名为 resources 的文件夹，将压缩包中的 app.asar 放入此文件夹，此时会询问是否替换，这里选择替换</p>
<h3 id="3、激活"><a href="#3、激活" class="headerlink" title="3、激活"></a>3、激活</h3><p>打开 Typora，此时会提示需要激活，此处点击输入序列号</p>
<p><img src="/./assets/9D4A07C48ACD43282AC4DECA58F2A31B.png" alt="9D4A07C48ACD43282AC4DECA58F2A31B"></p>
<p>此处填入邮箱，随便填一个即可，在最后填入激活码，点击激活</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">E8Q9Y5-KXMTL5-7578SL-4S5XKS</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/FF5FF5B9C73F9CED8EBD314B9964DB04.png" alt="FF5FF5B9C73F9CED8EBD314B9964DB04"></p>
<p>到此处便大功告成了</p>
<p><img src="/./assets/84979AEB494B96CBCA63CDA6B192AFAC.png" alt="84979AEB494B96CBCA63CDA6B192AFAC"></p>
<h3 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h3><p>百度网盘：<a href="https://pan.baidu.com/s/1g8gBlNoceADN_Zm-kacZPQ?pwd=x8rq">点击跳转</a> 提取码: x8rq </p>
<p>蓝奏云：<a href="https://asuna773.lanzoul.com/iXTGx0a53xkh">点击跳转</a></p>
<p><a href="https://www.kzwr.com/kzwrfs?fid=e5bc7f54808d5jxtdy.zip">直接下载</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>破解</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04TLS 安装 MySQL8 和设置 root 密码</title>
    <url>/bbcdbd386595/</url>
    <content><![CDATA[<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装 MySQL</h2><p>本文主要是记录 MySQL8.0 在 Ubuntu20.04TLS 上的安装过程</p>
<span id="more"></span>

<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装MySQL-1"><a href="#安装MySQL-1" class="headerlink" title="安装MySQL"></a>安装 MySQL</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/004F4E75E687513068BFD9971AF4936F.png" alt="004F4E75E687513068BFD9971AF4936F"></p>
<h3 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl status mysql</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/91356896F817475C05002A915B63CD5A.png" alt="91356896F817475C05002A915B63CD5A"></p>
<h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改 root 密码</h2><h3 id="查看默认账号密码"><a href="#查看默认账号密码" class="headerlink" title="查看默认账号密码"></a>查看默认账号密码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/./assets/586365DEDEA40A53F7E0B357EA54D5BA.png" alt="586365DEDEA40A53F7E0B357EA54D5BA"></p>
<h3 id="使用默认密码登录MySQL"><a href="#使用默认密码登录MySQL" class="headerlink" title="使用默认密码登录MySQL"></a>使用默认密码登录 MySQL</h3><p><img src="/./assets/55D31C01C0AE03B38FB18E47B569FBF2.png" alt="55D31C01C0AE03B38FB18E47B569FBF2"></p>
<h3 id="修改root密码-1"><a href="#修改root密码-1" class="headerlink" title="修改root密码"></a>修改 root 密码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Cloudflare 实现 GitHub 加速</title>
    <url>/f404e0992e07/</url>
    <content><![CDATA[<h3 id="测试一下直链"><a href="#测试一下直链" class="headerlink" title="测试一下直链"></a>测试一下直链</h3><h3 id="鸽了"><a href="#鸽了" class="headerlink" title="鸽了"></a>鸽了</h3><div style="width:300px;margin:auto;"><audio src="https://music.seabreeze.zone/?/%E6%94%BE%E8%AA%B2%E5%BE%8C%E3%83%86%E3%82%A3%E3%83%BC%E3%82%BF%E3%82%A4%E3%83%A0%20%28%E6%94%BE%E5%AD%A6%E5%90%8ETEA%20TIME%29%20-%20%E5%A4%A9%E4%BD%BF%E3%81%AB%E3%81%B5%E3%82%8C%E3%81%9F%E3%82%88%21%20%28%E7%9B%B8%E9%81%87%E5%A4%A9%E4%BD%BF%29.flac"></audio></div>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>加速</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的 10G 对象存储 ——B2 云存储</title>
    <url>/bd122dd4cb69/</url>
    <content><![CDATA[<p>什么是云存储呢？顾名思义，就是云端的存储，想具体了解什么是云存储的建议左转百度。那么云存储可以干嘛呢？既然是存储，那肯定是存东西啦，例如你可以把一些图片存上去，然后可以通过 URL 访问到图片，视频和音乐也是同样的道理，都可以通过 URL 进行访问。</p>
<span id="more"></span>

<h1 id="那突然响起的音乐可以在最后面关闭！！！"><a href="#那突然响起的音乐可以在最后面关闭！！！" class="headerlink" title="那突然响起的音乐可以在最后面关闭！！！"></a>那突然响起的音乐可以在最后面关闭！！！</h1><h3 id="1、注册账号"><a href="#1、注册账号" class="headerlink" title="1、注册账号"></a>1、注册账号</h3><p>访问 <a href="https://www.backblaze.com/zh_CN/cloud-storage.html">B2 云存储官网</a>进行账号注册</p>
<p><img src="/./assets/D0B026A71DBCC410E500470BC752D965.png" alt="D0B026A71DBCC410E500470BC752D965"></p>
<p>这时候邮箱会收到一封邮件，点技能邮件的链接验证一下账号即可。</p>
<p><img src="/./assets/2BE2A79CAFFA3004D2ED4554902BCDA8.png" alt="2BE2A79CAFFA3004D2ED4554902BCDA8"></p>
<p>我们很轻松的就可以注册这个网站的账号，比之前的 freedom 容易太多了</p>
<h3 id="2、创建桶与文件上传"><a href="#2、创建桶与文件上传" class="headerlink" title="2、创建桶与文件上传"></a>2、创建桶与文件上传</h3><p>点击创建桶，桶名称随便填写，但是需要注意不能和别人同名，第二个选项选公众，英文相对的是 public，其他不用管，直接创建一个桶。</p>
<p><img src="/./assets/1A1477AEF0CEFA36752C71F8C6ED0EB6.png" alt="1A1477AEF0CEFA36752C71F8C6ED0EB6"></p>
<p>像这样就已经是创建了一个桶了</p>
<p><img src="/./assets/80EA0C51B6614E52CC8F7A04BA74003A.png" alt="80EA0C51B6614E52CC8F7A04BA74003A"></p>
<p>点击上载，上传一份文件，此处我以一首歌为例，就用游戏《地铁 2033》中的一首歌举例吧，上传后点击文件，可以看到很多个链接，这些链接是可以直接访问的，都是指向刚刚上传的音乐文件。</p>
<p><img src="/./assets/4E96D48D86865986946CCC28670D2C5C.png" alt="4E96D48D86865986946CCC28670D2C5C"></p>
<p><img src="/./assets/A81CB6E9B88EB835DAFCFB91D0E771E7.png" alt="A81CB6E9B88EB835DAFCFB91D0E771E7"></p>
<h3 id="3、cloudflare注册与域名管理"><a href="#3、cloudflare注册与域名管理" class="headerlink" title="3、cloudflare注册与域名管理"></a>3、cloudflare 注册与域名管理</h3><p>打开 <a href="https://dash.cloudflare.com/sign-up">Cloudflare 官网</a>注册账号，在注册登录后，可以看到这个页面，点击右边的文字 “网站”，</p>
<p><img src="/./assets/432109E71C3574D72572354BAB3326F0.png" alt="432109E71C3574D72572354BAB3326F0"></p>
<p>点击添加站点，将我们之前注册的域名填进去，不需要 http 之类的，例如我的 anita.ga，只需要直接填进去即可</p>
<p><img src="/./assets/5051D2C5E36DC57414C28898E6504D63.png" alt="5051D2C5E36DC57414C28898E6504D63"></p>
<p>在选择计划这里选择 0 元的版本</p>
<p><img src="/./assets/68CA21C8A29AF0541A07048E2CF17E9D.png" alt="68CA21C8A29AF0541A07048E2CF17E9D"></p>
<p>访问之前的域名网站，进行域名管理</p>
<p><img src="/./assets/DFE8D1C2B53DFEBFC71520DEBEA79144.png" alt="img"></p>
<p><img src="/./assets/BC4AA02A8DD463885AF8EACFD2A66A41.png" alt="BC4AA02A8DD463885AF8EACFD2A66A41"></p>
<p>同时，这是也要在 cloudflare 这边做管理</p>
<p><img src="/./assets/8DBDCAC5B53327E86BEA73E30FC4B2BD.png" alt="8DBDCAC5B53327E86BEA73E30FC4B2BD"></p>
<p>点击 DNS，往下稍微看看能 Cloudflare 的名称服务器，此时我们需要复制这两个地址到 freedom 那边去进行替换</p>
<p><img src="/./assets/02F67178347A45F16D277A9968E441A5.png" alt="02F67178347A45F16D277A9968E441A5"></p>
<p><img src="/./assets/1943E7D2DA00E8C413C124746C96EAAF.png" alt="1943E7D2DA00E8C413C124746C96EAAF"></p>
<p>这时就可以在 cloudflare 中对于域名进行管理了，但还需要稍微等等，等待更新完成，像以下情况就是需要稍作等待的。</p>
<p><img src="/./assets/00CF21BC5A88E2694D564C2F53BC761E.png" alt="00CF21BC5A88E2694D564C2F53BC761E"></p>
<p>当我们看到以下内容或者收到邮件提示时，那就证明以及完成了</p>
<p><img src="/./assets/CAB39CDB771B381A5B8E2C103C7B871B.png" alt="CAB39CDB771B381A5B8E2C103C7B871B"></p>
<h3 id="4、CDN加速配置"><a href="#4、CDN加速配置" class="headerlink" title="4、CDN加速配置"></a>4、CDN 加速配置</h3><p>还记得在 B2 桶存储存的文件嘛？看看它的链接</p>
<p><img src="/./assets/19E8E58D99BC1E31EC1790FB3B68FD9C.png" alt="19E8E58D99BC1E31EC1790FB3B68FD9C"></p>
<p>可以看到，我们分配到的地址是 f004.backlazeb2.com，我们复制这个地址，返回 Cloudflare 中，点击 DNS，点击添加记录，类型选择 CNAME，名称填一个自己喜欢的，目标填写桶存储的地址域名，最后点击保存</p>
<p><img src="/./assets/63CC442881E0D79CE94B7875BD0ABE19.png" alt="63CC442881E0D79CE94B7875BD0ABE19"></p>
<p>设置资源的缓存规则</p>
<p><img src="/./assets/39FED9E4EE3EED634E7592EFF4015470.png" alt="39FED9E4EE3EED634E7592EFF4015470"></p>
<p><img src="/./assets/614DE1728F233362030A4B33B6742EE3.png" alt="614DE1728F233362030A4B33B6742EE3"></p>
<p>为了保护桶的隐私，此处需要对我们的资源进行脱敏，所以需要重写我们的 URL</p>
<p><img src="/./assets/9DE0228880D4B7DE127BB2E9832E1F00.png" alt="9DE0228880D4B7DE127BB2E9832E1F00"></p>
<p>此处的字段选择（主机名），运算符选择（等于），值填写（刚刚设置的名称加点加域名），这个其实叫二级域名，相对于我的就是 static.anita.ga，这就是我的二级域名，static 是我前面设置的名字。路径处选择重写到，选择 Dynamic，后面跟的内容如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">concat("/file/改成自己的桶名称", http.request.uri.path)</span><br></pre></td></tr></tbody></table></figure>

<p>复制上面的文字进去，把中文该成自己的 B2 桶名称</p>
<p><img src="/./assets/4621EB0469B1A3BA6A25E03A16264FDF.png" alt="4621EB0469B1A3BA6A25E03A16264FDF"></p>
<p>开启 SSL/TLS（必不可少）</p>
<p><img src="/./assets/6D9E57BCDDA4AA76B04E390EE80502A4.png" alt="6D9E57BCDDA4AA76B04E390EE80502A4"></p>
<p>原版的音乐地址如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://f004.backblazeb2.com/file/fmakcd/Alexey+Omelchuk+-+The+Farewell.flac</span><br></pre></td></tr></tbody></table></figure>

<p>而经过脱敏的音乐地址如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://static.anita.ga/Alexey+Omelchuk+-+The+Farewell.flac</span><br></pre></td></tr></tbody></table></figure>

<p>我们无法从 URL 上看出我们的资源存放位置，保证了自己的隐私。当然，我做教程的都是用的临时邮箱进行注册的，所以我并不怕泄露，因为我都不用这些账号的，没想到吧（狗头）</p>
<h3 id="5、生成密钥"><a href="#5、生成密钥" class="headerlink" title="5、生成密钥"></a>5、生成密钥</h3><p>我们在 B2 云存储中创建一个密钥，方便我们进行管理</p>
<p><img src="/./assets/5BC8C003A4F358A2A6D3CE0BDB384501.png" alt="5BC8C003A4F358A2A6D3CE0BDB384501"></p>
<p>名称随意填写即可，允许访问 Bucket 选择我们刚刚创建的桶，访问类型选择读和写，接下来就是创建</p>
<p><img src="/./assets/AD6C3816DC3F55B5B1DFC1FD6AA5B899.png" alt="AD6C3816DC3F55B5B1DFC1FD6AA5B899"></p>
<p>这个 key 我们必须保管好，这就相当于桶的密码，它有着整个桶的所有控制权，能对里面的文件进行增删查改，所有必须保管好，而且，这也是我们登录管理工具的钥匙，而 Key 的 ID 就相当于账号</p>
<h3 id="6、管理工具"><a href="#6、管理工具" class="headerlink" title="6、管理工具"></a>6、管理工具</h3><p>首先我们先看看我们的云存储资源，资源中有一个 S3 的地址，这说明这是 S3 协议的 URL</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">S3 URL:https://fmakcd.s3.us-west-004.backblazeb2.com/Alexey+Omelchuk+-+The+Farewell.flac</span><br></pre></td></tr></tbody></table></figure>

<h4 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h4><p>这是一款 Windows 工具，，官网地址如下：<a href="https://winscp.net/eng/docs/lang:chs">WinSCP :: WinSCP</a></p>
<p>在 WinSCP 中，选择新建会话，设置如下图</p>
<p><img src="/./assets/4FEA93F76F0A758815E82414F01D8B24.png" alt="4FEA93F76F0A758815E82414F01D8B24"></p>
<p>文件协议选择 Amazon S3，主机名选择 S3 链接的域名，端口无需修改，访问密钥 ID 填写创建的密钥的 ID，私密访问密钥填写你的密钥，那个需要你记住的密钥</p>
<h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h4><p>PicGo 是一款图床工具，具体用法此处暂时不做赘述，需要在插件中心安装插件，通过搜索 S3 即可搜索到。</p>
<p><img src="/./assets/AF33939DA038C0668F3759586C49FFC1.png" alt="AF33939DA038C0668F3759586C49FFC1"></p>
<p>在设置中勾选 Amazon S3</p>
<p><img src="/./assets/D4D042718FC19EE9DF28726254F001E2.png" alt="D4D042718FC19EE9DF28726254F001E2"></p>
<p>对 Amazon S3 进行配置</p>
<p><img src="/./assets/ED47CB96F7A549C616E049970000A5C1.png" alt="ED47CB96F7A549C616E049970000A5C1"></p>
<p>应用密钥 ID 就是刚刚创建的密钥的，刚刚在 WinSCP 上也用过的，应用密钥填写你的密钥，桶就填写桶的名称，文件路径我选择的是年 + 月 + 文件 MD5 + 扩展名，代码如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{year}/{month}/{md5}.{extName}</span><br></pre></td></tr></tbody></table></figure>

<p>具体可以去参考官方文档，插件的 GitHub 地址如下<a href="https://github.com/wayjam/picgo-plugin-s3"> PicGo S3 插件 </a></p>
<p>权限填写 public-read</p>
<p>地区根据你的链接来填，例如我的是 us-west，那我就照着填上去，这个根据实际情况填写</p>
<p>到了自定义节点时，只需要把 s3 链接的域名前面部分复制进去即可，但需要把桶名称和后面的点删除掉</p>
<p>自定义域名则是填写我们配置好的域名，例如我的就是 <a href="https://static.anita.ga/">https://static.anita.ga</a></p>
<p>下面的部分不需要勾选，最后的地方填写 public-read</p>
<p>此时来到上传区，选择 Amazon S3，选择一张图片上传，你就可以快速的得到图片的链接了，当然，此处也是可以上传其他类型的文件的，不一定是要图片。</p>
<p><img src="/./assets/45A1A3CC1046F959BB99D070C8A1FB94.png" alt="45A1A3CC1046F959BB99D070C8A1FB94"></p>
<p>本文到此结束，希望大家喜欢，如果有不懂的可以联系我，我会用我绵薄的知识尽可能的解答问题。</p>
<p>PS：本文图片存储未曾使用 Amazon S3 存储，而是选择了 GitHub 图床，这也都是其他的内容了，虽然更加简单，但我还没更。</p>
<p>最后最后，试着在 Markdown 中插入一首歌试试会怎么样？音乐资源来自刚刚创建的 B2 云存储，当某天这音乐响不起来了，那就证明这个桶我已经干掉了，或者这个写教程的域名我没去做续费。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="430" height="86" src="https://static.anita.ga/Alexey+Omelchuk+-+The+Farewell.flac"></iframe>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>对象存储</tag>
        <tag>云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 GitHub 实现免费图床</title>
    <url>/8e850f5c3b10/</url>
    <content><![CDATA[<h1 id="同样鸽了"><a href="#同样鸽了" class="headerlink" title="同样鸽了"></a>同样鸽了</h1><h1 id="试一试Bilibili的视频"><a href="#试一试Bilibili的视频" class="headerlink" title="试一试Bilibili的视频"></a>试一试 Bilibili 的视频</h1><iframe src="//player.bilibili.com/player.html?aid=767572701&amp;bvid=BV1nr4y1W7vg&amp;cid=557703526&amp;page=1" height="540"> </iframe>

]]></content>
      <categories>
        <category>其他</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>GitHub</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>免费的顶级域名</title>
    <url>/ce23a66d0eed/</url>
    <content><![CDATA[<p>域名是什么？如果此处说一大堆百科上的内容，对我来说确实有点强人所难了，我还没有那么专业，那就用通俗易懂的语言讲讲域名。我们都知道百度，那百度的网站是 <a href="http://www.baidu.com/">www.baidu.com</a> ，那么这个就是域名，因为访问百度其实就是访问百度的服务器，访问服务器需要通过 IP 来访问，而 IP 都是由数字和点组成的，并不方便记忆，那么就需要一个办法来让这些 IP 变得好记起来，此时就到域名出场了。域名就相当于和某个服务器对应的名字，例如百度首页的服务器 IP 是 14.215.177.38，而它对应的域名是 <a href="http://www.baidu.com,我们只需要在浏览器输入百度的域名,浏览器就会根据域名解析到的ip去访问百度的服务器./">www.baidu.com，我们只需要在浏览器输入百度的域名，浏览器就会根据域名解析到的 IP 去访问百度的服务器。</a></p>
<p>所以，我们现在就来申请一个免费的域名，在我们需要的时候就可以用到</p>
<span id="more"></span>

<p>因为有人说会因为域名热度上去会被回收，所以尽可能的用来做小项目用用就好，直接买断的域名其实也不贵，这里就不过多赘述了，直接进入正题。</p>
<p>Tips：这个方法尽可能的保证网络可以正常访问 Google 的情况下进行，否则可能会出现各种问题导致无法注册。</p>
<p>首先访问 <a href="https://www.freenom.com/%E8%BF%9B%E8%A1%8C%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%BF%E9%97%AE%E5%88%B0%E7%BD%91%E7%AB%99%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E6%B2%A1%E6%9C%89%E6%B3%A8%E5%86%8C%E7%9A%84%E6%8C%89%E9%92%AE%EF%BC%8C%E5%8F%AA%E6%9C%89%E7%99%BB%E5%BD%95">https://www.freenom.com/ 进行账号注册，当我们访问到网站时，会发现没有注册的按钮，只有登录</a></p>
<p><img src="/./assets/892BAE52AFC29C771566D1CBAF47704B.png" alt="892BAE52AFC29C771566D1CBAF47704B"></p>
<p>既然没有注册，那会不会藏在登录页面呢？过去看看！</p>
<p><img src="/./assets/EDC349144FEEF374F9A8B864D8300764.png" alt="EDC349144FEEF374F9A8B864D8300764"></p>
<p>但，貌似并没有啊，其实啊，这个注册需要点特殊的方法访问，当然，如果你的网络可以访问 Google，那么你可以直接使用 Google 账号注册，如果不能使用 Google，那注册起来可能就比较麻烦了（甚至可能无法注册）。</p>
<p><img src="/./assets/AA311472F7F9369AE494386C9C595285.png" alt="AA311472F7F9369AE494386C9C595285"></p>
<p>跟着图片的位置进来，往下划可以看到这样的地方</p>
<p><img src="/./assets/424DA268F760CC6A9321B82D8506C539.png" alt="424DA268F760CC6A9321B82D8506C539"></p>
<p>点进去进行注册，填写自己的邮箱</p>
<p><img src="/./assets/98A813150BDAE033F4AD7DBA316F579A.png" alt="98A813150BDAE033F4AD7DBA316F579A"></p>
<p>在填写邮箱进行验证后，我们会收到一封邮件，我们需要打开邮件的链接进行验证</p>
<p><img src="/./assets/42D8F970EABC6983B437A4BE0132AF44.png" alt="42D8F970EABC6983B437A4BE0132AF44"></p>
<p>打开成功后回到原先发送邮件验证的标签，应该可以看到页面出现各种信息需要填写的了（如果没有试着刷新一下）</p>
<p><img src="/./assets/6D258054627965834980D79DB706333E.png" alt="6D258054627965834980D79DB706333E"></p>
<p>这个时候我们就要伪造一份美国的身份了，此时请百度美国身份生成，将身份信息一一填写并提交，在你提交后，不出意外的话会成功了的（当然，出意外的话建议保证自己的网络畅通性的前提条件下进行 —— 指能访问 Google）</p>
<p><img src="/./assets/D3877D11639EB51F09F4F7B2C21A8424.png" alt="D3877D11639EB51F09F4F7B2C21A8424"></p>
<p>可见这破网站注册有多难，所以推荐直接使用 Google 登录，避免那么多的麻烦</p>
<p>此时，我们去进行域名注册</p>
<p><img src="/./assets/89F8130271BF43C4250DB07BF63E50F6.png" alt="89F8130271BF43C4250DB07BF63E50F6"></p>
<p>此处输入域名，监测域名可用性</p>
<p><img src="/./assets/10DB1DD8383091E3761F41B9B5BC4204.png" alt="10DB1DD8383091E3761F41B9B5BC4204"></p>
<p>可以看到，这些域名都是可以注册的，点击 Get it now! 加入购物车，然后右上角直接购买</p>
<p><img src="/./assets/CEC7C7A94299C9ED1565B368BBAE6F2B.png" alt="CEC7C7A94299C9ED1565B368BBAE6F2B"></p>
<p>此处选择十二个月免费版本（12 个月免费，一年就十美元？？？？）</p>
<p><img src="/./assets/946B52CC35ED7EC3CBB58B9379AE364B.png" alt="946B52CC35ED7EC3CBB58B9379AE364B"></p>
<p><img src="/./assets/F68325A1A1E5558235584BAA449526D5.png" alt="F68325A1A1E5558235584BAA449526D5"></p>
<p><img src="/./assets/A3348FD7230BA9BF0D56D06B4CE7B4F7.png" alt="A3348FD7230BA9BF0D56D06B4CE7B4F7"></p>
<p>等待跳转，注册结束，点击 Services 的 My Domains 就可以看到自己的域名，在这里可以管理自己的域名，有了域名，可以做挺多事的，就看自己拿域名做什么了。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 TinyPNG 接口实现一个压缩图片小 Demo</title>
    <url>/626b645f09ce/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是这样的，其实很简单，就是之前的博客图片都是交给图床去接管的，用过 GitHub 图床，用过七牛，用过腾讯云，还有又拍云、B2 云、甚至还有最开始时候的 Gitee，还有一大堆如同 smms 这种第三方运营的专业图床。但随着时间的流逝，谁也不能保证说永恒，GitHub 访问慢， jsDelivr 被墙，CloudFlare 被联通墙，smms 被墙，弄了个 smms.app 的新站点出来依旧是访问不理想，但即便有 hello 图床这种免费快速的图床，但又害怕哪天就突然停运了。</p>
<span id="more"></span>

<p><strong>要不这样吧，一份放本地，一份统一一个图床</strong>，所以在此之前需要对之前的图片进行收集，因为有些链接都已经失效了，所以还是得手工筛查一遍，而且为了存储的质量，选择了大名鼎鼎的 TinyPNG 做图片压缩，节约空间是小事，提高访问速度这是真的。</p>
<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><hr>
<h3 id="1、账号注册"><a href="#1、账号注册" class="headerlink" title="1、账号注册"></a>1、账号注册</h3><p>首先需要说明的是，图片的压缩服务是交由 TinyPNG 来做处理的，所以需要上传文件到云端，但好在官方给了 API，所以只需要去注册一个账号，申请一个 key，官方地址是这个 ——<a href="https://tinify.cn/">TinyPNG – 智能压缩您的 WebP、JPEG 和 PNG 图片 (tinify.cn)</a></p>
<p><img src="/./assets/7A7D25F1E508C853BE228E447949FAD3.png" alt="7A7D25F1E508C853BE228E447949FAD3"></p>
<p>首先是点击开发者 API，填写名字和邮箱，点击 Get your API key 即可收到用户登录的邮件</p>
<p><img src="/./assets/51114783C5936E16CA3C6D009E1DDE01.png" alt="51114783C5936E16CA3C6D009E1DDE01"></p>
<p>登录后在个人中心可以点击 API，在这个页面可以生成自己的 API</p>
<h3 id="2、写代码"><a href="#2、写代码" class="headerlink" title="2、写代码"></a>2、写代码</h3><p>因为 API 接口支持本地图片和 URL 以及 Buff 的形式，但我只实现了两个功能，分别是本地图片和 URL，具体参考官方文档 ——<a href="https://tinify.cn/developers/reference">TinyPNG – API Reference (tinify.cn)</a></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url</span>():</span><br><span class="line">    source = tinify.from_url(<span class="built_in">input</span>())</span><br><span class="line">    source.to_file(<span class="string">"newFile"</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"newFile"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    new_name = <span class="built_in">str</span>.upper(hashlib.md5(data).hexdigest()) + <span class="string">"png"</span></span><br><span class="line">    os.rename(<span class="string">"newFile"</span>, new_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_key</span>():</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">"key.txt"</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"key.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"-------------------------\n\n你的Key文件内容如下："</span> + data + <span class="string">"\n\n-------------------------------"</span>)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"未读取到目录下的Key.txt文件，现在为你创建"</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"key.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="built_in">input</span>(<span class="string">"请输入Key，Key可以在TinyPng免费申请，多个Key用|分开："</span>))</span><br><span class="line">        win32api.SetFileAttributes(<span class="string">"./key.txt"</span>, win32con.FILE_ATTRIBUTE_HIDDEN)</span><br><span class="line">        <span class="keyword">return</span> init_key()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_key</span>():</span><br><span class="line">    <span class="keyword">return</span> keys[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(keys) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">from_file</span>():</span><br><span class="line">    root = tk.Tk()  <span class="comment"># 创建一个Tkinter.Tk()实例</span></span><br><span class="line">    root.withdraw()  <span class="comment"># 将Tkinter.Tk()实例隐藏</span></span><br><span class="line">    f_path = filedialog.askopenfilename(title=<span class="string">"选择需要压缩的文件"</span>,</span><br><span class="line">                                        filetypes=[(<span class="string">"可压缩图像"</span>, <span class="string">".jpg .jpeg .jpe .jfif .webp .png"</span>)],</span><br><span class="line">                                        defaultextension=<span class="string">".png"</span>)</span><br><span class="line">    path = Path(f_path)</span><br><span class="line">    parents_dir = <span class="built_in">str</span>(path.parents[<span class="number">0</span>])</span><br><span class="line">    suffix = <span class="built_in">str</span>(path.suffix)</span><br><span class="line">    temp_path = parents_dir + <span class="string">'\\tempFile'</span> + suffix</span><br><span class="line">    source = tinify.from_file(f_path)</span><br><span class="line">    source.to_file(temp_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    md5_path = parents_dir + <span class="string">'\\'</span> + <span class="built_in">str</span>.upper(hashlib.md5(data).hexdigest()) + suffix</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(md5_path):</span><br><span class="line">        os.rename(temp_path, md5_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"压缩完成，文件名为"</span> + md5_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"文件已存在"</span>)</span><br><span class="line">    os.remove(f_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">from_url</span>(<span class="params">link</span>):</span><br><span class="line">    root = tk.Tk()  <span class="comment"># 创建一个Tkinter.Tk()实例</span></span><br><span class="line">    root.withdraw()  <span class="comment"># 将Tkinter.Tk()实例隐藏</span></span><br><span class="line">    suffix = <span class="string">'.'</span> + link.split(<span class="string">'.'</span>)[-<span class="number">1</span>]</span><br><span class="line">    temp_file = <span class="string">"temp"</span> + suffix</span><br><span class="line">    source = tinify.from_url(link)</span><br><span class="line">    source.to_file(temp_file)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp_file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    md5 = <span class="built_in">str</span>.upper(hashlib.md5(data).hexdigest())</span><br><span class="line">    full_name = md5 + suffix</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(full_name):</span><br><span class="line">        os.rename(temp_file, full_name)</span><br><span class="line">    save_path = filedialog.asksaveasfilename(title=<span class="string">"选择保存路径"</span>,</span><br><span class="line">                                             filetypes=[(<span class="string">"可压缩图像"</span>, <span class="string">".jpg .jpeg .jpe .jfif .webp .png"</span>)],</span><br><span class="line">                                             defaultextension=suffix, initialfile=md5)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">        shutil.move(full_name, save_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"压缩已完成，路径为"</span> + save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    keys = init_key().split(<span class="string">"|"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        tinify.key = random_key()</span><br><span class="line">        i = <span class="built_in">input</span>(<span class="string">"直接回车选择文件，输入网站从链接上传"</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">""</span>:</span><br><span class="line">            from_file()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            from_url(i)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>项目部分操作运用到了 tk 库，主要是方便了选择文件和保存文件，同时还对文件进行了 MD5 校验，文件名就是图片的 MD5 值</p>
<h2 id="展示结果"><a href="#展示结果" class="headerlink" title="展示结果"></a>展示结果</h2><p><img src="/./assets/85E9454C2537EE0E1775172B92217772.png" alt="85E9454C2537EE0E1775172B92217772"></p>
<p>完全能够完成压缩的工作，再看看压缩率</p>
<p><img src="/./assets/AAD2ECBC7E032AEC93C090BE9B264537.png" alt="AAD2ECBC7E032AEC93C090BE9B264537"></p>
<p>惊人的十倍压缩率，那会不会被压得太糊了呢？下做对比</p>
<p>这是压缩前的</p>
<p><img src="/./assets/254B78057ED854F9F23ACD37ADA5C6E3.jpg" alt="254B78057ED854F9F23ACD37ADA5C6E3"></p>
<hr>
<p>这是压缩后的</p>
<p><img src="/./assets/13FDEF285FBE62C9C60E5F470F27178E.jpg" alt="13FDEF285FBE62C9C60E5F470F27178E"></p>
<p>我个人感觉是可以完全接受的，毕竟十倍的压缩率呢</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>图片压缩</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 访问慢，怎么解决呢，那就修改 hosts 吧</title>
    <url>/72e3382e9b0d/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>GitHub，我们平时经常需要访问的一个<del>同性交友网站</del>，但他的服务器都是在海外的，所以对于我们国内用户来讲，那属实是有点为难人了呢，在访问过程中时不时就会出现访问失败的情况，有时是前一秒还能正常打开页面，下一秒就给你卡住了，点什么都加载不了。那怎么办呢？总不至于放弃上去<del>交友</del>的机会吧。</p>
<span id="more"></span>

<p>其实这个问题的解决方案很多，网上也有很多教程，其实最最方便快捷的就是通过代理来实现，但是嘛，懂的都懂，这些代理都是需要自己搭建或者购买服务的，而且这是在台面上不允许的哦（小声说）。还有本次说到的改 hosts 方法，但该方法有一定的时效性，所以为了保证时效性，就找到了一个大佬 <a href="https://github.com/ineo6">ineo6</a> 的项目，通过程序来获取 GitHub 最新的 hosts，项目是 <a href="https://github.com/ineo6/hosts">ineo6/hosts</a>。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这个项目其实有多个版本，首先说的是远程版</p>
<h3 id="远程版"><a href="#远程版" class="headerlink" title="远程版"></a>远程版</h3><p>远程版其实就是通过网络获取最新的 hosts，再将这些 hosts 手动写入 hosts 文件中，至于如何修改 hosts 文件，Windows 可以看下面的代码，其他的系统可以网上搜索一下。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">start C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></tbody></table></figure>

<p>而 hosts 的内容可以访问 <a href="https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts%E6%9D%A5%E8%8E%B7%E5%8F%96">https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts 来获取</a></p>
<h3 id="本地版"><a href="#本地版" class="headerlink" title="本地版"></a>本地版</h3><p>下载 <a href="https://github.com/ineo6/hosts/releases/download/v1.0.1/hosts-server-pkg-win-x64.zip">https://github.com/ineo6/hosts/releases/download/v1.0.1/hosts-server-pkg-win-x64.zip</a> ，解压后执行下面命令，服务会运行在： <a href="http://localhost:8888/">http://localhost:8888</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.\hosts-server.exe --port=8888</span><br></pre></td></tr></tbody></table></figure>

<h3 id="通过-SwitchHosts-自动更新"><a href="#通过-SwitchHosts-自动更新" class="headerlink" title="通过 SwitchHosts 自动更新"></a>通过 SwitchHosts 自动更新</h3><p>这里推荐使用 <code>SwitchHosts</code> 配置 <code>hosts</code>，操作很简单，支持跨平台。</p>
<blockquote>
<p>注意：首次使用先备份下本地 hosts。</p>
</blockquote>
<p>详细介绍可以阅读 <a href="https://mp.weixin.qq.com/s/A37XnD3HdcGSWUflj6JujQ">SwitchHosts! 还能这样管理 hosts，后悔没早点用</a> 。</p>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>添加一条规则：</p>
<ul>
<li>方案名：GitHub（可以自行命名）</li>
<li>类型：远程</li>
<li> URL 地址：<a href="https://gitlab.com/ineo6/hosts/-/raw/master/hosts">https://gitlab.com/ineo6/hosts/-/raw/master/hosts</a></li>
<li> 自动更新：1 个小时（时间可自行调整）</li>
</ul>
<p>这样就可以和最新的 <code>hosts</code> 保持同步。</p>
<p><img src="/./assets/7513390AE87DC54DBB905CE1BC4487D1.png" alt="7513390AE87DC54DBB905CE1BC4487D1"></p>
<h3 id="fast-dev"><a href="#fast-dev" class="headerlink" title="fast-dev"></a>fast-dev</h3><p>fast-dev 是一款即开即用的 APP，无需过多的配置即可实现 GitHub 访问，项目依旧来自于 ineo6，项目地址 <a href="https://github.com/ineo6/fast-dev">ineo6/fast-dev: GitHub 访问助手</a>，相较于前面的方法，这个更加简单易用，并且有着一定的自定义程度。</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>Windows</category>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>加速</tag>
        <tag>hosts</tag>
        <tag>网络加速</tag>
      </tags>
  </entry>
</search>
